[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "This schedule is tentative and subject to change.\nWarmups are due every class day, even if they are not listed under the “Due” column.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "schedule.html#week-2",
    "href": "schedule.html#week-2",
    "title": "Schedule",
    "section": "Week 2",
    "text": "Week 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nSep. 18\nWorking with Symbolic Logic\n\n\n\n\n\nWe introduce formal manipulations of logical expressions and work with the many ways to manipulate conditional statements.\n\n\n\nLearning Objectives\nSets and Logic\n\nPrep\nConditionals and Friends\nIn Class\nConditionals and Friends\n\n\n\n\n\n\n\nW\nSep. 20\nSets and Set Operations\n\n\n\n\n\nWe introduce sets, set-builder notation, and operations for combining and measuring sets.\n\n\n\nLearning Objectives\nSets and Logic\n\nPrep\nSets\nIn Class\nSets\n\n\n\n\n\n\n\nF\nSep. 22\nLab 2: Inclusion-Exclusion\n\n\n\n\n\nWe use the inclusion-exclusion formula and its generalizations to compute the cardinality of unions of sets. Along the way, we practice writing mathematical computations and performing computational experiments.\n\n\n\nLearning Objectives\nSets and Logic\n\nPrep\nMore on Sets\nIn Class\nLab 2: Inclusion-Exclusion\n\nDue\nLab 1: Technical Writing and Truth Tables"
  },
  {
    "objectID": "schedule.html#week-3",
    "href": "schedule.html#week-3",
    "title": "Schedule",
    "section": "Week 3",
    "text": "Week 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nSep. 25\nQuantifiers and Predicate Logic\n\n\n\n\n\nWe discuss quantification of propositions over sets and how to apply logical operations to symbolic quantifiers.\n\n\n\nLearning Objectives\nSets and Logic\n\nPrep\nQuantifiers and Predicate Logic\nIn Class\nQuantifiers and Predicate Logic\n\n\n\n\n\n\n\nW\nSep. 27\nFurther Topics: Logic and Sets\n\n\n\n\n\nWe introduce logical deduction and review topics from the course so far.\n\n\n\nLearning Objectives\nSets and Logic\nProof\n\nPrep\nMore on Quantifiers and Logic\nIn Class\nTBD\n\n\n\n\n\n\n\nF\nSep. 29\nQuiz 1\n\n\n\n\n\nThe first of four quizzes in which students have an opportunity to complete Learning Targets. This quiz includes targets LS1, LS2, and LS3.\n\n\n\n\n\n\nDue\nLab 2: Inclusion-Exclusion"
  },
  {
    "objectID": "schedule.html#week-4",
    "href": "schedule.html#week-4",
    "title": "Schedule",
    "section": "Week 4",
    "text": "Week 4\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nOct. 02\nDirect Proofs\n\n\n\n\n\nWe introduce direct proofs, our first general technique for proving statements about mathematics and algorithms.\n\n\n\nLearning Objectives\nProof techniques\n\nPrep\nDirect Proofs\nIn Class\nTBD\n\n\n\n\n\n\n\nW\nOct. 04\nCases, Contradictions, and Counterexamples\n\n\n\n\n\nWe introduce several additional proof techniques, as well as the practice of counterexamples for disproving incorrect implications.\n\n\n\nLearning Objectives\nProof techniques\n\nPrep\nCases, Contradictions, and Counterexamples\n\n\n\n\n\n\n\nF\nOct. 06\nLab 3: Proof Practice\n\n\n\n\n\nWe practice proving mathematical statements using a variety of techniques.\n\n\n\nLearning Objectives\nProof techniques\n\nPrep\nProof Style\nIn Class\nLab 3: Proof Practice"
  },
  {
    "objectID": "schedule.html#week-5",
    "href": "schedule.html#week-5",
    "title": "Schedule",
    "section": "Week 5",
    "text": "Week 5\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nOct. 09\nInduction\n\n\n\n\n\nWe introduce mathematical induction, a powerful proof technique for demonstrating that a claim is true for infinitely many cases.\n\n\n\nLearning Objectives\nProof techniques\n\nPrep\nIntroduction to Induction\n\n\n\n\n\n\n\nW\nOct. 11\nMore Induction\n\n\n\n\n\nWe broaden our usage of induction to use strong induction and to write inductive proofs for the correctness of functions.\n\n\n\nLearning Objectives\nProof techniques\n\nPrep\nMore Induction\n\n\n\n\n\n\n\nF\nOct. 13\nNo Class: Midterm Recess\n\n\n\n\n\n\n\n\n\n\n\n\nDue\nLab 3: Proof Practice"
  },
  {
    "objectID": "schedule.html#week-6",
    "href": "schedule.html#week-6",
    "title": "Schedule",
    "section": "Week 6",
    "text": "Week 6\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nOct. 16\nRelations\n\n\n\n\n\nWe introduce relations, with a special focus on equivalence relations on sets.\n\n\n\nLearning Objectives\nRelations and functions\n\nPrep\nRelations\n\n\n\n\n\n\n\nW\nOct. 18\nFunctions\n\n\n\n\n\nWe introduce functions, with a focus on recursive definitions of functions.\n\n\n\nLearning Objectives\nRelations and functions\n\nPrep\nFunctions\n\n\n\n\n\n\n\nF\nOct. 20\nQuiz 2\n\n\n\n\n\nThe second of four quizzes in which students have an opportunity to complete Learning Targets. This quiz includes targets LS1, LS2, LS3, PF1, PF2, and FR1.\n\n\n\n\n\n\nDue\nLab 3: Proof Practice"
  },
  {
    "objectID": "schedule.html#week-7",
    "href": "schedule.html#week-7",
    "title": "Schedule",
    "section": "Week 7",
    "text": "Week 7\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nOct. 23\nCounting\n\n\n\n\n\nWe use the principles of addition, multiplication, and inclusion-exclusion to solve counting problems.\n\n\n\nLearning Objectives\nCounting\n\nPrep\nCounting\nIn Class\nCounting Activity\n\n\n\n\n\n\n\nW\nOct. 25\nPermutations and Combinations\n\n\n\n\n\nWe use permutations and combinations to count possibilities in situations involving rearrangement and subset-selection.\n\n\n\nLearning Objectives\nCounting\n\nPrep\nPermutations and Combinations\n\n\n\n\n\n\n\nF\nOct. 27\nLab 4: Counting Lattice Paths\n\n\n\n\n\nWe use binomial coefficients and Python programming to efficiently compute the number of paths through grids.\n\n\n\nLearning Objectives\nCounting\n\nPrep\nCounting Lattice Paths\nIn Class\nLab 4: Counting Lattice Paths"
  },
  {
    "objectID": "schedule.html#week-8",
    "href": "schedule.html#week-8",
    "title": "Schedule",
    "section": "Week 8",
    "text": "Week 8\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nOct. 30\nRecursion and Recurrence Relations\n\n\n\n\n\nWe introduce recurrence relations and simple methods for solving them.\n\n\n\nLearning Objectives\nRecurrence Relations\n\nPrep\nRecursion and Recurrence Relations\nIn Class\nTower of Hanoi\n\n\n\n\n\n\n\nW\nNov. 01\nRecursion and Recurrence Relations\n\n\n\n\n\nWe practice writing recurrence relations to describe quantities of interest and develop further techniques to solve them.\n\n\n\n\nPrep\nMore Recursion and Recurrence Relations\nIn Class\nParking Spaces\n\n\n\n\n\n\n\nF\nNov. 03\nLab 5: Analyzing Gradient Descent\n\n\n\n\n\nWe use recurrence relations to analyze the runtime of an algorithm for minimizing a function.\n\n\n\n\nPrep\nNumerical Algorithms\nIn Class\nLab 5: Analyzing Gradient Descent\n\nDue\nLab 4: Counting Lattice Paths"
  },
  {
    "objectID": "schedule.html#week-9",
    "href": "schedule.html#week-9",
    "title": "Schedule",
    "section": "Week 9",
    "text": "Week 9\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nNov. 06\nAsymptotics and Big-Oh\n\n\n\n\n\nWe formally define big-oh notation and prove asymptotic descriptions of various functions.\n\n\n\nLearning Objectives\nAsymptotics\n\nPrep\nAsymptotics and Big-Oh Notation\n\n\n\n\n\n\n\nW\nNov. 08\nAnalyzing Algorithms: The Tree Method\n\n\n\n\n\nWe use the tree method and other methods to estimate asymptotic runtimes of common algorithms.\n\n\n\nLearning Objectives\nAsymptotics\n\nPrep\nAnalyzing Algorithms\n\n\n\n\n\n\n\nF\nNov. 10\nGraphs\n\n\n\n\n\nWe introduce graphs as models of data structures and connected systems.\n\n\n\nLearning Objectives\nGraph Theory\n\nPrep\nGraphs and Graph Theory\n\nDue\nLab 5: Gradient Descent"
  },
  {
    "objectID": "schedule.html#week-10",
    "href": "schedule.html#week-10",
    "title": "Schedule",
    "section": "Week 10",
    "text": "Week 10\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nNov. 13\nQuiz 3\n\n\n\n\n\nThe third of four quizzes in which students have an opportunity to complete Learning Targets. This quiz includes targets LS1, LS2, LS3, PF1, PF2, FR1, C1, C2, and R1.\n\n\n\n\n\n\n\n\n\n\n\n\nW\nNov. 15\nGraphs\n\n\n\n\n\nWe continue our discussion of graphs with a focus on trees.\n\n\n\nLearning Objectives\nGraph Theory\n\nPrep\nMore Graph Theory\n\n\n\n\n\n\n\nF\nNov. 17\nLab 6: Triangle-Counting\n\n\n\n\n\nWe study the adjacency matrix of a graph and use it to count the number of triangles in real and synthetic graph data sets.\n\n\n\nLearning Objectives\nGraph Theory\n\nPrep\nNetwork Science\nIn Class\nLab 6: Introduction to Network Science"
  },
  {
    "objectID": "schedule.html#week-11",
    "href": "schedule.html#week-11",
    "title": "Schedule",
    "section": "Week 11",
    "text": "Week 11\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nNov. 27\nIntroducing Discrete Probability\n\n\n\n\n\nWe introduce discrete probability through a discussion of a famous problem.\n\n\n\nLearning Objectives\nProbability\n\nPrep\nIntroducing Discrete Probability\n\n\n\n\n\n\n\nW\nNov. 29\nSample Spaces and Conditional Probability\n\n\n\n\n\nWe introduce formal discrete probability theory via sample spaces. We also introduce conditional probability.\n\n\n\nLearning Objectives\nProbability\n\nPrep\nSample Spaces, Conditional Probability\nIn Class\nSample Spaces, Conditional Probability\n\n\n\n\n\n\n\nF\nDec. 01\nLab 7: TBD\n\n\n\n\n\n\n\n\n\nLearning Objectives\nProbability\n\n\n\nDue\nLab 6: TBD"
  },
  {
    "objectID": "schedule.html#week-12",
    "href": "schedule.html#week-12",
    "title": "Schedule",
    "section": "Week 12",
    "text": "Week 12\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nDec. 04\nBayes' Theorem\n\n\n\n\n\nWe continue our discussion of conditional probability and introduce Bayes' Theorem.\n\n\n\nLearning Objectives\nProbability\n\nPrep\nConditional Probability and Bayes' Theorem\nIn Class\nBayes' Rule and DNA Testing\n\n\n\n\n\n\n\nW\nDec. 06\nRandom Variables and Expectation\n\n\n\n\n\nWe define random variables and compute the expected value of simple random variables.\n\n\n\nLearning Objectives\nProbability\n\nPrep\nRandom variables and expectation\nIn Class\nTBD\n\n\n\n\n\n\n\nF\nDec. 08\nQuiz 4\n\n\n\n\n\n\n\n\n\n\n\n\nDue\nLab 7: TBD"
  },
  {
    "objectID": "schedule.html#week-13",
    "href": "schedule.html#week-13",
    "title": "Schedule",
    "section": "Week 13",
    "text": "Week 13\n\n\n\n\n\n\n\n\n\n\n\n\n\nM\nDec. 11\nFlex, Review\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "schedule.html#final-exam",
    "href": "schedule.html#final-exam",
    "title": "Schedule",
    "section": "Final Exam",
    "text": "Final Exam\nOur final exam will be another quiz covering all twelve core Learning Targets. So, it’s just like Quiz 4, except you’ll have 3 hours instead of 50 minutes."
  },
  {
    "objectID": "pages/mask-policy.html",
    "href": "pages/mask-policy.html",
    "title": "Masks Are Required in CSCI 0200",
    "section": "",
    "text": "The Computer Science Department policy states that:\n\nWe in the Computer Science department value a safe learning and working environment for all. While we can’t eliminate the risks associated with COVID-19, evidence suggests that widespread masking can significantly reduce the transmission and severity of disease. In order to protect the health of our community, the CS department recommends that students and faculty wear masks in CS learning spaces, including classrooms, office hours, and public areas. We acknowledge the College policy gives instructors the final say over classroom masking requirements, and expect all students to respect instructors’ stated policies in each course.\n\nIn alignment with this policy:\n\nMasks are required during scheduled class periods in Weeks 1 and 2 and after Thanksgiving break.\nMasks are encouraged during Student Hours and Peer Help.\nMasks are required during private meetings in my office.\n\nDuring the first week of class, I will stock masks that I will offer you in case you forget yours. In the second week of class, you will be responsible for bringing your own masks. If you arrive in class without one, I’ll ask you to leave class and come back once you have obtained a mask.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/lab-assessment.html",
    "href": "pages/lab-assessment.html",
    "title": "Assessment of Labs",
    "section": "",
    "text": "Labs are assessed on a 4-part rubric similar to the EMRF rubric of Stutzman and Race:This particular scale is very close to the scale used by Peter-Michael Osera at Grinnell College.\nA lab report obtains the highest grade for which it meets all of the requirements.\nExcellent (E):\n\nThe lab includes a complete contributions statement describing the contributions of any collaborators, as well as external sources such as websites or ChatGPT.\nThe lab exhibits complete understanding of the material.\nThe lab has at worst, a few minor design errors or surface-level writing issues.\nMathematics\n\nIncluded typed mathematics is fully correct, including steps and final result.\nMathematics is correctly typed when required.\nMathematical work has all steps clearly justified as demonstrated in the solutions.\n\nEach stage of a calculation is justified by an appeal to a known result, identity, or formula.\nProofs are correct and justify their steps.\n\n\nAll required pictures from the board are included.\nAll coding experiments run and produce correct outputs.\n\nMeets Expectations (M):\n\nThe lab exhibits complete understanding of the material.\nThe lab includes a complete contributions statement describing the contributions of any collaborators, as well as external sources such as websites or ChatGPT.\nThe lab has some minor errors of correctness, design, or writing. Fixing these errors would demonstrate improved understanding of the material.\nMathematics\n\nIncluded typed mathematics is fully correct, including steps and final result.\nMathematics is mostly correctly typed, possibly with a few minor typing errors.\nMathematical calculations have some of their steps justified as demonstrated in the solutions.\n\nMost stages of calculations are justified by an appeal to a known result, identity, or formula.\nProofs usually justify their steps.\n\n\nAll coding experiments run and produce outputs which are close to expected.\n\nNeeds Revision (R):\n\nThe lab exhibits one or more significant misunderstandings of the material, or many minor errors.\nCoding experiments do not run or produce substantially incorrect output.\nMathematics\n\nIncluded typed mathematics is incorrect in at least one problem, including steps or final result.\nMathematics is correctly typed in at least some cases, with many major errors.\nMost or all mathematical calculations and proofs do not include a justification of their steps.\n\nThe contributions statement is partial or missing.\n\nNot Completed (N):\n\nNot completed to a degree sufficient to demonstrate understanding of the material.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/learning-targets.html",
    "href": "pages/learning-targets.html",
    "title": "Learning Targets",
    "section": "",
    "text": "Targets LS1-3 are introduced on Quiz 1. Targets PF1, PF2, and FR1 are introduced on Quiz 2. Targets C1, C2, and R1 are introduced on Quiz 3. Targets G1, P1, and P2 are introduced on Quiz 4.\nLogic and Sets \n\nLS1: I can simplify and evaluate logical expressions that include quantifiers and boolean operations.\nLS2: I can represent sets in set-builder notation; determine whether an object is an element of a set; and prove that one set is equal to or a subset of another.\nLS3: I can perform operations on sets (intersection, union, complement, difference, Cartesian product) and determine the cardinality of a set.\n\nProofs \n\nPF1: I can use direct proof, proof by cases, and proof-by-contradiction to prove mathematical statements.\nPF2: I can choose between weak and strong induction and write correct inductive proofs that include both a base case and an inductive step.\n\nFunctions and Relations\n\nFR1: I can determine whether or not a given relation is an equivalence relation.\n\nCounting\n\nC1: I can use the principles of addition, multiplication, and inclusion-exclusion to solve counting problems.\nC2: I can use permutations and combinations to count the number of candidate solutions to a given problem.\n\nRecursion and Recurrence Relations\n\nR1: I can use recurrence relations to model and analyze simple mathematical processes and algorithms.\n\nGraphs\n\nG1: I can write correct proofs of simple mathematical propositions about the structure of graphs.\n\nProbability\n\nPR1: I can evaluate marginal, joint, and conditional probabilities of events on discrete sample spaces.\nPR2: I can evaluate expectations of random variables on discrete sample spaces.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/llms.html",
    "href": "pages/llms.html",
    "title": "More on Language Models",
    "section": "",
    "text": "LLMs represent many dramatic technical achievements in algorithms, machine learning, statistics, human-computer interaction (HCI), chip-design, and many other fields. They are impressive artifacts! Anyone who tells you LLMs are not impressive technical achievements is not looking carefully.\n\nHowever…\n\nYou are being routinely misled about LLMs by secretive actors who want you to believe these models are more capable than they are.\nThe labor required for reinforcement learning with human feedback is low-paying, deeply traumatizing, and disproportionately falls on the Global South.\nLLMs are already leading to degradation in online information ecosystems, human creative production, and environmental resources.\nWhile boosters promise more leisure and creative opportunity, the long-term trend of automation and AI is to reduce wages. Generative language models are already contributing to layoffs.\nCompanies training LLMs are stealing from authors and publishers to assemble their training data.\nLLMs systematically reproduce harmful stereotypes along axes of gender and race.\nIncreases in the amount of resources required to train LLMs are concentrating power in the hands of a small number of tech corporations.\nLLMs regularly generate responses that are humorously or dangerously wrong.\n\n\n\nLLMs Are Like Cars\nI encourage you to think of LLMs like you think about gas cars.\n\nLike cars, LLMs can be extremely helpful. One day, it might even be necessary to use LLMs in your daily life.\nLike cars, every time you use an LLM you make a small contribution toward environmental degradation.\nAs with fossil-fuel cars, large companies with profit motives are regularly misleading you about the impacts and harms of this technology.\nLike cars, LLMs can get you where you’re going faster. But by going fast, you might miss out on important joy, learning, or experience.\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome to CSCI 0200: Math Foundations of Computing! In this course, we’ll study how to think about computation using mathematics. Historically, computer science emerged as a subfield of mathematics before “growing up” into its own discipline. Math remains one of the fundamental tools we use to solve advanced problems. You might know to expect mathematical reasoning in core theory courses like Theory of Computation (CSCI 0301) and Algorithms and Complexity (CSCI 0302), but you’ll also draw on mathematical thinking in courses like Artificial Intelligence (CSCI 0311), Programming Languages (CSCI 0313), Machine Learning (CSCI 0451), and Computer Graphics (CSCI 0461).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "syllabus.html#flipped-class",
    "href": "syllabus.html#flipped-class",
    "title": "Syllabus",
    "section": "Flipped Class",
    "text": "Flipped Class\nCSCI 0200 is a flipped classroom. This means that our scheduled class periods will primarily be time for you to actively practice and get feedback. Your first introduction to new material will be through assigned readings, videos, and warmup problems.\n\nOn Mondays and Wednesdays, you will watch videos, complete readings, and do warmup problems before class. In class, we’ll discuss some of your questions from the warmups and work together on practice problems.\nOn most Fridays, you will watch videos, complete readings, and do warmup problems before class. During class, you’ll work in groups on Lab assignments. You’ll complete the Lab assignments outside of class and turn them in.\nOn four Fridays during the semester, you will complete a quiz in which you demonstrate your learning of our Learning Targets."
  },
  {
    "objectID": "syllabus.html#course-activities",
    "href": "syllabus.html#course-activities",
    "title": "Syllabus",
    "section": "Course Activities",
    "text": "Course Activities\nCSCI 0200 is divided into four “modules,” each of which is three weeks long. Here’s the rough schedule that you can expect from a module:\n\n\n\n\ngantt\n    title A CSCI 0200 Module\n    axisFormat %A\n    tickInterval 1day\n    section Week A\n    Prep, warmup            :active, a1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, a2, 2014-01-08, 1d\n    Class         :2014-01-08, 1d\n    Prep, warmup    :active, a1, 2014-01-10, 1d\n    Lab A           :a3, 2014-01-10, 1d\n    section Week B\n    Prep, warmup            :active, a1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, a2, 2014-01-08, 1d\n    Class         :2014-01-08, 1d\n    Prep, warmup    :active, a1, 2014-01-10, 1d\n    Lab B           :a3, 2014-01-10, 1d\n    Lab A due         :done, b3, 2014-01-10, 1d\n    section Week C\n    Prep, warmup            :active, b1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, b2, 2014-01-08, 1d\n    Class            :2014-01-08, 1d\n    Lab B due         :done, b3, 2014-01-10, 1d\n    Quiz              :crit, done, c3,  2014-01-10, 1d\n\n\n\n\n\nMost days, you’ll prepare with videos and readings, and then complete warmup activities. These activities will prepare you for either class (practice, discussion), or lab. We’ll have our quiz roughly every third Friday.\n\nRationale\nThe overall format of CSCI 0200 is designed to help you apply the ideas and skills of the course to progressively higher stages of Bloom’s taxonomy of cognition (Anderson and Krathwohl (2001)).\n\nAnderson, Lorin W, and David R Krathwohl. 2001. A Taxonomy for Learning, Teaching, and Assessing: A Revision of Bloom’s Taxonomy of Educational Objectives: Complete Edition. Addison Wesley Longman, Inc.\n\n\n\nBloom’s taxonomy of cognitive skills. Image credit: University of Florida\n\n\n\n\nBefore Class: Warmups\n\nWarmups are here to help you remember and understand new material. Each day, you’ll prepare for class by watching videos, completing readings, and solving a small number of relatively short warmup problems. You’ll then submit your solutions on Gradescope. You’ll get feedback on your solutions from our graders. Your warmup solutions are expected to show effort but are not graded for correctness.\n\n\n\n\n\n\nWarmups are due by 8:30am on the day of class. Warmups are never accepted late and there are no extensions. However, you can miss up to three five six warmups without any impact on your grade.\n\n\n\n\n\nClass on Mondays and Wednesdays: Questions, Activities, and Discussion\n\nBy the time you’ve completed the warmups and made it to class, I’m expecting that you have already made some effort to remember and understand the new material for that day. During class time on Mondays and Wednesdays, we’ll usually start with some time to discuss questions you might have from the day’s readings, videos, or warmups, to help build your understanding. Then, we’ll usually have time to work on problems in groups, or to further discuss topics. These activities will help you build your abilities to apply the material and use it to  analyze  more complicated problems.\n\n\nQuizzes (Every Third Friday)\n\nOn quizzes, you’ll demonstrate your ability to remember, understand, and apply key ideas and skills. We’ll have four quizzes throughout the semester. On each quiz, there will be one problem related to each of the twelve learning targets that we have introduced in the course so far. We’ll introduce 3 new learning targets in time for each quiz. So, our first quiz will have 3 problems, our second quiz will have 6 problems, our third quiz will have 9 problems, and our last quiz will have 12 problems. You should plan to attempt 2-3 problems on each quiz.\n\n\n\n\n\n\nOur final exam will be similar to the final quiz, including one problem for all 12 learning targets in the course. The only difference is that you’ll have 3 hours instead of 50 minutes.\n\n\n\n\n\nLabs (Every Other Friday)\n\nIn labs, you’ll build your abilities to  analyze , evaluate, and create using the tools and topics from this class. We’ll have lab assignments in 8 weeks (skipping the weeks in which we have quizzes). You’ll start on lab assignments in groups in class on Fridays. You’ll complete the remaining problems and prepare your report, submitting the entire result as a typed PDF.\nLabs are due one week after the day we start them in class.\nYou may continue to work on your report with classmates, but your report should be written by you and reflect your own understanding of the material. A good heuristic: discussion and work at the whiteboard is great to share, but typed solutions or code should not be shared.\nLabs are assessed on a 4-point rubric. After receiving your assessment on your lab report, you may revise and resubmit your report for a higher assessment."
  },
  {
    "objectID": "syllabus.html#warmups",
    "href": "syllabus.html#warmups",
    "title": "Syllabus",
    "section": "Warmups",
    "text": "Warmups\nWarmups are not graded for correctness. The two grades you can receive are “Complete” or “Incomplete/Missing.” A grade of Complete means that you made good effort on the problems and that your attempt demonstrates at least partial understanding of the reading and videos. Most days, 1.5-2 hours of prep time will usually be sufficient for you to complete the readings, videos, and warmups. Yes, I know, this is a lot of prep. On the other hand, the lab reports are your only homework assignments."
  },
  {
    "objectID": "syllabus.html#quizzes",
    "href": "syllabus.html#quizzes",
    "title": "Syllabus",
    "section": "Quizzes",
    "text": "Quizzes\nQuiz problems are assessed as Satisfactory (S) or Not Yet Satisfactory/Incomplete (NS). To earn an S on a quiz problem, you must complete the entire problem correctly, modulo minor errors unrelated to the learning goals of the course (like arithmetic typos).\nThere is no partial credit given on quiz problems. Solutions with minor errors that are otherwise demonstrate learning earn an S, while solutions that demonstrate important misunderstandings (or are not attempted) earn an NS.\nOnce you have earned an S on a quiz problem, you have completed the corresponding Learning Target. You never need to attempt another quiz problem corresponding to that target. So, if you earn an S on an LS2 problem on Quiz 1, you should not try an LS2 problem on Quiz 2. So, even though you are going to have a total of 3 + 6 + 9 + 12 + 12 = 42 problems placed in front of you on quizzes and the final exam, you only need to satisfactorily complete a total of 12 problems on the quizzes and final exam. Actually, just 11 satisfactory problems are sufficient to qualify for an A."
  },
  {
    "objectID": "syllabus.html#labs",
    "href": "syllabus.html#labs",
    "title": "Syllabus",
    "section": "Labs",
    "text": "Labs\nSubmitted lab reports can receive one of four assessments: Here is some more detail on lab grades.\n\nExcellent (E): the lab exhibits complete understanding of the material and meets all technical requirements. This report could serve as an exemplary solution for the assignment.\nMeets Expectations (M): the lab exhibits almost complete understanding of the material and meets most technical requirements. This report suggests that you have room to improve, but you understand the material well enough that the best use of your time is to move on.\nNeeds Revision (R): The lab exhibits some understanding of the material, but there are major issues that should be fixed before moving on.\nNot Completed (N): The lab isn’t really complete enough to demonstrate understanding of the material.\n\n\nRevising Labs\nAfter receiving feedback on your lab report, you may revise it in response to the feedback and resubmit it for a higher assessment. You can do this once for each lab report. The due date for revisions will depend on exactly when our grading time can finalize the first round of assessments, but will usually be about two weeks after you get your first round of feedback."
  },
  {
    "objectID": "syllabus.html#your-final-grade",
    "href": "syllabus.html#your-final-grade",
    "title": "Syllabus",
    "section": "Your Final Grade",
    "text": "Your Final Grade\nYour final grade in the course will be determined by the bundle of Learning Targets and Lab assessments you achieve by the end of the course, according to the following table. To earn the given grade, you need to meet all requirements for both Learning Targets and Labs.\n\n\n\n\n\n\n\n\nTier\nLearning Targets(out of 12)\nLabs (out of 7)\n\n\n\n\nA\nAt least 11\n\nAt most 1 R\nAt least 3 Es\nRemainder Ms\n\n\n\nB\nAt least 8\n\nAt most 1 R\nAt least 2 Es\nRemainder Ms\n\n\n\nC\nAt least 6\n\nAt most 2 Rs\nAt least 5 Ms or Es\n\n\n\nD\nAt least 4\n\nAt most 2 Ns\nAt least 4 Ms or Es"
  },
  {
    "objectID": "syllabus.html#old-version-final-grade",
    "href": "syllabus.html#old-version-final-grade",
    "title": "Syllabus",
    "section": "Old Version: Final Grade",
    "text": "Old Version: Final Grade\nAt the beginning of the semester, we had in place the following scheme for assigning final grades. This table is now out of date and is provided only for historical context.\n\n\n\n\n\n\n\n\nTier\nLearning Targets(out of 12)\nLabs (out of 7)\n\n\n\n\nA\nAt least 11\n\nNo Ns or Rs\nAt least 4 Es\nRemainder Ms\n\n\n\nB\nAt least 8\n\nNo Ns or Rs\nAt least 2 Es\nRemainder Ms\n\n\n\nC\nAt least 6\n\nNo Ns\nAt least 5 Ms or Es\nRemainder Rs\n\n\n\n\nI reserve the right to modify this table, but only in ways that make it easier to achieve each grade tier.\n\nPartial Completion\nWhen you completely meet both requirements for one tier and completely meet one requirement for a higher tier, you earn the “-” version of the next higher tier grade. For example, you may completely meet the requirements of a B on Learning Targets and completely meet the requirements of an A on Labs. In this case, you earn a minus grade for the higher tier: an A-.\n\n\n\n\n\n\nIf you fully meet the requirements for the C tier and meet the requirements of the A tier for either Learning Targets or Labs (but not both), then you are considered to have partially met the requirements of the B tier. In this case, your final grade would be a B-.\n\n\n\n\n\nAssessment of Warmups\nYou can miss at most three five six warmups without penalty. After the first three missing warmups, your grade will lower by 1/3 of a letter grade for every two missing warmups. For example, an A would become an A-, a B+ would become a B, a B- would become a C+, etc.\n\n\nIn more detail, the penalties are:\n\n0-5 missing warmups: -0\n6-7 missing warmups: -1/3\n8-9 missing warmups: -2/3\n10-11 missing warmups: -1\netc."
  },
  {
    "objectID": "syllabus.html#late-work-policies",
    "href": "syllabus.html#late-work-policies",
    "title": "Syllabus",
    "section": "Late Work Policies",
    "text": "Late Work Policies\n\nWarmups\nExtensions are never given on warmups unless under guidance from the DRC. Remember that you can miss up to three five six warmups without any impact on your final grade in the course.\n\n\nLabs\nFor each lab report, you may receive an extension of up to 3 days (72 hours) from the original due date. To do so, you should fill out this modified due date request form. You can count on receiving such an extension without a negotation if you:\n\nRequest the extension at least one day (24 hours) in advance of the original due date.\nWrite short but thoughtful responses to the questions posed in the form.\n\nLabs that are turned in after the due date (or possibly the extended due date) will still be accepted and assessed. However, these late lab reports will count as your second submission, and the assessment you receive on that lab report will be final.\n\n\nQuizzes\nYou can reschedule quizzes under the following circumstances.\n\nYou have an emergency related to your health, mental health, or wellbeing, or the health, mental health, or wellbeing of your loved ones. No documentation is needed – just let me know.\nYou are traveling for a major athletic event. In this case, you must notify me at least two weeks in advance. Please notify me by email and cc your coach. Usually, athletic conflicts will result in you taking the quiz a day or two early."
  },
  {
    "objectID": "syllabus.html#disabilities-and-clearing-barriers",
    "href": "syllabus.html#disabilities-and-clearing-barriers",
    "title": "Syllabus",
    "section": "Disabilities and Clearing Barriers",
    "text": "Disabilities and Clearing Barriers\nFor legal reasons, I am prohibited from offering accommodations to students who do not present letters of accommodation from the DRC. So, get a letter if you need it!\nIf any aspect of this course raises barriers to your full and equitable participation, it is my job to clear those barriers. A common way in which barriers arise is from unintentional failure to design for all students, including students with disabilities. I’ve done my best, but still may have fallen short! If you have a documented disability, please send me your letter of accommodation from the Disability Resource Center as soon as possible. You do not need to describe your disability or justify your accommodations. I will incorporate your accommodations and work to clear learning barriers to the best of my ability.\nIf you believe that you may have a disability, please contact the Disability Resource Center as soon as possible. The DRC works with students confidentially and never discloses disability-related information to faculty without your permission."
  },
  {
    "objectID": "syllabus.html#academic-support",
    "href": "syllabus.html#academic-support",
    "title": "Syllabus",
    "section": "Academic Support",
    "text": "Academic Support\nNo matter who you are, it’s normal to feel challenged by your courses. We have many academic resources to support your success in CSCI 0200. I strongly encourage everyone to make use of all of these resources.\n\nMy Student Hours are time for you to come talk with me about any aspect of the course. We’ll usually hold Student Hours in the big lounge outside Room 224 (the one with the windows).\nExperienced CS students hold Peer Help hours most weekday evenings. These sessions are great times for you to work on Warmup problems (before class) and lab reports. You can also ask general questions about course content and connect with other students.\nOur Assistant in Instruction (ASI) is Smith Gakuya. Smith holds regular Student Hours many days, and is prepared to help you in CSCI 0200. Smith can also help you arrange tutoring for long-term academic support.\nEdStem is our online Q&A forum. It’s the best place to ask questions at irregular hours. It’s a good idea to check EdStem frequently, because your question may already have been answered there!"
  },
  {
    "objectID": "syllabus.html#classroom-environment",
    "href": "syllabus.html#classroom-environment",
    "title": "Syllabus",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nInclusion, access, and participation are collective projects. I expect all students to contribute to a healthy course environment.\nWe embrace diversity of age, background, beliefs, race, ethnicity, gender, gender identity, gender expression, national origin, religious affiliation, sexual orientation, and other apparent and non-apparent axes of identity. Discrimination is not tolerated in CSCI 0200. Discriminatory speech or acts may lead to engagement with the Community Standards Office.\nYou deserve to be addressed in the manner that reflects who you are. I welcome to tell me your pronouns and/or chosen name at any time, either in person or via email. I expect all students to address each other according to their expressed gender markers, and commit to doing the same.\nYou deserve to fully and equitably participate in our learning environment. I commit to ensuring that the materials and assessments in this course are accessible to all students, and I welcome feedback on where I can do better. Middlebury’s Disability Resource Center can help you remove barriers to learning in this and other courses.\nYou deserve a learning environment free from gender-based discrimination, sexual harassment, sexual assault, domestic violence, dating violence, and stalking. If you experience these behaviors or otherwise know of a Title IX violation, you have many options for support and/or reporting. Middlebury’s Civil Rights and Title IX Office (CRTIX) can help you navigate your options. Please be aware that I am a Responsible Employee, which means that I am required by the College to report incidents of sexual harassment or sexual violence to CRTIX. There are resources for emotional and mental health care, advocacy, and academic support listed here, some of which are confidential."
  },
  {
    "objectID": "syllabus.html#masks-are-required",
    "href": "syllabus.html#masks-are-required",
    "title": "Syllabus",
    "section": "Masks Are Required",
    "text": "Masks Are Required\nIn alignment with the policy of the Department of Computer Science, you are required to wear masks during scheduled class periods during the first two weeks unless you have a documented health reason not to wear one. I encourage but do not require you to wear masks during Student Hours and Peer Help sessions.\nDuring the first week of class, I will stock masks that I will offer you in case you forget yours. After the first week of class, you will be responsible for bringing your own masks. If you arrive in class without one, I’ll ask you to leave class and come back once you have obtained a mask."
  },
  {
    "objectID": "syllabus.html#we-can-help-you-borrow-a-laptop",
    "href": "syllabus.html#we-can-help-you-borrow-a-laptop",
    "title": "Syllabus",
    "section": "We Can Help You Borrow a Laptop",
    "text": "We Can Help You Borrow a Laptop\nAn especially important resource for access in many courses in the Department of Computer Science is a functioning laptop. If you ever find yourself temporarily in need of a laptop, we have 10 rotating Windows laptops that we can loan you. To request a laptop for short-term use (like a single class period), email me as soon as possible.\nOn Long-Term Use: College policy has changed recently to include the expectation that every student have a laptop available. The college provides laptops to those who need them where “need” is based on Student Financial Services calculations. If you anticipate needing a laptop for the whole term, we encourage you to inquire with Student Financial Services and the library first due to our smaller pool of equipment. If, however, the College will not be able to meet your needs in a timely fashion, please reach out to us so that we can work out a long-term laptop loan."
  },
  {
    "objectID": "syllabus.html#collaborating-with-integrity",
    "href": "syllabus.html#collaborating-with-integrity",
    "title": "Syllabus",
    "section": "Collaborating with Integrity",
    "text": "Collaborating with Integrity\nCollaboration is welcome in some settings in this course. In all instances of collaboration, you should acknowledge your collaboration partner(s) and describe their contributions as part of your assignment submission.\n\nWarmups: collaboration is discouraged because I think warmups are useful as practice for the quizzes. If you do collaborate on warmups, you should acknowledge your collaboration partner in your submission.\nLabs: collaboration is encouraged (and partially mandatory). You’ll start labs in collaboration groups. You’re free to complete the assignment in your groups, or to complete the assignment on your own. All students should turn in an individual submission that reflects their own understanding and which acknowledges the contributions of their collaboration partners.\nQuizzes: collaboration is prohibited.\nIn-class activities: collaboration is encouraged (and sometimes mandatory).\nGeneral study: collaboration is encouraged!"
  },
  {
    "objectID": "syllabus.html#about-chatgpt",
    "href": "syllabus.html#about-chatgpt",
    "title": "Syllabus",
    "section": "About ChatGPT",
    "text": "About ChatGPT\n\nWhat Is It?\nChatGPT is an example of a large language model (LLM). LLMs aim to produce helpful, human-like text with a combination of two major mechanisms:\n\nLLMs use next-token prediction to predict the next entries in a sequence of text by using the previous entries. This enables them to mimic human-produced text. So, if you saw the sequence “I love Math Foundations of _____”, you might guess that the next word might be “Computing” and that it’s probably not “Pineapples.”\nLLMs are trained using reinforcement learning with human feedback (RLHF) to produce sentences that are not just realistic but also helpful, nonoffensive, or accurate. They do this using a multistage training process that involves humans rating the quality of candidate texts.\n\nChatGPT and similar LLMs are shaping many conversations in education at Middlebury and beyond.\nWhile LLMs may have many benefits, they are also the subject of routine deception by powerful, motivated actors. They are powered by massive quantities of low-paying, traumatizing labor. LLMs and automation more generally are furthering labor instability, contributing to reduced wages, and are concentrating the power of a small number of large tech companies.\n\n\nIn This Class\n\nWork that you submit in this class must demonstrate your learning and understanding. Copy/paste from LLMs like ChatGPT does not do this, and is consequently a violation of academic integrity.\nYou are discouraged from using ChatGPT in any way on warmups. The reason is that warmups help you prepare for the quizzes; if you don’t practice on the warmups, you’ll do worse and get a lower grade.\nQuizzes are in-class assessments on which electronics are prohibited. This implies that ChatGPT is prohibited on quizzes.\nYou are free to consult ChatGPT (or other LLMs) when studying and when completing lab reports. If you do, you must treat ChatGPT as an unverified source. This means:\n\nYou must cite your source.\nYou must describe the contribution of the source to your submitted writeup.\nYou may paraphrase but may not quote ChatGPT.\nYou must describe what steps you have taken to check that your learning involving ChatGPT is indeed correct.\n\nYou are always personally responsible for the accuracy, quality, and integrity of your work."
  },
  {
    "objectID": "syllabus.html#general-advice",
    "href": "syllabus.html#general-advice",
    "title": "Syllabus",
    "section": "General Advice",
    "text": "General Advice\nI am always happy to talk with you about your future plans, including internships, research opportunities, and graduate school applications. Because I am a creature of the academy, I am less knowledgeable about industry jobs, although you are welcome to ask about those too. You can drop in during Student Hours or email me to make an appointment."
  },
  {
    "objectID": "syllabus.html#letters-of-recommendation",
    "href": "syllabus.html#letters-of-recommendation",
    "title": "Syllabus",
    "section": "Letters of Recommendation",
    "text": "Letters of Recommendation\nWriting letters of recommendation for students is a fundamental part of my job and something that I am usually very happy to do. Here’s how to ask me for a letter."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "You will use combinatorial reasoning to derive linear recurrence relations.\nYou will use combinatorial proof to demonstrate identities between numbers with combinatorial interpretations.\n\n\n\n\nSuppose that we have a row of \\(n\\) parking spaces. An urban planner with a mathematical hobby has asked the following question:\n\nIf all cars take up one parking space, and all trucks take up two parkings paces, how many ways are there to fill a row of \\(n\\) parking spaces with cars and trucks?\n\nFor example, here are the 5 ways to fill a row of 4 parking spaces with cars and trucks.\nImage credit: John Hammond\n\nIf we let \\(P_n\\) describe the number of ways to fill \\(n\\) parking spaces with cars and trucks, this illustration shows that \\(P_4 = 5\\).\n\n\n\nDraw pictures to compute the values of \\(P_1\\), \\(P_2\\), and \\(P_3\\).\n\n\n\nMake a guess about the value of \\(P_n\\) for any \\(n\\) in terms of a sequence we’ve seen before in this class.\n\n\n\nLet’s see if we can prove your guess. Consider a row of \\(n \\geq 3\\) parking spaces. The first space can be occupied by either a car or a truck (which then also occupies the second space). In either case, there is some number of ways to fill in the remaining spaces.\n\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a car?\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a truck?\nCombine these two results in order to obtain a recurrence relation for \\(P_n\\). You should choose between the principles of multiplication and addition.\n\n\n\n\nUse a combinatorial proof to prove the following theorem: for all \\(n \\geq 1\\),\n\\[\n\\begin{aligned}\n    P_n^2 + P_{n+1}^2 = P_{2n+2}\\;.\n\\end{aligned}\n\\]\nRemember that in a combinatorial proof, you don’t do much algebra! Instead, you just argue that both sides of the equation are different methods of counting the number of ways to do the same thing. In this case, you should count the number of ways to fill a row of \\(2n+2\\) parking spaces.\nHint: Consider whether or not there is a single truck occupying both of the spaces \\(n+1\\) and \\(n+2\\).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#learning-objectives",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#learning-objectives",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "You will use combinatorial reasoning to derive linear recurrence relations.\nYou will use combinatorial proof to demonstrate identities between numbers with combinatorial interpretations."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#introduction",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#introduction",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "Suppose that we have a row of \\(n\\) parking spaces. An urban planner with a mathematical hobby has asked the following question:\n\nIf all cars take up one parking space, and all trucks take up two parkings paces, how many ways are there to fill a row of \\(n\\) parking spaces with cars and trucks?\n\nFor example, here are the 5 ways to fill a row of 4 parking spaces with cars and trucks.\nImage credit: John Hammond\n\nIf we let \\(P_n\\) describe the number of ways to fill \\(n\\) parking spaces with cars and trucks, this illustration shows that \\(P_4 = 5\\)."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#part-a",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#part-a",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "Draw pictures to compute the values of \\(P_1\\), \\(P_2\\), and \\(P_3\\)."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#part-b",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#part-b",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "Make a guess about the value of \\(P_n\\) for any \\(n\\) in terms of a sequence we’ve seen before in this class."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#part-c",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#part-c",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "Let’s see if we can prove your guess. Consider a row of \\(n \\geq 3\\) parking spaces. The first space can be occupied by either a car or a truck (which then also occupies the second space). In either case, there is some number of ways to fill in the remaining spaces.\n\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a car?\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a truck?\nCombine these two results in order to obtain a recurrence relation for \\(P_n\\). You should choose between the principles of multiplication and addition."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/in-class.html#part-d",
    "href": "content/modules/51-recursion-recurrence-2/in-class.html#part-d",
    "title": "In Class: Combinatorial Arguments and Recurrence Relations",
    "section": "",
    "text": "Use a combinatorial proof to prove the following theorem: for all \\(n \\geq 1\\),\n\\[\n\\begin{aligned}\n    P_n^2 + P_{n+1}^2 = P_{2n+2}\\;.\n\\end{aligned}\n\\]\nRemember that in a combinatorial proof, you don’t do much algebra! Instead, you just argue that both sides of the equation are different methods of counting the number of ways to do the same thing. In this case, you should count the number of ways to fill a row of \\(2n+2\\) parking spaces.\nHint: Consider whether or not there is a single truck occupying both of the spaces \\(n+1\\) and \\(n+2\\)."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/prep.html",
    "href": "content/modules/51-recursion-recurrence-2/prep.html",
    "title": "Linear Recurrence Relations and the Fibonacci Numbers",
    "section": "",
    "text": "Review:\n\nThe Fibonacci Sequence (6:22)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/prep.html#problem-1",
    "href": "content/modules/51-recursion-recurrence-2/prep.html#problem-1",
    "title": "Linear Recurrence Relations and the Fibonacci Numbers",
    "section": "Problem 1",
    "text": "Problem 1\nUse the characteristic root technique to find a closed-formula for the Fibonacci numbers. Your formula should look like:\n\\[\n\\begin{aligned}\n    F_n = ar_1^n + br_2^n\n\\end{aligned}\n\\]\nfor some numbers \\(a, b, r_1, r_2 \\in \\mathbb{R}\\) that you determine.\nHint: A complete solution involves both using the quadratic formula and solving a \\(2 \\times 2\\) system of linear equations.\nNote: This is a famous result with an easily-researched answer. So, the important part is showing your work and making sure you are familiar with tools like the quadratic formula."
  },
  {
    "objectID": "content/modules/51-recursion-recurrence-2/prep.html#problem-2",
    "href": "content/modules/51-recursion-recurrence-2/prep.html#problem-2",
    "title": "Linear Recurrence Relations and the Fibonacci Numbers",
    "section": "Problem 2",
    "text": "Problem 2\nUse the recursive definition of the Fibonacci numbers to write an inductive proof that, for any \\(n \\in \\mathbb{Z}\\) with \\(n \\geq 1\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 1}^n F_i = F_{n+2} - 1\\;.\n\\end{aligned}\n\\]\nNote: Don’t forget to include both a base case and an inductive step!"
  },
  {
    "objectID": "content/modules/82-probability-3/in-class.html",
    "href": "content/modules/82-probability-3/in-class.html",
    "title": "In Class: Bayes’ Rule and DNA Testing",
    "section": "",
    "text": "Forensic DNA evidence has become an important tool in criminal trials, used frequently by both prosecution and defense. Although DNA is unique to each individual, damage to samples as well as human error mean that DNA testing can still generate false matches with individuals entirely unrelated to the situation at hand.\nSuppose that a DNA test has a 0.1% false positive rate. This means that, in a population of 1,000 people who did not contribute that DNA sample, testing will still erroneously match one of them (on average).  We’ll assume that DNA testing has a true positive rate of 100%: if a sample was contributed by an individual, DNA testing will always name that individual as one of the possible people who could have contributed that sample.This number, like every other element of this problem, is intended to be somewhat realistic but is fiction.\nDuring late spring, an unexpected wildfire breaks out in central Vermont. After several days, investigators visit the site of the fire and find a DNA sample, dated to around the time the wildfire started. Testing matches the sample to a person who was known to be visiting the central Vermont region during the time the fires started. The case is brought to court, with the prosecution claiming that the visitor started the fire.\n\n\n\nLet \\(A\\) be the event that the sample matches the suspect under DNA testing. Let \\(B\\) be the event that DNA sample truly belongs to the suspect.\nCompute the probabilities \\(p(A|B)\\) and \\(p(A|\\bar{B})\\) given the information about the reliability of DNA testing supplied above.\n\n\n\nThe prosecution argues that, since the false-positive rate of DNA testing is 1/1,000 = 0.1%, the probability \\(p(B|A)\\) that the DNA sample truly belongs to the suspect is 99.9%.\nWhat is wrong with the prosecution’s argument?\n\n\n\nA statistical expert for the defense testifies that 1,000 people visited the site of the wildfire during the time-window in question, any of whom could have left a DNA sample.\nUse Bayes’ rule to compute an estimate of the probability that the suspect did indeed contribute the DNA sample, given that DNA testing produced a match to the suspect.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/82-probability-3/in-class.html#introduction",
    "href": "content/modules/82-probability-3/in-class.html#introduction",
    "title": "In Class: Bayes’ Rule and DNA Testing",
    "section": "",
    "text": "Forensic DNA evidence has become an important tool in criminal trials, used frequently by both prosecution and defense. Although DNA is unique to each individual, damage to samples as well as human error mean that DNA testing can still generate false matches with individuals entirely unrelated to the situation at hand.\nSuppose that a DNA test has a 0.1% false positive rate. This means that, in a population of 1,000 people who did not contribute that DNA sample, testing will still erroneously match one of them (on average).  We’ll assume that DNA testing has a true positive rate of 100%: if a sample was contributed by an individual, DNA testing will always name that individual as one of the possible people who could have contributed that sample.This number, like every other element of this problem, is intended to be somewhat realistic but is fiction.\nDuring late spring, an unexpected wildfire breaks out in central Vermont. After several days, investigators visit the site of the fire and find a DNA sample, dated to around the time the wildfire started. Testing matches the sample to a person who was known to be visiting the central Vermont region during the time the fires started. The case is brought to court, with the prosecution claiming that the visitor started the fire."
  },
  {
    "objectID": "content/modules/82-probability-3/in-class.html#part-a",
    "href": "content/modules/82-probability-3/in-class.html#part-a",
    "title": "In Class: Bayes’ Rule and DNA Testing",
    "section": "",
    "text": "Let \\(A\\) be the event that the sample matches the suspect under DNA testing. Let \\(B\\) be the event that DNA sample truly belongs to the suspect.\nCompute the probabilities \\(p(A|B)\\) and \\(p(A|\\bar{B})\\) given the information about the reliability of DNA testing supplied above."
  },
  {
    "objectID": "content/modules/82-probability-3/in-class.html#part-b",
    "href": "content/modules/82-probability-3/in-class.html#part-b",
    "title": "In Class: Bayes’ Rule and DNA Testing",
    "section": "",
    "text": "The prosecution argues that, since the false-positive rate of DNA testing is 1/1,000 = 0.1%, the probability \\(p(B|A)\\) that the DNA sample truly belongs to the suspect is 99.9%.\nWhat is wrong with the prosecution’s argument?"
  },
  {
    "objectID": "content/modules/82-probability-3/in-class.html#part-c",
    "href": "content/modules/82-probability-3/in-class.html#part-c",
    "title": "In Class: Bayes’ Rule and DNA Testing",
    "section": "",
    "text": "A statistical expert for the defense testifies that 1,000 people visited the site of the wildfire during the time-window in question, any of whom could have left a DNA sample.\nUse Bayes’ rule to compute an estimate of the probability that the suspect did indeed contribute the DNA sample, given that DNA testing produced a match to the suspect."
  },
  {
    "objectID": "content/modules/82-probability-3/prep.html",
    "href": "content/modules/82-probability-3/prep.html",
    "title": "Conditional Probability and Bayes’ Theorem",
    "section": "",
    "text": "Conditional Probability With Tables | Chance of an Orange M&M??? (9:37)\nBayes’ Theorem - The Simplest Case (5:31)\nBayes’ Theorem Example: Surprising False Positives (12:36)\nBayes’ Theorem - Example: A disjoint union (8:32)\n\n\n\n\nBayes theorem, the geometry of changing beliefs by 3blue1brown (15:10)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/82-probability-3/prep.html#optional",
    "href": "content/modules/82-probability-3/prep.html#optional",
    "title": "Conditional Probability and Bayes’ Theorem",
    "section": "",
    "text": "Bayes theorem, the geometry of changing beliefs by 3blue1brown (15:10)"
  },
  {
    "objectID": "content/modules/82-probability-3/prep.html#problem-1",
    "href": "content/modules/82-probability-3/prep.html#problem-1",
    "title": "Conditional Probability and Bayes’ Theorem",
    "section": "Problem 1",
    "text": "Problem 1\nYour friend has two coins. One of them (coin \\(A\\)) has probability of heads equal to \\(\\frac{1}{2}\\), while the other one (coin \\(B\\)) has probability of heads equal to \\(\\frac{3}{4}\\). Your friend picks one of the two coins with probability \\(\\frac{1}{2}\\), and then flips it 5 (independent) times. Find the probability that your friend chose coin \\(A\\), given the results, where the results are:\n\n\\(HHHHH\\)\n\\(HTTTH\\)\n\\(HHTTH\\)"
  },
  {
    "objectID": "content/modules/82-probability-3/prep.html#problem-2",
    "href": "content/modules/82-probability-3/prep.html#problem-2",
    "title": "Conditional Probability and Bayes’ Theorem",
    "section": "Problem 2",
    "text": "Problem 2\nPreventing, experiencing, and managing COVID-19 is, regrettably, now a part of our everyday lives. One of the most important ways we can manage COVID-19 is by testing on a regular basis.\nPlease be aware that all numbers in this problem are made up unless I specifically cite them. This problem does not constitute medical or preventative care advice.\n\nPart A\nSuppose that 5% of the population has the common cold, 3% have COVID-19. You can interpret this as the probability that a randomly selected person has a 5% chance of having the common cold and a 3% chance of having COVID-19.\nAssume that the short-term symptoms of these two illnesses are identical, that they have equal rates of transmission, that everyone who has either illness always has the sniffles, that it is impossible to have COVID and the common cold at the same time, and that there are no other illnesses that give you the sniffles.\nYou wake up one morning and you have the sniffles. What is the probability that you have COVID-19, given that you have the sniffles?\n\n\nPart B\nMany of us use rapid antigen tests to assess whether or not we have COVID-19. The false positive rate of a rapid antigen test is the probability that the antigen test returns a positive result given that you do NOT have COVID-19. So, if \\(+\\) is the event that the test returns a positive result and \\(C\\) is the event that you have COVID-19, the false positive rate is \\(p(+|\\bar{C})\\). The false negative rate of a rapid antigen test is \\(p(-|C)\\), the event that the test incorrectly returns a negative result when you do in fact have COVID-19. The true positive rate is \\(p(+|C)\\) and the true negative rate is \\(p(-|\\bar{C})\\).\nPopular rapid antigen tests have a true positive rate for symptomatic individuals of approximately 73% and a true negative rate of approximately 99.6%.1 The false positive rate is approximately 0.4% and the false negative rate is approximately 27%.\n1 https://www.cochrane.org/CD013705/INFECTN_how-accurate-are-rapid-antigen-tests-diagnosing-covid-19Suppose that you wake up one morning with the sniffles. Because you are very responsible, you take a rapid antigen test.\n\nThe test comes up negative. What is the probability that you have COVID-19, given that you have a negative test and the sniffles? This is \\(p(C|-\\cap S)\\). Hints:\n\nThe way to approach this is to use Bayes’ rule to write \\(p(C|-\\cap S) = \\frac{p(-\\cap S | C)p(C)}{p(-\\cap S|C)p(C) + p(-\\cap S| \\bar{C})p(\\bar{C})}.\\) Then, compute each of the terms appearing in this fraction. Because you always have the sniffles when you have COVID-19, \\(p(-\\cap S|C) = p(-|C)\\).\nYou also need to calculate \\(p(-\\cap S|\\bar{C})p(\\bar{C})\\). You may assume that \\(p(-\\cap S|\\bar{C}) = p(-|\\bar{C})p(S|\\bar{C})\\). This is called conditional independence, an important topic which we sadly won’t hvae time to discuss.\n\nThe test comes up positive. What is the probability that you have COVID-19, given that you have a positive test and the sniffles?\n\nThis problem is very similar to the previous one. You may assume that \\(p(+\\cap S|\\bar{C}) = p(+|\\bar{C})p(S|\\bar{C})\\)."
  },
  {
    "objectID": "content/modules/61-complexity/prep.html",
    "href": "content/modules/61-complexity/prep.html",
    "title": "Introducing Analysis of Algorithms",
    "section": "",
    "text": "No videos for today’s class.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/61-complexity/prep.html#problem-1",
    "href": "content/modules/61-complexity/prep.html#problem-1",
    "title": "Introducing Analysis of Algorithms",
    "section": "Problem 1",
    "text": "Problem 1\nSuppose that \\(f(n) = 2f(n/2) + 3\\) whenever \\(n\\) is an even positive integer, and that \\(f(1) = 5\\).\nFind \\(f(2)\\), \\(f(8)\\), \\(f(64)\\), and \\(f(1,024)\\). Please do at least \\(f(2)\\) and \\(f(8)\\) by hand. You can either code a function to compute \\(f(64)\\) and \\(f(1,024)\\) or do those by hand as well."
  },
  {
    "objectID": "content/modules/61-complexity/prep.html#problem-2",
    "href": "content/modules/61-complexity/prep.html#problem-2",
    "title": "Introducing Analysis of Algorithms",
    "section": "Problem 2",
    "text": "Problem 2\nConsider the following algorithm called trisection search. Trisection search is an algorithm that, given a sorted list \\(L\\) of integers, determines whether or not a given integer \\(x\\) is an element of \\(L\\). For convenience, let’s assume that the length of \\(L\\) is \\(3^p\\) for some integer \\(p\\).For example, our algorithm should return \\(\\mathrm{True}\\) for \\(x = 5\\) and \\(L = [0, 2, 3, 5, 7, 8]\\) but \\(\\mathrm{False}\\) if instead \\(x = 4\\). You may know of bisection or binary search, which solves the same problem.\nHere’s the algorithm:\nAlgorithm \\(\\mathrm{TrisectionSearch}(x, L)\\):\n\nIf \\(L\\) has length 1, then return \\(\\mathrm{True}\\) if the single element of \\(L\\) is equal to \\(x\\), and return \\(\\mathrm{False}\\) otherwise.\nDivide \\(L\\) into 3 equal pieces, called \\(L_1\\), \\(L_2\\), and \\(L_3\\). Let the final elements of each of these lists be \\(\\ell_1\\), \\(\\ell_2\\), and \\(\\ell_3\\) respectively.\n\nIf \\(x \\leq \\ell_1\\), return \\(\\mathrm{TrisectionSearch}(x, L_1)\\).\nElse, if \\(\\ell_1 &lt; x \\leq \\ell_2\\), then return \\(\\mathrm{TrisectionSearch}(x, L_2)\\).\nElse, if \\(\\ell_2 &lt; x\\), then return \\(\\mathrm{TrisectionSearch}(x, L_3)\\).\n\n\n\nPart A\nGive a big-\\(O\\) estimate for the number of comparisons between integers used by trisection search on a list of length \\(n = 3^p\\). To do so, use the following steps:\n\nWrite down and justify a recurrence relation describing the number of comparisons required (Example 1 from the reading will be helpful).\nApply a theorem from the reading to obtain a big-\\(O\\) estimate.\n\n\n\nPart B\nFor each\nRespond with a “true” or a “false” and a quick explanation to each of the following two statements:\n\nTrisection search requires exactly as many comparisons between integers as binary search.\nTrisection search requires no more than 10% more comparisons than binary search.\nIf \\(n\\) increased by a factor of 10, then the number of comparisons required by binary and trisection search would both increase by a similar (but not exactly the same) factor.\n\n\n\n(Optional): Part C\nDefine a modified version of the algorithm above that splits a sorted list into \\(k\\) equal-sized pieces in each recursive step. Give a big-\\(O\\) estimate for the runtime on a list of length \\(n = k^p\\)."
  },
  {
    "objectID": "content/modules/21-indirect-proofs/prep.html",
    "href": "content/modules/21-indirect-proofs/prep.html",
    "title": "Cases, Contradictions, and Counterexamples",
    "section": "",
    "text": "Proof by Division into Cases (5:40)\nProof by Contradiction (8:59)\nDisproving Implications with Counterexamples (8:18)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/21-indirect-proofs/prep.html#videos-30-minutes",
    "href": "content/modules/21-indirect-proofs/prep.html#videos-30-minutes",
    "title": "Cases, Contradictions, and Counterexamples",
    "section": "",
    "text": "Proof by Division into Cases (5:40)\nProof by Contradiction (8:59)\nDisproving Implications with Counterexamples (8:18)"
  },
  {
    "objectID": "content/modules/21-indirect-proofs/prep.html#reading-30-minutes",
    "href": "content/modules/21-indirect-proofs/prep.html#reading-30-minutes",
    "title": "Cases, Contradictions, and Counterexamples",
    "section": "Reading (~30 minutes)",
    "text": "Reading (~30 minutes)\n\nDMOI Chapter 3.2, to the end (new stuff starts at “Proof by Contradiction”)"
  },
  {
    "objectID": "content/modules/21-indirect-proofs/prep.html#warmup-40-minutes",
    "href": "content/modules/21-indirect-proofs/prep.html#warmup-40-minutes",
    "title": "Cases, Contradictions, and Counterexamples",
    "section": "Warmup (~40 minutes)",
    "text": "Warmup (~40 minutes)\n\nProblem 1\nGive a counterexample to each of the following claims. Describe in a sentence or two why your counterexample shows that the claim is false.\nNote: If the claim refers to multiple numbers like \\(x\\) and \\(y\\), a complete counterexample includes values for both \\(x\\) and \\(y\\).\n\n\\(\\forall x,y \\in \\mathbb{Z} \\;:\\; x^2 &lt; y^2 \\rightarrow x &lt; y\\).\n\nRecall that \\(\\forall x,y\\in \\mathbb{Z}\\) is a notation shortcut for \\(\\forall x \\in \\mathbb{Z}, \\forall y \\in \\mathbb{Z}\\).\n\n\\(\\lnot \\exists x \\in \\mathbb{Z}\\;:\\; x | 51\\)\n\nRecall that \\(a|b\\) means that \\(a\\) is a divisor of \\(b\\) with remainder \\(0\\).\n\n\\(\\forall x, y \\in \\mathbb{Z} \\;:\\; x^2 + y^2 \\text{ is an even number}\\).\n\n\n\nProblem 2\nProve that \\(\\sqrt{6}\\) is not a rational number; i.e. there are no integers \\(a,b \\in \\mathbb{Z}\\) such that \\(\\sqrt{6} = \\frac{a}{b}\\).\nNotes:\n\nA fraction \\(\\frac{a}{b}\\) is in lowest terms if there is no integer \\(k\\) that divides both \\(a\\) and \\(b\\).\nIt is traditional in math classes that you can use anything you have previously proven. You might find a problem from the last warmup to be helpful.\nIt is also traditional that you may “use without proof” facts that the instructor tells you are acceptable to use without proof. In this case, you may use without proof the fact that, for any integer \\(n\\), it is the case that \\(n^2\\) is even if and only if \\(n\\) is even.\n\n\n\nProblem 3\nProve that if \\(n\\) is an integer, then \\(3n^2 + n + 4\\) is even.\nHint: Divide into cases based on whether \\(n\\) is odd or even."
  },
  {
    "objectID": "content/modules/12-sets/in-class.html#section",
    "href": "content/modules/12-sets/in-class.html#section",
    "title": "In Class: Sets",
    "section": "",
    "text": "Inverse, Converse, Contrapositive\nLet \\(A\\) and \\(B\\) be sets. Define the following two propositions:\n\n\\(p\\): \\(a \\in A\\).\n\\(q\\): \\(a \\in A \\cap B\\).\n\nConsider the logical expression \\(p \\rightarrow q\\). We have the:\n\nInverse: \\(\\lnot p \\rightarrow \\lnot q\\).\nConverse: \\(q \\rightarrow p\\).\nContrapositive: \\(\\lnot q \\rightarrow \\lnot p\\).\n\n\n\n \nWrite each of these out, replacing \\(p\\) and \\(q\\) with their definitions in terms of set memberships.\n\nDetermine which of the original, inverse, converse, and contrapositive statements are true using Venn diagrams\nDetermine which of these statements are true using what we know about logical equivalences for inverse, converse, and contrapositive. You’ll still need to know the truth value of the first statement – you can do that one with Venn diagrams."
  },
  {
    "objectID": "content/modules/12-sets/in-class.html#section-1",
    "href": "content/modules/12-sets/in-class.html#section-1",
    "title": "In Class: Sets",
    "section": "",
    "text": "Recall that \\(\\mathbb{Z} = \\{\\ldots,-2, -1, 0, 1, 2 \\ldots\\}\\) (the integers). Let \\(\\mathbb{Z}^{+} = \\{1, 2, 3 \\ldots\\}\\) be the set of positive integers. Let \\(2\\mathbb{Z}\\) be the set of even integers, \\(3\\mathbb{Z}\\) the set of integers that are multiples of 3, and so on.\n\nIs \\(\\mathbb{Z}^+ \\subseteq \\mathbb{Z}\\)? Why or why not?\nIs \\(2\\mathbb{Z} \\subseteq \\mathbb{Z}^+\\)? Why or why not?\nFind \\(2\\mathbb{Z} \\cap 3\\mathbb{Z}\\). Describe this set in words, using set notation, and using the notation defined in this problem. \n\nDMOI 0.3.13"
  },
  {
    "objectID": "content/modules/12-sets/in-class.html#section-2",
    "href": "content/modules/12-sets/in-class.html#section-2",
    "title": "In Class: Sets",
    "section": "",
    "text": "Recall that \\(\\mathbb{Z} = \\{\\ldots,-2, -1, 0, 1, 2 \\ldots\\}\\) (the integers). Let \\(\\mathbb{Z}^{+} = \\{1, 2, 3 \\ldots\\}\\) be the set of positive integers. Let \\(2\\mathbb{Z}\\) be the set of even integers, \\(3\\mathbb{Z}\\) the set of integers that are multiples of 3, and so on.\n\nDescribe the set \\(\\{1, 4, 7, 10, \\ldots\\}\\) in set-builder notation. Do this two ways: once using the notation \\(k\\mathbb{Z}\\) defined above, and once by not using this notation.\nRecall that, for integers \\(x\\), \\(y\\), and $zY, \\(x \\equiv y \\pmod z\\) if \\(x\\) and \\(y\\) have the same integer remainder when divided by \\(z\\). Describe the set \\(\\{x \\in \\mathbb{Z} : x \\equiv 3 \\pmod 4\\}\\) in set-builder notation without using the \\(\\pmod{}\\) operator."
  },
  {
    "objectID": "content/modules/12-sets/prep.html",
    "href": "content/modules/12-sets/prep.html",
    "title": "Sets and Set Operations",
    "section": "",
    "text": "Intro to Sets (7:12)\nSet Roster vs. Set Builder Notation (5:15)\nThe Empty Set (4:07)\nCartesian Product (7:10)\nUnion of Two Sets (5:07)\nIntersection of Two Sets (5:47)\nProving Subset Relationships with the Element Method (6:35)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/12-sets/prep.html#optional-reading",
    "href": "content/modules/12-sets/prep.html#optional-reading",
    "title": "Sets and Set Operations",
    "section": "Optional Reading",
    "text": "Optional Reading\nThis is a slightly more advanced reading that may appeal to you if you want to see more theoretical math examples.\n\nBOP 1.1, 1.4-1.7"
  },
  {
    "objectID": "content/modules/12-sets/prep.html#problem-1",
    "href": "content/modules/12-sets/prep.html#problem-1",
    "title": "Sets and Set Operations",
    "section": "Problem 1",
    "text": "Problem 1\nWrite the following sets by listing their elements between braces:\n\n\\(\\left\\{ x \\in \\mathbb{Z} \\; : x^2 \\leq 10 \\right\\}\\)\n\\(\\left\\{ x \\in \\mathbb{N} \\; : x \\leq 10 \\right\\} \\cap \\left\\{ x \\in \\mathbb{Z} \\; : x \\text{ is a prime number.} \\right\\}\\)\n\\(\\left\\{ x \\in \\mathbb{Z} \\; : x/2 \\geq 10 \\right\\} \\cap \\left\\{ x \\in \\mathbb{Z} \\; : 5x &lt; 100 \\right\\}\\)"
  },
  {
    "objectID": "content/modules/12-sets/prep.html#problem-2",
    "href": "content/modules/12-sets/prep.html#problem-2",
    "title": "Sets and Set Operations",
    "section": "Problem 2",
    "text": "Problem 2\nWrite each of the following sets in set-builder notation. There may be several correct ways.\n\n\n\\(\\left\\{ 2, 4, 8, 16, 32, 64,\\ldots \\right\\}\\) \n\\(\\left\\{ 3, 4, 5, 6, 7, 8 \\right\\}\\)\n\\(\\left\\{ 0, 3, 6, 9, 12, 15 \\right\\}\\)"
  },
  {
    "objectID": "content/modules/12-sets/prep.html#problem-3",
    "href": "content/modules/12-sets/prep.html#problem-3",
    "title": "Sets and Set Operations",
    "section": "Problem 3",
    "text": "Problem 3\nLet \\(A = \\{x \\in \\mathbb{Z} \\;:\\; x = 4y+1 \\text{ for some } y \\in \\mathbb{Z}\\}\\) and let \\(B = \\{x \\in \\mathbb{Z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{Z}\\}\\).\n\nPart A\nWrite out at least three distinct elements of \\(A\\) and three distinct elements of \\(B\\).\n\n\nPart B\nIs \\(7 \\in A\\)? Is \\(7 \\in B\\)?\n\n\nPart C\nUse the element method to write a proof that \\(A \\subseteq B\\).\n\n\nPart D\nWould your proof still work if we instead defined \\(B = \\{x \\in \\mathbb{z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{N}\\}\\)? Briefly explain why or why not."
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html",
    "href": "content/modules/20-direct-proofs/prep.html",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "",
    "text": "Formal Definitions in Math (3:23)\nHow to Prove Math Theorems (8:34)\nStep-By-Step Guide to Proofs (18:41)\nProof by Contrapositive (3:38)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html#videos-40-minutes",
    "href": "content/modules/20-direct-proofs/prep.html#videos-40-minutes",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "",
    "text": "Formal Definitions in Math (3:23)\nHow to Prove Math Theorems (8:34)\nStep-By-Step Guide to Proofs (18:41)\nProof by Contrapositive (3:38)"
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html#reading-30-minutes",
    "href": "content/modules/20-direct-proofs/prep.html#reading-30-minutes",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "Reading (~30 minutes)",
    "text": "Reading (~30 minutes)\n\nDMOI Chapter 3.2 through Example 3.2.6.\nDirect Proofs by Katy Dobson and Alan Slomson at the University of Leeds"
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html#warmup-40-minutes",
    "href": "content/modules/20-direct-proofs/prep.html#warmup-40-minutes",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "Warmup (~40 minutes)",
    "text": "Warmup (~40 minutes)"
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html#problem-1",
    "href": "content/modules/20-direct-proofs/prep.html#problem-1",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "Problem 1",
    "text": "Problem 1\nThese are the problems at the end of Dobson + Slomson in the reading\nHint: The video Proving that Divisibility is Transitive (11:08) is not required for today but you might find it very helpful with one of the warmup problems.\n\nFor each of the following four statements:\n\nFirst, represent the statement using logical symbols, including quantifiers. Define any predicates you need.\n\nFor example, a symbolic representation of the first statement would be \\(\\forall m \\in \\mathbb{Z}: E(m) \\rightarrow E(7m+4)\\), where \\(E(x)\\) is the predicate “\\(x\\) is even.”\n\nThen, write a careful proof of the statement, justifying each of your steps. You do not need to use logical symbols in your proofs.\n\n\nIf \\(m\\) is an even integer then \\(7m+4\\) is an even integer.\nIf \\(m\\) is an even integer and \\(n\\) is an odd integer then \\(m+n\\) is an odd integer.\nIf \\(m\\) is an even integer and \\(n\\) is an odd integer then \\(mn\\) is an even integer.\nIf \\(a\\), \\(b\\), and \\(c\\) are integers such that \\(a\\) divides \\(b\\) and \\(b\\) divides \\(c\\), then \\(a\\) divides \\(c\\).\n\nNotation note: For some of these statements, you may find yourself needing to write things like \\(\\forall x \\in \\mathbb{Z}, \\forall y \\in \\mathbb{Z}\\). A common notational shortcut is to write \\(\\forall x, y \\in \\mathbb{Z}\\) to mean the same thing while saving some space."
  },
  {
    "objectID": "content/modules/20-direct-proofs/prep.html#problem-2",
    "href": "content/modules/20-direct-proofs/prep.html#problem-2",
    "title": "Direct Proofs and Proof by Contrapositive",
    "section": "Problem 2",
    "text": "Problem 2\n\nProve that for all integers \\(n\\), it is the case that \\(n\\) is even if and only if \\(3n\\) is even. This proof has two parts: you must show that \\(n\\) being even implies that \\(3n\\) is even; then you must show that \\(3n\\) being even implies that \\(n\\) is even.\nIn your proof, please one of the two directions using direct proof. Then, prove the other direction using proof by contrapositive."
  },
  {
    "objectID": "content/modules/23-induction/in-class.html",
    "href": "content/modules/23-induction/in-class.html",
    "title": "",
    "section": "",
    "text": "All horses are the same color.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/23-induction/prep.html",
    "href": "content/modules/23-induction/prep.html",
    "title": "Introduction to Induction",
    "section": "",
    "text": "Introduction to sequences (6:13)\nThe sum and product of finite sequences (9:20)\nIntro to Mathematical Induction (12:15)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/23-induction/prep.html#videos-40-mins",
    "href": "content/modules/23-induction/prep.html#videos-40-mins",
    "title": "Introduction to Induction",
    "section": "",
    "text": "Introduction to sequences (6:13)\nThe sum and product of finite sequences (9:20)\nIntro to Mathematical Induction (12:15)"
  },
  {
    "objectID": "content/modules/23-induction/prep.html#readings-30-mins",
    "href": "content/modules/23-induction/prep.html#readings-30-mins",
    "title": "Introduction to Induction",
    "section": "Readings (~30 mins)",
    "text": "Readings (~30 mins)\n\nDMOI Chapter 2.5, up until (and not including) “Strong Induction.”"
  },
  {
    "objectID": "content/modules/23-induction/prep.html#warmup-40-mins",
    "href": "content/modules/23-induction/prep.html#warmup-40-mins",
    "title": "Introduction to Induction",
    "section": "Warmup (~40 mins)",
    "text": "Warmup (~40 mins)\n\nProblem 1"
  },
  {
    "objectID": "content/modules/23-induction/prep.html#part-a",
    "href": "content/modules/23-induction/prep.html#part-a",
    "title": "Introduction to Induction",
    "section": "Part A",
    "text": "Part A\nHere are three attempted statements of a theorem which was provided in the video (it is also Example 2.5.1 in DMOI). None of these statements are correct. For each one, explain which piece is incorrect, why it matters, and how to fix it.\n“Theorem 1”: For all integers \\(n \\in \\mathbb{Z}\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n+1)}{2}\\;.\n\\]\n“Theorem 2”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{i(i+1)}{2}\\;.\n\\]\n“Theorem 3”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n-1)}{2}\\;.\n\\]"
  },
  {
    "objectID": "content/modules/23-induction/prep.html#part-b",
    "href": "content/modules/23-induction/prep.html#part-b",
    "title": "Introduction to Induction",
    "section": "Part B",
    "text": "Part B\nHere are three attempted inductive proofs of the correct theorem. None of them are correct. For each one, explain what’s wrong.\n“Proof 1:” Suppose that \\(n = 1\\). Then,\n\\[\n\\begin{aligned}\n\\sum_{i = 0}^n i &= \\sum_{i = 1}^n i \\\\\n                 &= 1 \\\\\n                 &= \\frac{1(1+1)}{2}\\;,\n\\end{aligned}\n\\]\nas was to be shown. This completes the proof.\n“Proof 2:” Suppose that the theorem holds for some \\(n = k\\). We’ll show that this implies that it also holds for \\(n = k+1\\). We can calculate\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^{k+1} i &= \\sum_{i = 0}^k i + (k+1) &\\text{(manipulating sum)} \\\\\n                         &= \\frac{k(k+1)}{2} + (k+1) &\\text{(inductive hypothesis)} \\\\\n                         &= \\frac{(k+1)(k+2)}{2}  &\\text{(algebra)} \\\\\n                         &= \\frac{(k+1)((k+1) + 1)}{2}  &\\text{(algebra)}\\;.\n\\end{aligned}\n\\]\nThis shows that the statement is true for \\(n = k+1\\), which completes the proof.\n“Proof 3:” First, we’ll do the base case. Suppose that \\(n = 1\\). Then,\n\\[\n\\begin{aligned}\n\\sum_{i = 0}^n i &= \\sum_{i = 1}^n i \\\\\n                 &= 1 \\\\\n                 &= \\frac{1(1+1)}{2}\\;.  \n\\end{aligned}\n\\]\nSo, the statement is true for \\(n = 1\\), completing the base case. Now we’ll do the inductive step. Suppose that the statement is true for \\(n = k+1\\). We’ll show that it’s also true for \\(n = k\\). We can calculate\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^{k+1} i &= \\frac{(k+1)(k+2)}{2} &\\text{(inductive hypothesis)} \\\\\n                         &= \\frac{k(k+1)}{2} + \\frac{2(k+1)}{2} &\\text{(algebra)}\\;.\n\\end{aligned}\n\\]\nSince what’s left includes the formula for the case \\(n = k\\), this completes the inductive step.\n\nProblem 2\n\nUse mathematical induction to prove that, for any integer \\(n &gt;= 1\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^n 2^i = 2^{n+1} - 1\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html",
    "href": "content/modules/50-recursion-recurrence/in-class.html",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "You will formulate a simple recursive algorithm to solve a puzzle.\nYou will use recurrence relations and proof by induction to describe the runtime of your algorithm.\n\n\n\n\nIn the classic puzzle of the Tower of Hanoi, you start with a stack of disks on one of three pegs. The disks are stacked by size: largest at the bottom, smallest at the top:\n\nThe challenge is to move the complete stack from one peg to another, subject to the following rules:\n\nYou can move one disk at a time from one peg to another. You can choose which peg to move to. For example, in the initial configuration, the topmost disk can move to the second peg or the third.\nA larger disk can never be on top of a smaller disk.\n\n\n\n\nOn a device of your choosing, navigate to this website on which you can play the Tower of Hanoi. Then, play with two, three, and four disks.\n\n\n\nDescribe an algorithm for solving the Tower of Hanoi with \\(n = 1\\) disk. Don’t overthink it!\n\n\n\nImagine now that you had an algorithm for solving the Tower of Hanoi with \\(n = k\\) disks. How could you use this algorithm to solve the Tower of Hanoi with \\(n = k+1\\) disks?\nHint: first move the top \\(k\\) disks to another peg using your algorithm.\n\n\n\nLet \\(t_n\\) be the minimum number of moves necessary to solve the Tower of Hanoi problem with \\(n\\) disks. The sequence \\(t_n\\) satisfies a recurrence relation of the form\n\\[\nt_{n+1} = at_n + b\n\\]\nwith initial condition \\(t_1 = c\\) for some \\(a, b, c \\in \\mathbb{Z}\\).\nUsing your response from Parts B and C, fill in the values of \\(a\\), \\(b\\), and \\(c\\).\n\n\n\nCompute \\(t_2\\), \\(t_3\\), \\(t_4\\), and \\(t_5\\) by hand.\n\n\n\nThe sequence \\(t_n\\) has closed-form solution\n\\[\nt_n = d^n + e\n\\]\nfor some \\(d, e \\in \\mathbb{Z}\\). Using your response from Part E, guess the values of \\(d\\) and \\(e\\).\n\n\n\nWrite a proof by induction that your closed-form solution from Part F is indeed a solution to the recurrence relation from Part D.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#learning-objectives",
    "href": "content/modules/50-recursion-recurrence/in-class.html#learning-objectives",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "You will formulate a simple recursive algorithm to solve a puzzle.\nYou will use recurrence relations and proof by induction to describe the runtime of your algorithm."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#introduction",
    "href": "content/modules/50-recursion-recurrence/in-class.html#introduction",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "In the classic puzzle of the Tower of Hanoi, you start with a stack of disks on one of three pegs. The disks are stacked by size: largest at the bottom, smallest at the top:\n\nThe challenge is to move the complete stack from one peg to another, subject to the following rules:\n\nYou can move one disk at a time from one peg to another. You can choose which peg to move to. For example, in the initial configuration, the topmost disk can move to the second peg or the third.\nA larger disk can never be on top of a smaller disk."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-a",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-a",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "On a device of your choosing, navigate to this website on which you can play the Tower of Hanoi. Then, play with two, three, and four disks."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-b",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-b",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "Describe an algorithm for solving the Tower of Hanoi with \\(n = 1\\) disk. Don’t overthink it!"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-c",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-c",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "Imagine now that you had an algorithm for solving the Tower of Hanoi with \\(n = k\\) disks. How could you use this algorithm to solve the Tower of Hanoi with \\(n = k+1\\) disks?\nHint: first move the top \\(k\\) disks to another peg using your algorithm."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-d",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-d",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "Let \\(t_n\\) be the minimum number of moves necessary to solve the Tower of Hanoi problem with \\(n\\) disks. The sequence \\(t_n\\) satisfies a recurrence relation of the form\n\\[\nt_{n+1} = at_n + b\n\\]\nwith initial condition \\(t_1 = c\\) for some \\(a, b, c \\in \\mathbb{Z}\\).\nUsing your response from Parts B and C, fill in the values of \\(a\\), \\(b\\), and \\(c\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-e",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-e",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "Compute \\(t_2\\), \\(t_3\\), \\(t_4\\), and \\(t_5\\) by hand."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-f",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-f",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "The sequence \\(t_n\\) has closed-form solution\n\\[\nt_n = d^n + e\n\\]\nfor some \\(d, e \\in \\mathbb{Z}\\). Using your response from Part E, guess the values of \\(d\\) and \\(e\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/in-class.html#part-g",
    "href": "content/modules/50-recursion-recurrence/in-class.html#part-g",
    "title": "In Class: The Tower of Hanoi",
    "section": "",
    "text": "Write a proof by induction that your closed-form solution from Part F is indeed a solution to the recurrence relation from Part D."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html",
    "href": "content/modules/50-recursion-recurrence/prep.html",
    "title": "Recurrence Relations",
    "section": "",
    "text": "The formal definition of a sequence (3:49)\nRecursive Sequences (7:36)\nThe Fibonacci Sequence (6:22)\n\n\n\n\n\nIntroduction to sequences (6:13)\nThe sum and product of finite sequences (9:20)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#new",
    "href": "content/modules/50-recursion-recurrence/prep.html#new",
    "title": "Recurrence Relations",
    "section": "",
    "text": "The formal definition of a sequence (3:49)\nRecursive Sequences (7:36)\nThe Fibonacci Sequence (6:22)"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#useful-review",
    "href": "content/modules/50-recursion-recurrence/prep.html#useful-review",
    "title": "Recurrence Relations",
    "section": "",
    "text": "Introduction to sequences (6:13)\nThe sum and product of finite sequences (9:20)"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#problem-1",
    "href": "content/modules/50-recursion-recurrence/prep.html#problem-1",
    "title": "Recurrence Relations",
    "section": "Problem 1",
    "text": "Problem 1\nConsider the recurrence relation \\(a_n = 3a_{n-1} - 2\\) with initial condition \\(a_0 = 2\\). This recurrence relation has closed formula solution \\(a_n = 3^n + j\\) for some mystery integer \\(j\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#part-a",
    "href": "content/modules/50-recursion-recurrence/prep.html#part-a",
    "title": "Recurrence Relations",
    "section": "Part A",
    "text": "Part A\nWrite out \\(a_1\\), \\(a_2\\), \\(a_3\\), and \\(a_4\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#part-b",
    "href": "content/modules/50-recursion-recurrence/prep.html#part-b",
    "title": "Recurrence Relations",
    "section": "Part B",
    "text": "Part B\nBased on your answer in Part A, what is the value of the mystery integer \\(j\\)?"
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#part-c",
    "href": "content/modules/50-recursion-recurrence/prep.html#part-c",
    "title": "Recurrence Relations",
    "section": "Part C",
    "text": "Part C\nWrite a careful proof by induction that that \\(a_n = 3^n + j\\) for all \\(n \\geq 0\\), using your choice of \\(j\\) from Part B."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#problem-2",
    "href": "content/modules/50-recursion-recurrence/prep.html#problem-2",
    "title": "Recurrence Relations",
    "section": "Problem 2",
    "text": "Problem 2\nConsider a recursion relation of the form \\[\n\\begin{aligned}\n    a_n = p a_{n-1} + 1\n\\end{aligned}\n\\]\nwith initial condition \\(a_0\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#part-a-1",
    "href": "content/modules/50-recursion-recurrence/prep.html#part-a-1",
    "title": "Recurrence Relations",
    "section": "Part A",
    "text": "Part A\nWrite a function in Python or Java that computes \\(a_n\\). Your function should accept 3 arguments: \\(p\\), \\(a_0\\), and \\(n\\). Use your function to compute \\(a_{10}\\) when \\(p = 2\\) and \\(a_0 = -1\\)."
  },
  {
    "objectID": "content/modules/50-recursion-recurrence/prep.html#part-b-1",
    "href": "content/modules/50-recursion-recurrence/prep.html#part-b-1",
    "title": "Recurrence Relations",
    "section": "Part B",
    "text": "Part B\nUse your function to experiment. Find values of \\(p\\) and \\(a_0\\) such that:\n\n\\(a_n\\) becomes closer and closer to some fixed, finite number as \\(n\\) grows large.\n\\(a_n\\) “blows up” (gets very big) as \\(n\\) grows large.\n\\(a_n\\) flips between positive and negative values as \\(n\\) grows large."
  },
  {
    "objectID": "content/modules/83-probability-4/prep.html",
    "href": "content/modules/83-probability-4/prep.html",
    "title": "Random Variables and Expectation",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/83-probability-4/prep.html#problem-1",
    "href": "content/modules/83-probability-4/prep.html#problem-1",
    "title": "Random Variables and Expectation",
    "section": "Problem 1",
    "text": "Problem 1\nSuppose that I have a biased coin which comes up heads with probability \\(p\\). I flip it \\(n\\) times. Let the random variable \\(X\\) describe the number of heads I observe.\n\nPart A\nLet \\(n = 3\\) and \\(p = 0.7\\).\n\nEnumerate the entire sample space of possible outcomes. You should have 8 total.\nCompute the probability of each of the 8 outcomes, as well as the number of heads.\nCompute the expected value of \\(X\\) in this case.\n\n\n\nPart B\nSuppose now that we flip \\(n\\) coins with probability \\(p\\). Use the linearity property of expectation to prove that \\(E(X) = np\\).\nNote: You may have seen a formula for how to solve this problem in a previous class. You shouldn’t cite this formula to solve this problem – I am asking you to prove the formula."
  },
  {
    "objectID": "content/modules/83-probability-4/prep.html#problem-2",
    "href": "content/modules/83-probability-4/prep.html#problem-2",
    "title": "Random Variables and Expectation",
    "section": "Problem 2",
    "text": "Problem 2\nYour friend offers to play a “game” with you. They have two coins. Coin \\(A\\) has probability of heads equal to \\(\\frac{1}{2}\\) and coin \\(B\\) has probability of heads equal to \\(q\\). In this game,\n\nFirst, your friend picks one of the two coins. Each coin has probability \\(\\frac{1}{2}\\) of being chosen.\nThen, your friend flips the coin. If heads, your friend owes you a coffee. If tails, you owe your friend a coffee.\n\n\nPart A\nYou and your friend play this game 10 times. What is the expected number of coffees that your friend owes you after 10 plays? If you owe your friend some number of coffees, then your answer should be a negative number. In expectation, one of you might owe the other a fractional number of coffees.\nHints:\n\nUse linearity of expectation.\n\\(p(H) = p(H|A)p(A) + p(H|B)p(B)\\). This formula is sometimes called “the law of total probability,” but it is just an instance of the definition of conditional probability and the addition principle for disjoint events.\n\n\n\nPart B\nWhat is the smallest value of \\(q\\) for which you would be willing to play this game?"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section",
    "href": "content/modules/01-math-and-me/in-class.html#section",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Quick Hits\nIs this a good class to take if I’m not considering further coursework in CS? You’re welcome here, but it’s likely that you’ll get more out of courses in Math/Stats.\nAre the warmups also graded using EMRN grading? No, warmups are just graded Complete/Incomplete.\nWhere will warmups be posted? I put them on the course website, but they’re also linked from Canvas.\nWhat do labs look like for a math class?  You’ll see. 😈\nCan I watch lectures and do warmups ahead of time? That’s totally fine as long as they are fresh in your mind for class.\nI like coming to office hours.  That’s great! Everyone else should do that too. 😁"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-1",
    "href": "content/modules/01-math-and-me/in-class.html#section-1",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Your Affinity Vegetable\n \n1. Split into teams\n2. Go around and share your name and:\nIf you were a vegetable, which vegetable would you be and why?"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-2",
    "href": "content/modules/01-math-and-me/in-class.html#section-2",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Your Affinity Vegetable\n \n3. Team leader: lead your team in finding a delicious dish that incorporates all of your vegetables.\nBe ready to share!"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-3",
    "href": "content/modules/01-math-and-me/in-class.html#section-3",
    "title": "Mathematics and Me",
    "section": "",
    "text": "First, just write (4 minutes)\n \nWhat’s a way in which your previous classmates have helped you feel welcome or supported in your learning?\n\nWhat’s a way in which your previous classmates have made you feel unwelcome or discouraged in your learning?"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-4",
    "href": "content/modules/01-math-and-me/in-class.html#section-4",
    "title": "Mathematics and Me",
    "section": "",
    "text": "In Groups (8 mins)\n 🥗🥬🥕🍉🥑🍅🍇🥝🥔🍍🍊🍌🍈🥭🍎🍒🍠🍓🍑🥒🍋🍆🌽🫑🍏🍐🥦🌶\n\n\nYour name\nYour affinity vegetable and your “why”\nYour way in which others have helped you feel welcome or supported in your learning\n\nAfter everyone has spoken, go around again with:\n\nYour way in which others have made you have made you feel unwelcome or discouraged in your learning?\n\n 🥗🥬🥕🍉🥑🍅🍇🥝🥔🍍🍊🍌🍈🥭🍎🍒🍠🍓🍑🥒🍋🍆🌽🫑🍏🍐🥦🌶"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-5",
    "href": "content/modules/01-math-and-me/in-class.html#section-5",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Writing Time Again (3 minutes)\n \nWhat’s something you are especially good at?\nWere you ever not good at it?\nHow did you get good at it?"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-6",
    "href": "content/modules/01-math-and-me/in-class.html#section-6",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Back in Groups (5 mins)\n \n\nYour name and affinity vegetable\nYour superpower! Something you are especially good at.\n\nOnce everyone has spoken, go around again with:\n\nHow did you get good at your superpower?"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-9",
    "href": "content/modules/01-math-and-me/in-class.html#section-9",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Syllabus Review: Calculating Final Grades\n \nFirst Row: How many Learning Targets could a student not satisfy and still earn an A-? How many Labs could a student miss and still earn an A-?\nSecond Row: describe, in terms of Learning Targets, Labs, and Warmups, a scenario in which a student would earn a B+.\nThird Row: which of these assignment types have “partial credit”? Which of them have a chance to try again?\n\nWarmups\nQuiz problems\nLab reports"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#if-time-mathematical-writing",
    "href": "content/modules/01-math-and-me/in-class.html#if-time-mathematical-writing",
    "title": "Mathematics and Me",
    "section": "(If Time) Mathematical Writing",
    "text": "(If Time) Mathematical Writing\nMathematical writing is something we’ll be doing a lot of in this course, and we’re about to start with it in our upcoming warmup and lab assignment. Let’s compare and contrast two examples of mathematical writing.\n\nProve that the sum of two even integers is also even."
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-10",
    "href": "content/modules/01-math-and-me/in-class.html#section-10",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Solution 1\n\\(2i + 2j = 2(i + j)\\)"
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-11",
    "href": "content/modules/01-math-and-me/in-class.html#section-11",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Solution 2\n\nProposition 1 (Sum of Even Integers is Even) Let \\(m\\) and \\(n\\) be any two even integers. Then, \\(m+n\\) is also an even integer.\n\n\nProof. Let \\(m\\) and \\(n\\) be any two even integers. Then, there is some integer \\(i\\) such that \\(m = 2i\\), and similarly there is some integer \\(j\\) such that \\(n = 2j\\). We can then write\n\\[\nm + n = 2i + 2j = 2(i + j)\\;.\n\\]\nThe second equality follows from the distributive law of multiplication. So, \\(m+n\\) can be written in the form \\(2k\\) for the choice \\(k = i+j\\). Therefore, \\(m+n\\) is an integer, as was to be shown."
  },
  {
    "objectID": "content/modules/01-math-and-me/in-class.html#section-12",
    "href": "content/modules/01-math-and-me/in-class.html#section-12",
    "title": "Mathematics and Me",
    "section": "",
    "text": "Exercise\nDraft a proof that the sum of two odd integers is also even. It’s ok not to write out complete sentences, but use abbreviations that would help remind you which sentences to put where.\nFor more tips, see the guide to Writing Mathematics Well by Francis Su at Harvey Mudd College."
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html",
    "href": "content/modules/40-counting-1/in-class.html",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "",
    "text": "Consider the All Day Menu at Noonie’s Deli here in Middlebury, VT.\nThis menu includes three main sections:\nFor the purposes of this problem, a meal means either a sandwich or salad.\nUse the menu and the principles of multiplication, addition/summation, and inclusion-exclusion to answer the following questions.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-a",
    "href": "content/modules/40-counting-1/in-class.html#part-a",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part A",
    "text": "Part A\nNia and Marcus are going to order a meal from Noonie’s. Nia only eats sandwiches, but doesn’t want to go through the hassle of designing her own. Marcus only eats salads.\nHow many distinct ways are there for Nia and Marcus to order their meal?"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-b",
    "href": "content/modules/40-counting-1/in-class.html#part-b",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part B",
    "text": "Part B\nLuis likes both salads and sandwiches, but doesn’t want to go through the hassle of designing their own. He’ll order either a salad or a sandwich, but not both.\nHow many ways are there for Luis to order a meal?"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-c",
    "href": "content/modules/40-counting-1/in-class.html#part-c",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part C",
    "text": "Part C\nMaia wants to make her own custom sandwich. She’s happy with any of the main ingredients, but doesn’t want to pay extra for premium breads, additional vegetables, or extras.\nHow many ways are there for Maia to order her custom sandwich?"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-d",
    "href": "content/modules/40-counting-1/in-class.html#part-d",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part D",
    "text": "Part D\nLinh is vegan and doesn’t want to pay for any extras.\nHow many ways are there for Linh to order her custom sandwich?"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-e",
    "href": "content/modules/40-counting-1/in-class.html#part-e",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part E",
    "text": "Part E\nHiroki wants to make a custom sandwich. He’s willing to have one with either a premium bread OR an extra (like avocado or hummus), but not both. He’s also willing to make a custom sandwich with neither a premium bread nor extras. Hiroki doesn’t want any extra vegetables.\nHow many ways are there for Hiroki to order his custom sandwich?"
  },
  {
    "objectID": "content/modules/40-counting-1/in-class.html#part-f",
    "href": "content/modules/40-counting-1/in-class.html#part-f",
    "title": "In-Class Activity: Introduction to Counting",
    "section": "Part F",
    "text": "Part F\nAryana wants a custom sandwich without any premium breads, extras. She thinks that pickled red onions really make roasted tomatoes taste great, and she isn’t willing to order a sandwich that includes only one of these two things: either the sandwich has both pickled red onions and roasted tomatoes, or it has neither.\nHow many ways are there for Aryana to order her custom sandwich?"
  },
  {
    "objectID": "content/modules/40-counting-1/prep.html",
    "href": "content/modules/40-counting-1/prep.html",
    "title": "Introduction to Counting",
    "section": "",
    "text": "There are not very many videos today, so taking time with the reading is especially important.\n\nThe summation rule for disjoint unions (5:54)\nCounting formula for two intersecting sets (inclusion-exclusion) (7:31)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/40-counting-1/prep.html#videos-20-mins",
    "href": "content/modules/40-counting-1/prep.html#videos-20-mins",
    "title": "Introduction to Counting",
    "section": "",
    "text": "There are not very many videos today, so taking time with the reading is especially important.\n\nThe summation rule for disjoint unions (5:54)\nCounting formula for two intersecting sets (inclusion-exclusion) (7:31)"
  },
  {
    "objectID": "content/modules/40-counting-1/prep.html#readings-45-mins",
    "href": "content/modules/40-counting-1/prep.html#readings-45-mins",
    "title": "Introduction to Counting",
    "section": "Readings (~45 mins)",
    "text": "Readings (~45 mins)\n\nDMOI Chapter 1.1"
  },
  {
    "objectID": "content/modules/40-counting-1/prep.html#warmup-45-mins",
    "href": "content/modules/40-counting-1/prep.html#warmup-45-mins",
    "title": "Introduction to Counting",
    "section": "Warmup (~45 mins)",
    "text": "Warmup (~45 mins)\n\nProblem 1\n\nConsider the set \\(A\\) of all strings of letters \\(a-f\\) of length \\(5\\). Here are a few elements of this set:\n\n\\(dcbac\\)\n\\(ebafe\\)\n\\(abafa\\)\n\nWhat is the cardinality of each of the following sets? (This is another way of asking how many strings there are with the specified property)\n\n\\(A\\) itself, the set of all strings of letters \\(a-f\\) of length \\(5\\).\n\\(B\\), the subset of \\(A\\) in which strings contain no repeated letters.\n\\(C\\), the subset of \\(A\\) in which every sequence starts with the three letters “\\(bee\\)”.\n\\(D\\), the subset of \\(A\\) in which every sequence either starts with “\\(bee\\)” or ends with “\\(eab\\),” or both.\n\\(E\\), the subset of \\(A\\) in which every sequence either starts with “\\(bee\\)” or ends with “\\(cab\\)”, or both.\n\\(F\\), the subset of \\(B\\) (the set of strings with no repeated letters) which do not contain the substring “\\(bad\\)” in any position.\n\nHint: figure out how many strings contain the substring “\\(bad\\)” and then subtract this number from the cardinality of \\(B\\).\n\n\n\n\nProblem 2\nHow many positive integers less than or equal to 1,500 are multiples of either 3 or 5? Do not answer this question by listing out all the possibilities. Instead, think carefully and use the principle of inclusion-exclusion.\nHint: think about multiples of 15…"
  },
  {
    "objectID": "content/modules/72-graphs-3/prep.html",
    "href": "content/modules/72-graphs-3/prep.html",
    "title": "A Brief Taste of Network Science",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/72-graphs-3/prep.html#problem-1",
    "href": "content/modules/72-graphs-3/prep.html#problem-1",
    "title": "A Brief Taste of Network Science",
    "section": "Problem 1",
    "text": "Problem 1\n\nIntroduction\nIn this class, “matrix” just means “square array of numbers.”\nThe adjacency matrix of a graph \\(G\\) with \\(n\\) nodes is an \\(n\\times n\\) binary matrix that we often call \\(\\mathbf{A}\\). It’s entries are given by\n \\[\n\\begin{aligned}\n    a_{ij} = \\begin{cases}\n        1 &\\quad \\text{there is an edge between node $i$ and node $j$} \\\\\n        0 &\\quad \\text{there is no edge between node $i$ and node $j$}\n    \\end{cases}\n\\end{aligned}\n\\]\\(a_{ij}\\) is the entry of \\(\\mathbf{A}\\) that is in the \\(i\\)th row and \\(j\\)th column.\nFor example, here is a graph with \\(n = 6\\) nodes:\n\n\n\n\n\n\nG\n\n\n\n1\n\n1\n\n\n\n2\n\n2\n\n\n\n1--2\n\n\n\n\n3\n\n3\n\n\n\n1--3\n\n\n\n\n2--3\n\n\n\n\n4\n\n4\n\n\n\n3--4\n\n\n\n\n5\n\n5\n\n\n\n4--5\n\n\n\n\n6\n\n6\n\n\n\n5--6\n\n\n\n\n6--4\n\n\n\n\n\n\n\n\nHere is the adjacency matrix of this graph:\n\\[\n\\begin{aligned}\n    \\mathbf{A} = \\left[\\begin{matrix}\n    0 & 1 & 1 & 0 & 0 & 0 \\\\\n    1 & 0 & 1 & 0 & 0 & 0 \\\\\n    1 & 1 & 0 & 1 & 0 & 0 \\\\\n    0 & 0 & 1 & 0 & 1 & 1 \\\\\n    0 & 0 & 0 & 1 & 0 & 1 \\\\\n    0 & 0 & 0 & 1 & 1 & 0\n    \\end{matrix}\\right]\n\\end{aligned}\n\\]\nNote that an edge between \\(i\\) and \\(j\\) corresponds to two entries of \\(\\mathbf{A}\\): the \\(a_{ij}\\) entry and the \\(a_{ji}\\) entry.\n\n\nPart A\nA walk of length \\(k\\) is a walk that traverses exactly \\(k\\) edges. For example, a walk of length \\(1\\) traverses only a single edge. \\((1, 2)\\) is a walk of length 1 in the example graph above. \\((1, 2), (2, 3)\\) is a walk of length 2, but not a walk of length 1.\n\nHow many walks of length 1 from node \\(4\\) to node \\(5\\) are there in the example graph?\nHow many walks of length 1 are there from node \\(4\\) to node \\(2\\)?\nWhat is entry \\(a_{45}\\) in the adjacency matrix? What is entry \\(a_{42}\\)?\nMake a conjecture: what information does entry \\(a_{ij}\\) contain about the the number of walks of length \\(1\\) from node \\(i\\) to node \\(j\\)?\n\n\n\nPart B\nLet’s define a new number with the following formula:\n \\[\n\\begin{aligned}\n    b_{ij} = \\sum_{k = 1}^n a_{ik}a_{kj}\\;.\n\\end{aligned}\n\\]If you have used matrix multiplication before, \\(b_{ij}\\) is the \\(ij\\)th entry of \\(\\mathbf{A}^2\\).\n\nUsing the example graph, compute the number of walks of length 2 from node 1 to node 2, node 1 to node 4, node 3 to node 4, and node 1 to node 5.\nUsing the definition, compute \\(b_{12}\\), \\(b_{14}\\), \\(b_{34}\\), and \\(b_{15}\\).\nState a conjecture describing the relationship between \\(b_{ij}\\) and the number of walks of length 2.\n\n\n\nPart C\nThe counting principles of addition and multiplication both appear in the formula for the number of walks of length 2 between nodes \\(i\\) and \\(j\\) as given above. Explain the role of each of these principles in this formula. Why do we multiply \\(a_{ik}\\) by \\(a_{kj}\\)? Why do we add across all possibilities \\(k\\)? In your response, please include the words “sequential” and “disjoint” or similar."
  },
  {
    "objectID": "content/modules/19-more-logic/prep.html",
    "href": "content/modules/19-more-logic/prep.html",
    "title": "More on Logic, Sets, and Quantifiers",
    "section": "",
    "text": "Review our previous readings on logic, sets, and quantified logic!\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/19-more-logic/prep.html#problem-1",
    "href": "content/modules/19-more-logic/prep.html#problem-1",
    "title": "More on Logic, Sets, and Quantifiers",
    "section": "Problem 1",
    "text": "Problem 1\nLet \\(P(x)\\) be some predicate, and let \\(D\\) be some set. For each of the following statements below, determine whether the deduction is valid for any choice of the set \\(D\\) and explain why. You don’t have to write a formal mathematical proof, but a sentence or two would be appropriate. If there is some \\(D\\) for which the deduction is not valid, give an example.\n\n\\(\\forall x \\in D: P(x)\\) implies that \\(\\exists x \\in D: P(x)\\).\n\\(\\forall x \\in D: P(x)\\) implies that \\((x \\in D) \\rightarrow P(x)\\).\n\\(\\exists x \\in D : P(x)\\) implies that \\(|D| \\geq 1\\).\n\\((\\forall x \\in D: P(x)) \\land (y \\in D)\\) implies that \\(P(y)\\)."
  },
  {
    "objectID": "content/modules/19-more-logic/prep.html#problem-2",
    "href": "content/modules/19-more-logic/prep.html#problem-2",
    "title": "More on Logic, Sets, and Quantifiers",
    "section": "Problem 2",
    "text": "Problem 2\nLet \\(P(x)\\) and \\(Q(x)\\) be any predicates. Suppose further that you know that \\(P(x)\\rightarrow Q(x)\\). Define the sets: \\[\n\\begin{aligned}\n    A &= \\{x \\in \\mathbb{Z} : P(x)\\} \\\\\n    B &= \\{x \\in \\mathbb{Z} : Q(x)\\}\n\\end{aligned}\n\\]\n\nUse the element method to write a careful proof that \\(A \\subseteq B\\).\nSuppose further that \\(P(x) \\leftrightarrow Q(x)\\). Use the element method to prove that \\(A = B\\).\n\nNote: to prove that two sets \\(A\\) and \\(B\\) are equal, it is sufficient to show that \\(A \\subseteq B\\) and \\(B \\subseteq A\\).\n\n\nAn example of this scenario: let \\(P(x)\\) be the predicate “\\(x\\) is a prime number larger than 2” and let \\(Q(x)\\) be the predicate “\\(x\\) is an odd number.” We could use your proof structure to show that the set of prime numbers larger than 2 is a subset of the set of odd numbers."
  },
  {
    "objectID": "content/modules/19-more-logic/prep.html#problem-3",
    "href": "content/modules/19-more-logic/prep.html#problem-3",
    "title": "More on Logic, Sets, and Quantifiers",
    "section": "Problem 3",
    "text": "Problem 3\nIn his letter to a leading Roman agriculturist, the statesman and writer Marcus Tullius Cicero (106 BCE–43BCE) wrote:\n\nIf you have a garden and a library, then you have everything you need.\n\nLet \\(G\\) be the set of all gardens, \\(L\\) be the set of all libraries, and \\(N\\) be the set of things that you need. Finally, let \\(H(x)\\) be the statement that you have \\(x\\).\n\nPart A\nUse quantifiers and logical operators to translate Cicero’s statement into symbols.\n\n\n\nPart B\nThe contrapositive of the statement \\(p \\rightarrow q\\) is the statement \\(\\lnot q \\rightarrow \\lnot p\\). As you may remember, the contrapositive is logically equivalent to the original implication. Write the contrapositive of your translation from Part A. Simplify your answer so that negation symbols \\(\\lnot\\) appear only directly in front of predicates."
  },
  {
    "objectID": "content/modules/17-quantified-logic/in-class.html",
    "href": "content/modules/17-quantified-logic/in-class.html",
    "title": "Practice with Quantified Logic",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/17-quantified-logic/prep.html",
    "href": "content/modules/17-quantified-logic/prep.html",
    "title": "More On Sets",
    "section": "",
    "text": "How To Be Right by Dr. Eugenia Cheng\nDMOI, “Beyond Propositions” (it’s a short section).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/17-quantified-logic/prep.html#problem-1",
    "href": "content/modules/17-quantified-logic/prep.html#problem-1",
    "title": "More On Sets",
    "section": "Problem 1",
    "text": "Problem 1\nSimplify the statements below (so negation appears only directly next to predicates). In these statements without domains of quantification, you may assume that the domain is the set \\(\\mathbb{Z}\\) of integers. This implies that \\(\\lnot(x &lt; y)\\equiv (y \\leq x)\\).\n\n\\(\\lnot \\exists x \\forall y(\\lnot O(x) \\lor E(x))\\)\n\\(\\lnot \\forall x \\lnot \\forall y \\lnot ((x &lt; y) \\land \\exists z((x &lt; z)\\lor (y &lt; z)))\\)\n\nNote: this problem is the first two parts of 3.16 in DMOI, and it has an online solution. I recommend that you try this problem on your own first, carefully show all your steps, and then check against the solution."
  },
  {
    "objectID": "content/modules/17-quantified-logic/prep.html#problem-2",
    "href": "content/modules/17-quantified-logic/prep.html#problem-2",
    "title": "More On Sets",
    "section": "Problem 2",
    "text": "Problem 2\n\nNote\nWhile completing one of the parts of this problem, you’ll need to use a predicate with multiple arguments. Some examples:\n\n\\(P(x, y)\\): \\(x\\) is the parent of \\(y\\).\n\\(Q(x, y, z)\\): \\(x\\), \\(y\\), and \\(z\\) are in a project group.\n\\(R(x, y)\\): \\(x\\) is the number the results from multiplying \\(y\\) by 3; that is, \\(x = 3y\\).\n\n\n\nProblem Statement\nFor each of the English statements below:\n\nExpress the statement using quantified predicate logic. Explicitly define any predicates you use, as well as your domain of quantification. If you make any interpretations of English language, state what they are and why. Your “translation” may not be perfect, but it’s ok as ong as you state your assumptions and interpretations.\nNegate the expression, simplifying the result far enough so that negation \\(\\lnot\\) symbols appear only directly before predicates (so, \\(\\lnot P(x)\\) is ok but \\(\\lnot (\\exists x \\;:\\; P(x))\\) is not).\nTranslate the negated version back into English.\nComment: in your view, is the original statement or its negation correct?\n\n\nNo one likes Mondays.\nEveryone in Vermont loves skiing!\n\nNobody’s perfect.\nStudents are successful in classes with active learning.\n\nfor this problem, please use the predicate \\(A(s, c)\\) to mean that student \\(s\\) is successful in class \\(c\\). Define two appropriate domains of quantification.\n\n\nFinally, decide which if any of these statements express a “kernel of truth” or a feeling that resonates with you. What would Dr. Cheng suggest with those statements?"
  },
  {
    "objectID": "content/problems/induction/function-performance.html",
    "href": "content/problems/induction/function-performance.html",
    "title": "",
    "section": "",
    "text": "Consider the following function, which accepts a list of integers and returns the sum of all the integers in the list:\n\ndef recursive_sum(L):\n    if len(L) == 1:\n        return L[0]\n    else: \n        return recursive_sum(L[:-1]) + L[-1]\n\nHere it is in action:\n\nrecursive_sum([1, 2, 3])\n\n6\n\n\nIn the following theorem, fill in the blank and then write a proof using induction:\nTheorem: When recursive_sum is called on a list of length \\(n \\geq 1\\), the + addition operator is called a total of _____ times.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/sum-of-squares.html",
    "href": "content/problems/induction/sum-of-squares.html",
    "title": "",
    "section": "",
    "text": "Prove that, for any natural number \\(n \\geq 1\\),\n\\[\n\\begin{align}\n    \\sum_{i = 1}^n i^2 = \\frac{n(n+1)(n+2)}{6}\n\\end{align}\n\\]\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/proving-a-function.html",
    "href": "content/problems/induction/proving-a-function.html",
    "title": "Motivation",
    "section": "",
    "text": "In computer science, we often use induction to prove the correctness of a function – that is, we prove formally that the function does what it is supposed to do. This is sometimes called “proving a function.” For example, consider the Python function below, which reverses an input string using recursion.\n\ndef reverse_string(s):\n    \"\"\"\n    reverse the string s. The first letter becomes the last letter, the second letter becomes the second-to-last letter, etc. \n\n    args: \n      s, the string to be reversed\n\n    returns: the reversed string\n    \"\"\"\n\n    if s == \"\":\n        return \"\"\n    else:\n        return reverse_string(s[1:]) + s[0]\n\nHere it is in action.\n\nreverse_string(\"CSCI 0200\")\n\n'0020 ICSC'\n\n\nWe got the right answer for this input! But…would we get the right answer on every possible input? Let’s write a proof which will guarantee that we will.\n\nProblem Statement\nWe’ll write a string with \\(n\\) characters as \\(s_1s_2s_3\\cdots s_{n-2}s_{n-1}s_n\\).\nNow we can state the thing we want to prove:\nProposition: For any \\(n \\in \\mathbb{N}\\), the result of calling the function reverse_string on the string \\(s_1s_2s_3\\cdots s_{n-2}s_{n-1}s_n\\) is the reversal of \\(s\\), that is, the string \\(s_ns_{n-1}s_{n-2}\\cdots s_3s_2s_1\\).\nProve this claim using induction.\nNote: The empty string \\(\\epsilon\\) is the string with no elements at all; this string is its own reversal.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/identify-errors.html",
    "href": "content/problems/induction/identify-errors.html",
    "title": "",
    "section": "",
    "text": "Here are three attempted statements of a theorem which was provided in the video (it is also Example 2.5.1 in DMOI). None of these statements are correct. For each one, explain which piece is incorrect, why it matters, and how to fix it.\n“Theorem 1”: For all integers \\(n \\in \\mathbb{Z}\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n+1)}{2}\\;.\n\\]\n“Theorem 2”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{i(i+1)}{2}\\;.\n\\]\n“Theorem 3”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n-1)}{2}\\;.\n\\]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/identify-errors.html#part-a",
    "href": "content/problems/induction/identify-errors.html#part-a",
    "title": "",
    "section": "",
    "text": "Here are three attempted statements of a theorem which was provided in the video (it is also Example 2.5.1 in DMOI). None of these statements are correct. For each one, explain which piece is incorrect, why it matters, and how to fix it.\n“Theorem 1”: For all integers \\(n \\in \\mathbb{Z}\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n+1)}{2}\\;.\n\\]\n“Theorem 2”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{i(i+1)}{2}\\;.\n\\]\n“Theorem 3”: For all natural numbers \\(n \\geq 1\\),\n\\[\n\\sum_{i = 0}^n i = \\frac{n(n-1)}{2}\\;.\n\\]"
  },
  {
    "objectID": "content/problems/induction/identify-errors.html#part-b",
    "href": "content/problems/induction/identify-errors.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nHere are three attempted inductive proofs of the correct theorem. None of them are correct. For each one, explain what’s wrong.\n“Proof 1:” Suppose that \\(n = 1\\). Then,\n\\[\n\\begin{aligned}\n\\sum_{i = 0}^n i &= \\sum_{i = 1}^n i \\\\\n                 &= 1 \\\\\n                 &= \\frac{1(1+1)}{2}\\;,\n\\end{aligned}\n\\]\nas was to be shown. This completes the proof.\n“Proof 2:” Suppose that the theorem holds for some \\(n = k\\). We’ll show that this implies that it also holds for \\(n = k+1\\). We can calculate\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^{k+1} i &= \\sum_{i = 0}^k i + (k+1) &\\text{(manipulating sum)} \\\\\n                         &= \\frac{k(k+1)}{2} + (k+1) &\\text{(inductive hypothesis)} \\\\\n                         &= \\frac{(k+1)(k+2)}{2}  &\\text{(algebra)} \\\\\n                         &= \\frac{(k+1)((k+1) + 1)}{2}  &\\text{(algebra)}\\;.\n\\end{aligned}\n\\]\nThis shows that the statement is true for \\(n = k+1\\), which completes the proof.\n“Proof 3:” First, we’ll do the base case. Suppose that \\(n = 1\\). Then,\n\\[\n\\begin{aligned}\n\\sum_{i = 0}^n i &= \\sum_{i = 1}^n i \\\\\n                 &= 1 \\\\\n                 &= \\frac{1(1+1)}{2}\\;.  \n\\end{aligned}\n\\]\nSo, the statement is true for \\(n = 1\\), completing the base case. Now we’ll do the inductive step. Suppose that the statement is true for \\(n = k+1\\). We’ll show that it’s also true for \\(n = k\\). We can calculate\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^{k+1} i &= \\frac{(k+1)(k+2)}{2} &\\text{(inductive hypothesis)} \\\\\n                         &= \\frac{k(k+1)}{2} + \\frac{2(k+1)}{2} &\\text{(algebra)}\\;.\n\\end{aligned}\n\\]\nSince what’s left includes the formula for the case \\(n = k\\), this completes the inductive step."
  },
  {
    "objectID": "content/problems/induction/induction-example-1.html",
    "href": "content/problems/induction/induction-example-1.html",
    "title": "",
    "section": "",
    "text": "Use mathematical induction to prove that, for any integer \\(n &gt;= 1\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 0}^n 2^i = 2^{n+1} - 1\n\\end{aligned}\n\\]\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/nim.html",
    "href": "content/problems/induction/nim.html",
    "title": "",
    "section": "",
    "text": "You and your friend are playing the following (fun!) game. There are two piles of apples. The first player removes some positive integer number of apples from one of the piles. Then, the second player also removes some number of apples from one of the piles. Each player can remove any number of apples from one of the two piles, but cannot take apples from both piles simultaneously.\nThe players alternate until one of them removes the very last apple (from either pile). That player, who removes the very last apple, wins.\nYou deviously encourage your friend to go first. Then, you use a simple copycat strategy: whenever your friend removes \\(j\\) apples from one pile, you always remove the same number \\(j\\) apples from the second pile.\nProve the following statement using strong induction:\nProposition: If at the beginning of the game the two piles contain the same number of apples, then you (the second player) always win using your copycat strategy.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/graphs/trees.html",
    "href": "content/problems/graphs/trees.html",
    "title": "",
    "section": "",
    "text": "A walk between vertex \\(u\\) and vertex \\(v\\) in a graph \\(G\\) is a sequence of vertices such that every subsequent pair of vertices in the sequence has an edge between them in \\(G\\). A path is a walk in which no vertices are repeated. A tree is a graph with the property that there is exactly one path between any pair of nodes in the graph.\nVertices of degree 1 are sometimes called leaves.\nHere is a fact about trees, which you may use without proof:\n\nTheorem 1 (Trees Have Leaves) Every tree has at least one vertex of degree 1.\n\nUsing Theorem 1, prove the following theorem:\n\nTheorem 2 Any tree with \\(n\\geq 1\\) vertices has exactly \\(n-1\\) edges.\n\n\nHints\n\nInduction on \\(n\\), the number of nodes.\nFor the inductive step, it is necessary to start with a larger tree and “prune” it (rather than starting with a smaller tree and adding a node and an edge).\nIf you remove a leaf of a tree, is the result a tree? How do you know?\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/set-operations-2.html",
    "href": "content/problems/sets/set-operations-2.html",
    "title": "",
    "section": "",
    "text": "Define the two sets: \\[\n\\begin{aligned}\nA &= \\{x \\in \\mathbb{N} : x = 2y \\text{ for some $y \\in \\mathbb{Z}$ such that $-5\\leq y \\leq 5$} \\} \\\\\nB &= \\{x \\in \\mathbb{N} : x = 3z+1 \\text{ for some $z \\in \\mathbb{Z}$}\\} \\\\\n\\end{aligned}\n\\]\n\nPart A\nWrite the set \\(A\\) in roster notation. Then, compute \\(|A|\\).\n\n\nPart B\nWrite the set \\(A \\cap B\\) in roster notation. Then, compute \\(|A \\cap B|\\).\n\n\nPart C\nWrite down at least three elements of \\(B \\setminus A\\). You do not need to write the entire set or express it in set-builder notation.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/dmoi-0-3-13-multiples.html",
    "href": "content/problems/sets/dmoi-0-3-13-multiples.html",
    "title": "",
    "section": "",
    "text": "Recall that \\(\\mathbb{Z} = \\{\\ldots,-2, -1, 0, 1, 2 \\ldots\\}\\) (the integers). Let \\(\\mathbb{Z}^{+} = \\{1, 2, 3 \\ldots\\}\\) be the set of positive integers. Let \\(2\\mathbb{Z}\\) be the set of even integers, \\(3\\mathbb{Z}\\) the set of integers that are multiples of 3, and so on.\n\nIs \\(\\mathbb{Z}^+ \\subseteq \\mathbb{Z}\\)? Why or why not?\nIs \\(2\\mathbb{Z} \\subseteq \\mathbb{Z}^+\\)? Why or why not?\nFind \\(2\\mathbb{Z} \\cap 3\\mathbb{Z}\\). Describe this set in words, using set notation, and using the notation defined in this problem. \n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/set-builder-2.html",
    "href": "content/problems/sets/set-builder-2.html",
    "title": "",
    "section": "",
    "text": "Write each of the following sets in set-builder notation. There may be several correct ways.\n\n\n\\(\\left\\{ 2, 4, 8, 16, 32, 64,\\ldots \\right\\}\\) \n\\(\\left\\{ 3, 4, 5, 6, 7, 8 \\right\\}\\)\n\\(\\left\\{ 0, 3, 6, 9, 12, 15 \\right\\}\\)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/subset-inclusion-3.html",
    "href": "content/problems/sets/subset-inclusion-3.html",
    "title": "",
    "section": "",
    "text": "Let \\(A = \\{x \\in \\mathbb{Z} \\;:\\; x = 4y+1 \\text{ for some } y \\in \\mathbb{Z}\\}\\) and let \\(B = \\{x \\in \\mathbb{Z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{Z}\\}\\).\n\nPart A\nWrite out at least three distinct elements of \\(A\\) and three distinct elements of \\(B\\).\n\n\nPart B\nIs \\(15 \\in A\\)? Is \\(15 \\in B\\)?\n\n\nPart C\nUse the element method to write a proof that \\(A \\subseteq B\\).\n\n\nPart D\nSuppose that we instead defined \\(A = \\{x \\in \\mathbb{Z} \\;:\\; x = 4y+1 \\text{ for some } y \\in \\mathbb{N}\\}\\). Would it still be true that \\(A \\subseteq B\\)? Would your proof from Part C still work? Briefly explain why or why not.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/subset-inclusion-1.html",
    "href": "content/problems/sets/subset-inclusion-1.html",
    "title": "",
    "section": "",
    "text": "Let \\(A = \\{x \\in \\mathbb{Z} \\;:\\; x = 4y+1 \\text{ for some } y \\in \\mathbb{Z}\\}\\) and let \\(B = \\{x \\in \\mathbb{Z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{Z}\\}\\).\n\nPart A\nWrite out at least three distinct elements of \\(A\\) and three distinct elements of \\(B\\).\n\n\nPart B\nIs \\(7 \\in A\\)? Is \\(7 \\in B\\)?\n\n\nPart C\nUse the element method to write a proof that \\(A \\subseteq B\\).\n\n\nPart D\nWould your proof still work if we instead defined \\(B = \\{x \\in \\mathbb{z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{N}\\}\\)? Briefly explain why or why not.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/venn-diagram-1.html",
    "href": "content/problems/sets/venn-diagram-1.html",
    "title": "",
    "section": "",
    "text": "Draw a Venn diagram to represent the set\n\\[(A \\cap B \\cap \\overline{C}) \\cup (A \\cap \\overline{B} \\cap C) \\cup (\\overline{A}\\cap \\overline{B} \\cap C)\\]\nThen, use your Venn diagram find an alternative expression that represents the same set.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/dmoi-0-3-24.html",
    "href": "content/problems/sets/dmoi-0-3-24.html",
    "title": "",
    "section": "",
    "text": "Let \\(X = \\{n \\in \\mathbb{N}: 10 \\leq n &lt; 20\\}\\). Find examples of sets with the following properties and briefly explain why your examples are correct.\n\nA set \\(A \\subseteq \\mathbb{N}\\) with \\(\\lvert A \\rvert = 10\\) such that \\(X \\setminus A = \\{10, 12, 14\\}\\).\nA set \\(B \\in \\mathcal{P}(X)\\) with \\(\\lvert B \\rvert = 5\\).\nA set \\(C \\subseteq \\mathcal{P}(X)\\) with \\(\\lvert C \\rvert = 5\\).\nA set \\(D \\subseteq X\\times X\\) with \\(\\lvert D \\rvert = 5\\).\nA set \\(E \\subseteq X\\) such that \\(\\lvert E \\rvert \\in E\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-2.html",
    "href": "content/problems/recursion-recurrence/fibonacci-2.html",
    "title": "",
    "section": "",
    "text": "Use the recursive definition of the Fibonacci numbers to write an inductive proof that, for any \\(n \\in \\mathbb{Z}\\) with \\(n \\geq 1\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 1}^n F_i = F_{n+2} - 1\\;.\n\\end{aligned}\n\\]\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-1.html",
    "href": "content/problems/recursion-recurrence/fibonacci-1.html",
    "title": "",
    "section": "",
    "text": "Use the characteristic root technique to find a closed-formula for the Fibonacci numbers. Your formula should look like:\n\\[\n\\begin{aligned}\n    F_n = ar_1^n + br_2^n\n\\end{aligned}\n\\]\nfor some numbers \\(a, b, r_1, r_2 \\in \\mathbb{R}\\) that you determine.\nHint: A complete solution involves both using the quadratic formula and solving a \\(2 \\times 2\\) system of linear equations.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/merge-sort.html",
    "href": "content/problems/recursion-recurrence/merge-sort.html",
    "title": "",
    "section": "",
    "text": "The merge-sort algorithm is an algorithm for sorting a list \\(L\\) of integers. In each step of merge-sort:\nAssume that \\(n\\) is the length of \\(L\\) and that \\(n = 2^k\\) for some integer \\(k\\). Assume also that merging two lists requires a number of comparisons equal to the sum of the sizes of the two lists.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/merge-sort.html#part-a",
    "href": "content/problems/recursion-recurrence/merge-sort.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nLet \\(f(n)\\) be the number of comparisons required to sort a list of length \\(n\\) using merge-sort. Write down a recurrence relation describing \\(f(n)\\). Your relation should include terms of the form \\(f(k)\\) where \\(k &lt; n\\), as well as other expressions involving \\(n\\). Briefly justify your recurrence relation."
  },
  {
    "objectID": "content/problems/recursion-recurrence/merge-sort.html#part-b",
    "href": "content/problems/recursion-recurrence/merge-sort.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nHow many comparisons are required to sort a list of length \\(1\\)?"
  },
  {
    "objectID": "content/problems/recursion-recurrence/merge-sort.html#part-c",
    "href": "content/problems/recursion-recurrence/merge-sort.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nUsing Parts A and B, compute the number of steps needed to sort lists of size \\(n\\), where:\n\n\\(n = 4\\)\n\\(n = 16\\)"
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html",
    "href": "content/problems/recursion-recurrence/hanoi.html",
    "title": "",
    "section": "",
    "text": "In the classic puzzle of the Tower of Hanoi, you start with a stack of disks on one of three pegs. The disks are stacked by size: largest at the bottom, smallest at the top:\n\nThe challenge is to move the complete stack from one peg to another, subject to the following rules:\n\nYou can move one disk at a time from one peg to another. You can choose which peg to move to. For example, in the initial configuration, the topmost disk can move to the second peg or the third.\nA larger disk can never be on top of a smaller disk.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#introduction",
    "href": "content/problems/recursion-recurrence/hanoi.html#introduction",
    "title": "",
    "section": "",
    "text": "In the classic puzzle of the Tower of Hanoi, you start with a stack of disks on one of three pegs. The disks are stacked by size: largest at the bottom, smallest at the top:\n\nThe challenge is to move the complete stack from one peg to another, subject to the following rules:\n\nYou can move one disk at a time from one peg to another. You can choose which peg to move to. For example, in the initial configuration, the topmost disk can move to the second peg or the third.\nA larger disk can never be on top of a smaller disk."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-a",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nOn a device of your choosing, navigate to this website on which you can play the Tower of Hanoi. Then, play with two, three, and four disks."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-b",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nDescribe an algorithm for solving the Tower of Hanoi with \\(n = 1\\) disk. Don’t overthink it!"
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-c",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nImagine now that you had an algorithm for solving the Tower of Hanoi with \\(n = k\\) disks. How could you use this algorithm to solve the Tower of Hanoi with \\(n = k+1\\) disks?\nHint: first move the top \\(k\\) disks to another peg using your algorithm."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-d",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-d",
    "title": "",
    "section": "Part D",
    "text": "Part D\nLet \\(t_n\\) be the minimum number of moves necessary to solve the Tower of Hanoi problem with \\(n\\) disks. The sequence \\(t_n\\) satisfies a recurrence relation of the form\n\\[\nt_{n+1} = at_n + b\n\\]\nwith initial condition \\(t_1 = c\\) for some \\(a, b, c \\in \\mathbb{Z}\\).\nUsing your response from Parts B and C, fill in the values of \\(a\\), \\(b\\), and \\(c\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-e",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-e",
    "title": "",
    "section": "Part E",
    "text": "Part E\nCompute \\(t_2\\), \\(t_3\\), \\(t_4\\), and \\(t_5\\) by hand."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-f",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-f",
    "title": "",
    "section": "Part F",
    "text": "Part F\nThe sequence \\(t_n\\) has closed-form solution\n\\[\nt_n = d^n + e\n\\]\nfor some \\(d, e \\in \\mathbb{Z}\\). Using your response from Part E, guess the values of \\(d\\) and \\(e\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/hanoi.html#part-g",
    "href": "content/problems/recursion-recurrence/hanoi.html#part-g",
    "title": "",
    "section": "Part G",
    "text": "Part G\nWrite a proof by induction that your closed-form solution from Part F is indeed a solution to the recurrence relation from Part D."
  },
  {
    "objectID": "content/problems/recursion-recurrence/verifying-recurrence-1.html",
    "href": "content/problems/recursion-recurrence/verifying-recurrence-1.html",
    "title": "",
    "section": "",
    "text": "Consider the recurrence relation \\(a_n = 3a_{n-1} - 2\\) with initial condition \\(a_0 = 2\\). This recurrence relation has closed formula solution \\(a_n = 3^n + j\\) for some mystery integer \\(j\\).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-a",
    "href": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nWrite out \\(a_1\\), \\(a_2\\), \\(a_3\\), and \\(a_4\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-b",
    "href": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nBased on your answer in Part A, what is the value of the mystery integer \\(j\\)?"
  },
  {
    "objectID": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-c",
    "href": "content/problems/recursion-recurrence/verifying-recurrence-1.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nWrite a careful proof by induction that that \\(a_n = 3^n + j\\) for all \\(n \\geq 0\\), using your choice of \\(j\\) from Part B."
  },
  {
    "objectID": "content/problems/logic/implications-2.html",
    "href": "content/problems/logic/implications-2.html",
    "title": "",
    "section": "",
    "text": "Consider the following propositions:\n\n\\(P\\): I achieved a Satisfactory (S) assessment on at least 11 Learning Targets.\n\\(Q\\): I received an E on at least 4 Lab assignments.\n\\(R\\): I had an N or an R on at least one Lab assignment by the end of the semester.\n\\(S\\): I missed 4 or more warmups.\n\\(T\\): I earned an A in CSCI 0200.\n\nConstruct a correct logical statement using \\(\\lnot\\), \\(\\lor\\), \\(\\land\\), \\(\\rightarrow\\), and/or \\(\\leftrightarrow\\) to describe the relationship between these five propositions.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/logic/truth-tables-1.html",
    "href": "content/problems/logic/truth-tables-1.html",
    "title": "",
    "section": "",
    "text": "Part A\nCreate truth tables for each of the three logical expressions:\n\n\\((r \\lor p) \\land q\\)\n\\((r \\lor p) \\land (r \\lor q)\\)\n\\(r \\lor (p \\land q)\\)\n\n\n\nPart B\nTwo of these expressions are logically equivalent: no matter the truth values of \\(r\\), \\(p\\), and \\(q\\), the two expressions always evaluate to the same final truth value. Which are the two equivalent expressions?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/even-contradiction.html",
    "href": "content/problems/proofs/even-contradiction.html",
    "title": "",
    "section": "",
    "text": "Use any correct method to prove that, if \\(a, b \\in \\mathbb{Z}\\), then \\(a^2 - 4b \\neq 2\\). Begin your argument by announcing your technique; e.g. “We will use proof by contrapositive” or “We will use direct proof.”\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/cases.html",
    "href": "content/problems/proofs/cases.html",
    "title": "",
    "section": "",
    "text": "Prove that if \\(n\\) is an integer, then \\(3n^2 + n + 4\\) is even.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/counterexamples.html",
    "href": "content/problems/proofs/counterexamples.html",
    "title": "",
    "section": "",
    "text": "Give a counterexample to each of the following claims. Describe in a sentence or two why your counterexample shows that the claim is false.\nNote: If the claim refers to multiple numbers like \\(x\\) and \\(y\\), a complete counterexample includes values for both \\(x\\) and \\(y\\).\n\n\\(\\forall x,y \\in \\mathbb{Z} \\;:\\; x^2 &lt; y^2 \\rightarrow x &lt; y\\).\n\nRecall that \\(\\forall x,y\\in \\mathbb{Z}\\) is a notation shortcut for \\(\\forall x \\in \\mathbb{Z}, \\forall y \\in \\mathbb{Z}\\).\n\n\\(\\lnot \\exists x \\in \\mathbb{Z}\\;:\\; x | 51\\)\n\nRecall that \\(a|b\\) means that \\(a\\) is a divisor of \\(b\\) with remainder \\(0\\).\n\n\\(\\forall x, y \\in \\mathbb{Z} \\;:\\; x^2 + y^2 \\text{ is an even number}\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/style-1.html",
    "href": "content/problems/proofs/style-1.html",
    "title": "",
    "section": "",
    "text": "Here are three facts about modular congruence which will become important for us later in the course.\n\nSymmetry: For any \\(a, b, n \\in \\mathbb{Z}\\), if \\(a \\equiv b \\pmod{n}\\), then \\(b \\equiv a \\pmod{n}\\).\n\nReflexivity: For any \\(a, n \\in \\mathbb{Z}\\), it is the case that \\(a \\equiv a \\pmod{n}\\).\n\nTransitivity: For any \\(a, b, c, n \\in \\mathbb{Z}\\), if \\(a \\equiv b \\pmod{n}\\) and \\(b\\equiv c \\pmod{n}\\), then \\(a \\equiv c \\pmod{n}\\).\n\n\nPart A\nHere are “proofs” of Symmetry and Reflexivity. These proofs contain the right general idea, but they are written very poorly.\nSymmetry: \\(a, b, n \\in \\mathbb{Z}\\). \\(a - b = cn\\), \\(b - a = -cn\\). \\(b = a \\pmod{n}\\).\nReflexivity: \\(a-a=0\\), since this is true for any integer. It is \\(=\\) to \\(0n\\).\nFix these proofs. For each of the two, go down the checklist in Chapter 5.3 of Book of Proof. Using this checklist, write correct, beautiful proofs that does not violate any of the rules in the list.\n\n\nPart B\nWrite a correct, beautiful proof of Transitivity which does not violate any of the rules in the list.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/contradiction.html",
    "href": "content/problems/proofs/contradiction.html",
    "title": "",
    "section": "",
    "text": "Prove that \\(\\sqrt{6}\\) is not a rational number; i.e. there are no integers \\(a,b \\in \\mathbb{Z}\\) such that \\(\\sqrt{6} = \\frac{a}{b}\\).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/transitivity.html",
    "href": "content/problems/asymptotics/transitivity.html",
    "title": "",
    "section": "",
    "text": "We can think of the statement \\(f(n) \\in O(g(n))\\) as a relation between functions, which we could write \\(fRg\\). Using the definition of \\(f(n) \\in O(g(n))\\) (Definition 1 in Rosen), write a careful proof that this relation is transitive. In your proof, you should construct witnesses demonstrating that \\(f(n) \\in O(h(n))\\) in terms of other witnesses that follow from the assumption that \\(f(n) \\in O(g(n))\\) and \\(g(n) \\in O(h(n))\\).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/polynomial-bounds-1.html",
    "href": "content/problems/asymptotics/polynomial-bounds-1.html",
    "title": "",
    "section": "",
    "text": "Find the smallest integer \\(p\\) such that \\(f(n) \\in O(n^p)\\) for each of the following choices of the function \\(f\\). You may assume that \\(n \\in \\mathbb{N}\\). You should explain your answers but do not need to write formal proofs. You may find it useful to remember that \\(\\log n \\notin O(1)\\) and \\(\\log n \\leq n\\) for all \\(n\\).\n\n\\(f(n) = 3n^2\\)\n\\(f(n) = \\log n\\)\n\\(f(n) = n^2 \\log n\\)\n\\(f(n) = \\frac{\\log n}{n}\\)\n\\(f(n) = \\frac{n^3+2}{n^2 - n - 1}\\)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/quadratic-1.html",
    "href": "content/problems/asymptotics/quadratic-1.html",
    "title": "",
    "section": "",
    "text": "Write a careful proof that \\(\\frac{n^2 - 1}{2n+2} \\in O(n)\\). You may assume that \\(n \\in \\mathbb{N}\\). Your proof should include a choice of the witnesses \\(C\\) and \\(k\\) and an argument for why those witnesses work.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/log-n.html",
    "href": "content/problems/asymptotics/log-n.html",
    "title": "",
    "section": "",
    "text": "Which of the following functions is \\(O(\\log n)\\)? For each one that is \\(O(\\log n)\\), find witnesses, making an effor to choose \\(C\\) as small as you can. For any that are not \\(O(\\log n)\\), write a proof or calculation explaining why.\n\n\\(f(n) = \\log(n + 1)\\).\n\\(g(n) = \\log(n^2 + 1)\\).\n\\(h(n) = \\log (n^{100} + 1)\\).\n\\(\\ell(n) = \\left(\\log n\\right)^2\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/function-recursive-def.html",
    "href": "content/problems/relations/function-recursive-def.html",
    "title": "",
    "section": "",
    "text": "Consider the function \\(f:\\mathbb{N} \\rightarrow \\mathbb{N}\\) given by \\(f(1) = 1\\) and \\(f(n) = f(n-1) + n - 1\\).\n\nCompute \\(f(4)\\) by hand.\nWrite a recursive function in either Python or Java that implements this function. Use it to compute \\(f(4)\\) and check that you got the same result.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/mod.html",
    "href": "content/problems/relations/mod.html",
    "title": "",
    "section": "",
    "text": "Part A\nRecall that we write \\(x \\equiv y \\pmod{p}\\) for integers \\(x\\), \\(y\\), and \\(p\\) if there exists an integer \\(c\\) such that \\((x-y) = cp\\). For example, \\(16 \\equiv 2 \\pmod{7}\\) because \\((16 - 2) = 2\\times 7\\).\nWrite a complete, careful proof that, for any \\(p\\), the relation \\(\\;\\equiv \\pmod {p}\\) is an equivalence relation.\n\n\nPart B\nList all the equivalence classes of the relation \\(\\equiv \\pmod{3}\\). You can use either set-builder or roster notation.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/equivalence-relations-proof.html",
    "href": "content/problems/relations/equivalence-relations-proof.html",
    "title": "",
    "section": "",
    "text": "For each of the three relations below:\n\nState whether it is an equivalence relation or not.\nIf that relation is an equivalence relation, write a short proof including the correct vocabulary for all the properties that an equivalence relation must satisfy.\nIf not, explain which property of equivalence relations fails to be satisfied.\n\nFor each of the relations below, the domain is the integers \\(\\mathbb{Z}\\).\n\nPart A\nThe relation \\(aRb\\) means that \\(a - b &lt; 5\\).\n\n\nPart B\nThe relation \\(aRb\\) means that \\(a + b\\) is a multiple of 3.\nRecall that \\(x\\) is a multiple of \\(y\\) if there exists an integer \\(c\\) such that \\(x = cy\\).\n\n\nPart C\nThe relation \\(aRb\\) means that \\(ab \\geq 0\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/bop-11-3-4.html",
    "href": "content/problems/relations/bop-11-3-4.html",
    "title": "",
    "section": "",
    "text": "Let \\(A = \\{a, b, c, d, e\\}\\). Suppose that \\(R\\) is an equivalence relation on \\(A\\). Suppose that it is the case that \\(aRd\\), \\(bRc\\), \\(eRa\\), and \\(cRe\\). How many equivalence classes does \\(R\\) have?\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/bop-11-3-3.html",
    "href": "content/problems/relations/bop-11-3-3.html",
    "title": "",
    "section": "",
    "text": "Let \\(A = \\{a, b, c, d, e\\}\\). Suppose that \\(R\\) is an equivalence relation on \\(A\\). Suppose further that \\(R\\) has two equivalence classes, and that \\(aRd\\), \\(bRc\\), and \\(eRd\\). Fully describe \\(R\\) by either writing it as a set or drawing it.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/birth-months.html",
    "href": "content/problems/probability/birth-months.html",
    "title": "Part A",
    "section": "",
    "text": "Here is a list of probabilities describing the likelihood that a person in the UK was born in each of the 12 months of the year:\nprobs = [0.083, 0.078, 0.081, 0.081, 0.085, 0.083, 0.087, 0.086, 0.086, 0.084, 0.082, 0.083]\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\nFor example, there is an 8.3% chance that a UK individual was born in January, a 7.8% chance that they were born in February, etc. I compiled this data from a chart produced by Niall McCarthy on the website Statista. Technically, the data describes UK residents born during the 20-year period 1995-2014.\nYou may answer the following two questions using any tools you wish, although my advice is to write short Python programs.\nSuppose that two random citizens of the UK (born between 1995-2014) meet each other on the street. What is the probability that they were born in the same month?\n\nPart B\nSuppose that two people meet and tell you that they have the same birthmonth. What is the probability that their birthmonth is April, given this information?\n\n\nPart C\nSuppose that someone tells you that they share a birthmonth with the first random person they met on the street today. Does that make it more, less, or equally likely that they were born in April?\n\n\nPart D\nAre the events “being born in April” and “sharing a birthmonth with the first person you meet on the street” independent?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/bayes-2.html",
    "href": "content/problems/probability/bayes-2.html",
    "title": "",
    "section": "",
    "text": "Your friend has two coins. One of them (coin \\(A\\)) has probability of heads equal to \\(\\frac{1}{2}\\), while the other one (coin \\(B\\)) has probability of heads equal to \\(\\frac{3}{4}\\). Your friend picks one of the two coins with probability \\(\\frac{1}{2}\\), and then flips it 5 (independent) times. Find the probability that your friend chose coin \\(A\\), given the results, where the results are:\n\n\\(HHHHH\\)\n\\(HTTTH\\)\n\\(HHTTH\\)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html",
    "href": "content/problems/probability/cats-dogs.html",
    "title": "",
    "section": "",
    "text": "Corinne and Diana have decided that they are going to become owners of exactly \\(n \\in \\mathbb{N}\\) pets. Corinne loves cats, but Diana is devoted to dogs. They decide that, in order to adopt each of their \\(n\\) new pets, they are going to flip a coin that has probability of heads equal to \\(p\\). If the coin comes up heads, then they will adopt a cat; if the coin comes up tails, they will adopt a dog. The coin flips are independent – the outcome of one flip never impacts the outcome of the next.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html#introduction",
    "href": "content/problems/probability/cats-dogs.html#introduction",
    "title": "",
    "section": "",
    "text": "Corinne and Diana have decided that they are going to become owners of exactly \\(n \\in \\mathbb{N}\\) pets. Corinne loves cats, but Diana is devoted to dogs. They decide that, in order to adopt each of their \\(n\\) new pets, they are going to flip a coin that has probability of heads equal to \\(p\\). If the coin comes up heads, then they will adopt a cat; if the coin comes up tails, they will adopt a dog. The coin flips are independent – the outcome of one flip never impacts the outcome of the next."
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html#part-a",
    "href": "content/problems/probability/cats-dogs.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nSuppose that \\(n = 3\\) and \\(p = \\frac{1}{2}\\). Let \\(A\\) be the event that Corinne and Diana adopt at most one cat. Let \\(B\\) be the event that Corinne and Diana have both kinds of pet (i.e. at least one cat and at least one dog).\n\nFind \\(p(A)\\), \\(p(B)\\), and \\(p(A|B)\\).\nAre the events \\(A\\) and \\(B\\) independent?"
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html#part-b",
    "href": "content/problems/probability/cats-dogs.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nOh no! Corinne and Dianna have been given a rigged coin, which comes up heads with some unknown probability \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A.\n\nFind \\(p(A)\\) in terms of \\(p\\).\nFind \\(p(B)\\) in terms of \\(p\\).\n\nHint: The easiest way to do this is to compute the probability of the event of having no cats, and the probability of the event of having no dogs. Then, combine these using a probability rule to get \\(p(B)\\).\n\nFind \\(p(A \\cap B)\\) in terms of \\(p\\). Note that this is the event that Corinne and Diana adopt exactly one cat.\nFind \\(p(A|B)\\) in terms of \\(p\\).\nWrite down an equation in terms of \\(p\\) that must be true for the events \\(A\\) and \\(B\\) to be independent. You do not need to solve the equation."
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html#part-c",
    "href": "content/problems/probability/cats-dogs.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nSuppose now that Corinne and Diana are going to adopt \\(n\\) pets, where \\(n\\) is some natural number. They are still using a weighted coin with probability of heads equal to \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A:\n\nEvent \\(A\\) is that Corinne and Diana adopt at most one cat.\nEvent \\(B\\) is the event that Corinne and Diana adopt at least one cat and at least one dog.\n\nCompute \\(p(A)\\), \\(p(B)\\), and \\(p(A\\cap B)\\), and \\(p(A|B)\\).\nHints:\n\nFor \\(A\\), compute the probability of the event that Corinne and Diana adopt zero cats, then the probability that they adopt exactly one cat.\nFor \\(B\\), first compute the probability that Corinne and Diana adopt zero cats (all dogs), and then the probability that they adopt zero dogs (all cats).\nFor \\(A \\cap B\\), note that this event requires exactly one cat. Imagine that we pick this cat first. Then, from the remaining \\(n-1\\) pets, all of them must be dogs."
  },
  {
    "objectID": "content/problems/probability/cats-dogs.html#part-d",
    "href": "content/problems/probability/cats-dogs.html#part-d",
    "title": "",
    "section": "Part D",
    "text": "Part D\nUnder the same conditions as in Part C, compute a formula for the probability that Corinne and Diana adopt exactly \\(k\\) cats.\nHint: Your final formula should involve our friend the binomial coefficient!"
  },
  {
    "objectID": "content/problems/probability/dna-testing.html",
    "href": "content/problems/probability/dna-testing.html",
    "title": "",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/dna-testing.html#introduction",
    "href": "content/problems/probability/dna-testing.html#introduction",
    "title": "",
    "section": "Introduction",
    "text": "Introduction\nForensic DNA evidence has become an important tool in criminal trials, used frequently by both prosecution and defense. Although DNA is unique to each individual, damage to samples as well as human error mean that DNA testing can still generate false matches with individuals entirely unrelated to the situation at hand.\nSuppose that a DNA test has a 0.1% false positive rate. This means that, in a population of 1,000 people who did not contribute that DNA sample, testing will still erroneously match one of them (on average).  We’ll assume that DNA testing has a true positive rate of 100%: if a sample was contributed by an individual, DNA testing will always name that individual as one of the possible people who could have contributed that sample.This number, like every other element of this problem, is intended to be somewhat realistic but is fiction.\nDuring late spring, an unexpected wildfire breaks out in central Vermont. After several days, investigators visit the site of the fire and find a DNA sample, dated to around the time the wildfire started. Testing matches the sample to a person who was known to be visiting the central Vermont region during the time the fires started. The case is brought to court, with the prosecution claiming that the visitor started the fire."
  },
  {
    "objectID": "content/problems/probability/dna-testing.html#part-a",
    "href": "content/problems/probability/dna-testing.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nLet \\(A\\) be the event that the sample matches the suspect under DNA testing. Let \\(B\\) be the event that DNA sample truly belongs to the suspect.\nCompute the probabilities \\(p(A|B)\\) and \\(p(A|\\bar{B})\\) given the information about the reliability of DNA testing supplied above."
  },
  {
    "objectID": "content/problems/probability/dna-testing.html#part-b",
    "href": "content/problems/probability/dna-testing.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nThe prosecution argues that, since the false-positive rate of DNA testing is 1/1,000 = 0.1%, the probability \\(p(B|A)\\) that the DNA sample truly belongs to the suspect is 99.9%.\nWhat is wrong with the prosecution’s argument?"
  },
  {
    "objectID": "content/problems/probability/dna-testing.html#part-c",
    "href": "content/problems/probability/dna-testing.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nA statistical expert for the defense testifies that 1,000 people visited the site of the wildfire during the time-window in question, any of whom could have left a DNA sample.\nUse Bayes’ rule to compute an estimate of the probability that the suspect did indeed contribute the DNA sample, given that DNA testing produced a match to the suspect."
  },
  {
    "objectID": "content/problems/quantified-logic/demorgans.html",
    "href": "content/problems/quantified-logic/demorgans.html",
    "title": "",
    "section": "",
    "text": "Let \\(D = \\{a, b\\}\\). Let \\(P(x)\\) be an arbitrary predicate. Let \\(Q\\) be the proposition that both \\(P(a)\\) is true and \\(P(b)\\) is true.\n\nPart A\nWrite out \\(Q\\) in terms of \\(P\\), \\(a\\), and \\(b\\) using only logical operators like \\(\\lor\\), \\(\\land\\), \\(\\lnot\\), or \\(\\rightarrow\\). Don’t overthink this one.\n\n\nPart B\nNow write \\(Q\\) in terms of \\(P\\) using at least one quantifier (existential or universal), and without \\(\\lor\\) or \\(\\land\\). Make sure to specify the domain of the quantifier. Please ensure that negations \\(\\lnot\\) appear only directly before predicates, rather than e.g. outside parenthetical expressions.\n\n\nPart C\nWrite out \\(\\lnot Q\\) in terms of \\(P\\), \\(a\\), and \\(b\\) using only logical operators like \\(\\lor\\), \\(\\land\\), \\(\\lnot\\), or \\(\\rightarrow\\). Please ensure that negations \\(\\lnot\\) appear only directly before predicates, rather than e.g. outside parenthetical expressions.\n\n\nPart D\nNow write out \\(\\lnot Q\\) in terms of \\(P\\) using at least one quantifier (existential or universal) without \\(\\lor\\) or \\(\\land\\). Make sure to specify the domain of the quantifier. Please ensure that negations \\(\\lnot\\) appear only directly before predicates, rather than e.g. outside parenthetical expressions.\n\n\nPart E\nYour forgetful friend can never remember how to negate quantifiers, but they do remember DeMorgan’s laws for propositional logic. Write a brief explanation for how your friend could use DeMorgan’s laws to remember the right formulas for negating quantifiers.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/implication-element-method.html",
    "href": "content/problems/quantified-logic/implication-element-method.html",
    "title": "",
    "section": "",
    "text": "Let \\(P(x)\\) and \\(Q(x)\\) be any predicates. Suppose further that you know that \\(P(x)\\rightarrow Q(x)\\). Define the sets: \\[\n\\begin{aligned}\n    A &= \\{x \\in \\mathbb{Z} : P(x)\\} \\\\\n    B &= \\{x \\in \\mathbb{Z} : Q(x)\\}\n\\end{aligned}\n\\]\n\nUse the element method to write a careful proof that \\(A \\subseteq B\\).\nSuppose further that \\(P(x) \\leftrightarrow Q(x)\\). Use the element method to prove that \\(A = B\\).\n\nNote: to prove that two sets \\(A\\) and \\(B\\) are equal, it is sufficient to show that \\(A \\subseteq B\\) and \\(B \\subseteq A\\).\n\n\nAn example of this scenario: let \\(P(x)\\) be the predicate “\\(x\\) is a prime number larger than 2” and let \\(Q(x)\\) be the predicate “\\(x\\) is an odd number.” We could use your proof structure to show that the set of prime numbers larger than 2 is a subset of the set of odd numbers.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/how-to-be-right.html",
    "href": "content/problems/quantified-logic/how-to-be-right.html",
    "title": "",
    "section": "",
    "text": "For each of the English statements below:\n\nExpress the statement using quantified predicate logic. Explicitly define any predicates you use, as well as your domain of quantification. If you make any interpretations of English language, state what they are and why. Your “translation” may not be perfect, but it’s ok as ong as you state your assumptions and interpretations.\nNegate the expression, simplifying the result far enough so that negation \\(\\lnot\\) symbols appear only directly before predicates (so, \\(\\lnot P(x)\\) is ok but \\(\\lnot (\\exists x \\;:\\; P(x))\\) is not).\nTranslate the negated version back into English.\nComment: in your view, is the original statement or its negation correct?\n\n\nNo one likes Mondays.\nEveryone in Vermont loves skiing!\n\nNobody’s perfect.\nStudents are successful in classes with active learning.\n\nfor this problem, please use the predicate \\(A(s, c)\\) to mean that student \\(s\\) is successful in class \\(c\\). Define two appropriate domains of quantification.\n\n\nFinally, decide which if any of these statements express a “kernel of truth” or a feeling that resonates with you. What would Dr. Cheng suggest with those statements?\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/implications.html",
    "href": "content/problems/quantified-logic/implications.html",
    "title": "",
    "section": "",
    "text": "Let \\(P(x)\\) be some predicate, and let \\(D\\) be some set. For each of the following statements below, determine whether the deduction is valid for any choice of the set \\(D\\) and explain why. You don’t have to write a formal mathematical proof, but a sentence or two would be appropriate. If there is some \\(D\\) for which the deduction is not valid, give an example.\n\n\\(\\forall x \\in D: P(x)\\) implies that \\(\\exists x \\in D: P(x)\\).\n\\(\\forall x \\in D: P(x)\\) implies that \\((x \\in D) \\rightarrow P(x)\\).\n\\(\\exists x \\in D : P(x)\\) implies that \\(|D| \\geq 1\\).\n\\((\\forall x \\in D: P(x)) \\land (y \\in D)\\) implies that \\(P(y)\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/string-sequences-2.html",
    "href": "content/problems/counting/string-sequences-2.html",
    "title": "",
    "section": "",
    "text": "Note that this problem continues on to the next page.\nConsider the set \\(A\\) of all strings of letters \\(a\\)–\\(f\\) of length \\(6\\). A few elements of this set are \\(dcebac\\), \\(ebaafe\\), and \\(abeafa\\).\nWhat is the cardinality of each of the following sets? Please indicate which of the principles of multiplication, addition, or inclusion-exclusion you have used in each part.\n\nPart A\nThe set \\(A\\) itself.\n\n\nPart B\nThe set \\(B \\subseteq A\\) of strings of length \\(6\\) in which no elements are repeated.\n\n\nPart C\nParts D and E are on the next page\nThe set \\(C \\subseteq A\\) of strings which contain the substring \\(fab\\).\n\n\nPart D\nThe set \\(D \\subseteq A\\) of strings which contain the substring \\(fab\\) or the substring \\(feebb\\) (or both).\n\n\nPart E\nThe set \\(E\\) of strings which contain either the substring \\(fab\\) or the substring \\(baff\\) (or both).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/noonies.html",
    "href": "content/problems/counting/noonies.html",
    "title": "",
    "section": "",
    "text": "Consider the All Day Menu at Noonie’s Deli here in Middlebury, VT.\nThis menu includes three main sections:\nFor the purposes of this problem, a meal means either a sandwich or salad.\nUse the menu and the principles of multiplication, addition/summation, and inclusion-exclusion to answer the following questions.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-a",
    "href": "content/problems/counting/noonies.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nNia and Marcus are going to order a meal from Noonie’s. Nia only eats sandwiches, but doesn’t want to go through the hassle of designing her own. Marcus only eats salads.\nHow many distinct ways are there for Nia and Marcus to order their meal?"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-b",
    "href": "content/problems/counting/noonies.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nLuis likes both salads and sandwiches, but doesn’t want to go through the hassle of designing their own. He’ll order either a salad or a sandwich, but not both.\nHow many ways are there for Luis to order a meal?"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-c",
    "href": "content/problems/counting/noonies.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nMaia wants to make her own custom sandwich. She’s happy with any of the main ingredients, but doesn’t want to pay extra for premium breads, additional vegetables, or extras.\nHow many ways are there for Maia to order her custom sandwich?"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-d",
    "href": "content/problems/counting/noonies.html#part-d",
    "title": "",
    "section": "Part D",
    "text": "Part D\nLinh is vegan and doesn’t want to pay for any extras.\nHow many ways are there for Linh to order her custom sandwich?"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-e",
    "href": "content/problems/counting/noonies.html#part-e",
    "title": "",
    "section": "Part E",
    "text": "Part E\nHiroki wants to make a custom sandwich. He’s willing to have one with either a premium bread OR an extra (like avocado or hummus), but not both. He’s also willing to make a custom sandwich with neither a premium bread nor extras. Hiroki doesn’t want any extra vegetables.\nHow many ways are there for Hiroki to order his custom sandwich?"
  },
  {
    "objectID": "content/problems/counting/noonies.html#part-f",
    "href": "content/problems/counting/noonies.html#part-f",
    "title": "",
    "section": "Part F",
    "text": "Part F\nAryana wants a custom sandwich without any premium breads, extras. She thinks that pickled red onions really make roasted tomatoes taste great, and she isn’t willing to order a sandwich that includes only one of these two things: either the sandwich has both pickled red onions and roasted tomatoes, or it has neither.\nHow many ways are there for Aryana to order her custom sandwich?"
  },
  {
    "objectID": "content/problems/counting/word-reordering-2.html",
    "href": "content/problems/counting/word-reordering-2.html",
    "title": "",
    "section": "",
    "text": "Part A\nHow many distinct ways are there to reorder the letters in the word nonsense? Please write down your answer (it is not necessary to simplify) and a brief justification.\n\n\nPart B\nCompute the numerical value of \\(\\binom{5}{2}\\). Your result should be an integer and not contain any binomial coefficients or factorial (!) symbols.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/word-reordering-1.html",
    "href": "content/problems/counting/word-reordering-1.html",
    "title": "",
    "section": "",
    "text": "In the video “How many ways are there to reorder the word MISSISSIPPI?” by Dr. Trefor Bazett, Dr. Bazett computes the number of reorderings as follows. First he considers the number of places to put all the “S”s, then all the “I”s, then the two “Ps”, and finally the “M”. The resulting expression is\n\\[\n\\begin{aligned}\n    \\binom{11}{4} \\binom{7}{4} \\binom{4}{2} \\binom{1}{1}\\;.\n\\end{aligned}\n\\tag{1}\\]\n\nPart A\nFind the mistake in Dr. Bazett’s solution. Describe what the error is and write down the correct solution!\nYes, math profs make mistakes too…\n\n\nPart B\nPerform the same analysis as Dr. Bazett, but start by placing the “M”, then the two “P”s, then the four “I”s, and then the four “S”s. You should get an expression that is similar to your corrected answer in Part A, including some of the same numbers, but in different places.\n\n\nPart C\nUsing the formula for \\(\\binom{n}{k}\\), write a calculation to show that your answer in Part B agrees with (is the same number as) Dr. Bazett’s solution in Equation 1 (after your correction from Part A).\n\n\nPart D\nThe method of combinatorial proof is used to show that two expressions are equal by demonstrating that they are different ways of counting the same thing. Use a combinatorial proof to show that, for any integers \\(n\\), \\(k\\), and \\(j\\) such that \\(k + j \\leq n\\),\n\\[\n\\begin{aligned}\n    \\binom{n}{k}\\binom{n-k}{j} = \\binom{n}{j}\\binom{n-j}{k}\\;.\n\\end{aligned}\n\\]\nNote: it is possible to do this with algebra, but please don’t! The combinatorial proof is simpler and nicer.\nHint: consider the number of ways to reorder a word of length \\(n\\) containing only three kinds of distinct letters.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/string-sequences.html",
    "href": "content/problems/counting/string-sequences.html",
    "title": "",
    "section": "",
    "text": "Consider the set \\(A\\) of all strings of letters \\(a-f\\) of length \\(5\\). Here are a few elements of this set:\n\n\\(dcbac\\)\n\\(ebafe\\)\n\\(abafa\\)\n\nWhat is the cardinality of each of the following sets? (This is another way of asking how many strings there are with the specified property)\n\n\\(A\\) itself, the set of all strings of letters \\(a-f\\) of length \\(5\\).\n\\(B\\), the subset of \\(A\\) in which strings contain no repeated letters.\n\\(C\\), the subset of \\(A\\) in which every sequence starts with the three letters “\\(bee\\)”.\n\\(D\\), the subset of \\(A\\) in which every sequence either starts with “\\(bee\\)” or ends with “\\(eab\\),” or both.\n\\(E\\), the subset of \\(A\\) in which every sequence either starts with “\\(bee\\)” or ends with “\\(cab\\)”, or both.\n\\(F\\), the subset of \\(B\\) (the set of strings with no repeated letters) which do not contain the substring “\\(bad\\)” in any position.\n\nHint: figure out how many strings contain the substring “\\(bad\\)” and then subtract this number from the cardinality of \\(B\\).\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html",
    "href": "assignments/labs/04-lattice-paths-sol.html",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#collaboration-statement",
    "href": "assignments/labs/04-lattice-paths-sol.html#collaboration-statement",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice using binomial coefficients and the principles of addition, multiplication, and inclusion-exclusion to count lattice paths in special scenarios.\nYou will implement a Python function for general lattice path-counting and check its correctness against known mathematical results.\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#general-instructions",
    "href": "assignments/labs/04-lattice-paths-sol.html#general-instructions",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "General Instructions",
    "text": "General Instructions\nUnlike most labs, in this one it’s normal to spend time looking at your computer and typing. Please make sure to work with your group and not proceed to the next part until all group members are comfortable with the work you’ve done on the previous part."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#part-b",
    "href": "assignments/labs/04-lattice-paths-sol.html#part-b",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part B",
    "text": "Part B\nYes, Part B is actually at the front of the lab! Right now, you should just run the code cell below (and do so each time you open the lab), but otherwise you don’t need to do anything until you’ve completed Part A.\n\nB.1\nBelow, I’ve partially implemented the function count_lattice_paths, which accepts a lattice L and returns the number of paths from the bottom left to the top right.\nIn order to do this, you are going to use a recurrence relation which generalizes the recurrence relation for binomial coefficients in DMOI 1.2. Let \\(p_{i,j}\\) denote the number of lattice paths from cell \\((0,0)\\) to cell \\((i-1,j-1)\\) on the lattice (we’re starting at \\((0, 0)\\) and subtracting 1 due to Python’s zero-based indexing). Then,\n\\[\np_{i,j} =\n\\begin{cases}\n    0 &\\quad (i,j) \\text{ is impassable} \\\\\n    1 &\\quad (i,j) = (0,0) \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{i-1,0} &\\quad j = 0 \\text{ and } i &gt; 0 \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{0,j-1} &\\quad i = 0 \\text{ and } j &gt; 0 \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{i-1,j} + p_{i, j-1} &\\quad i,j &gt; 0 \\text{ and } (i,j) \\text{ is passable}\n\\end{cases}\n\\]\nIn the code block below, please fill in an implementation of this logic in the specified parts of the code. I have handled the first case (if \\((i,j)\\) is impassable) and one of the other cases for you as an example. You need to fill in the other three. In order to work correctly, each branch of your if-statement should save the correct result to a variable called p as illustrated in the example.\n\n\ndef count_lattice_paths(L):\n    \"\"\"\n    return the number of lattice paths from the bottom left to the top right of a lattice L, specified as a binary np.array in which 0s represent impassable cells.\n    \n    params: \n        L, np.array, a binary array specifying the lattice and obstructions. 1s are passable cells and 0s are impassable cells. \n        \n    return: \n        float, the number of paths in the lattice from the bottom left to the top right that do not pass through any impassable cells. \n\n    \"\"\"\n    \n    # return(\"count_lattice_paths is not implemented: you'll come back to this in Part H\")\n\n    # construct a new array which will hold the path counts\n    P = np.zeros_like(L)\n    \n    # loop through the elements of this array\n    for i in range(P.shape[0]):\n        for j in range(P.shape[1]):\n            \n            # if cell is impassable, there are 0 paths to that cell\n            if np.flip(L,0)[i, j] == 0:\n                p = 0\n\n            # otherwise, if cell is passable: \n            else: \n                if (i == 0) and (j != 0):\n                    p = P[i, j-1]\n                # your code here! Use the \n                # math description above to compute the correct value of \n                # p depending on the values of i and j. \n                elif (i != 0) and (j == 0):\n                    p = P[i-1, j]\n                elif (i != 0) and (j != 0):\n                    p = P[i, j-1] + P[i-1,j] \n                else: \n                    p = 1\n            \n            # don't touch anything below   \n            P[i, j] = p\n    return P[-1,-1]   \n\n\n\nB.2\nTest your code by re-running the code blocks in Part A in order. You are looking for exact agreement between your “by-hand” code using binomial coefficients and the result of your implementation of count_lattice_paths. If there is any difference between the two answers, then something is off with either your math or your code.\nYou are done with Part B when you have run all the Part A code and found exact agreement between your binomial coefficients and your count_lattice_paths implementation. You do not need to write any additional commentary or code in Part B. Once you’ve found exact matches for every example in Part A, you are ready to move on to Part C.\nNote: it is normal for this to be a nonlinear and occasionally frustrating process that requires you to revisit both your mathematical reasoning and your code."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#part-a",
    "href": "assignments/labs/04-lattice-paths-sol.html#part-a",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part A",
    "text": "Part A\nFor each of the following subparts, do the following:\n\nRun the provided code block to download and view the lattice.\nUsing math, write an expression describing the number of lattice paths from the blue dot to the orange dot. Give a short explanation of your answer.\n\nYou can typeset binomial coefficients like this: $\\binom{n}{k}$ renders as \\(\\binom{n}{k}\\).\n\nWrite and run a Python expression using the binom function from the scipy package to evaluate your mathematical expression.\n\nYou should assign the result to a variable called number_of_paths_by_hand, which is assigned value -1 in the script currently.\nInclude a call print(count_lattice_paths(L)) right below your calculation. We will use this after we complete Part H.\n\n\nUsing binomial coefficients: I’ve visualized the lattices a little bit differently than Levin does in DMOI. In particular, we assume that we start on grid square (1, 1). This means that:\n\n\n\n\n\n\nTheorem: In a grid of size \\(m\\) rows and \\(n\\) columns with no obstructions, the number of paths from the bottom left corner to the top right corner is \\(\\binom{m+n-2}{m-1}\\). This number is the same as \\(\\binom{m+n-2}{n-1}\\).\n\n\n\nHere’s an example of a fully-worked solution. Your solutions to the other problems should look very similar.\n\nA.0\n\n# 1. run the code\nL = read_lattice(\"A0\")\nshow_lattice(L)\n\nThis lattice has 5 rows and 8 columns.\n\n\n\n\n\n\nMathematical derivation\nFrom the theorem given above, we know that the number of lattice paths through a lattice with \\(m\\) rows and \\(n\\) columns is \\(\\binom{m + n - 2}{m-1}\\). So, the number of lattice paths in this case is \\(\\binom{8+5-2}{5-1} = \\binom{11}{4}\\).\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\n\n# You only need to change the line directly below this comment with your calculation. \nnumber_of_paths_by_hand = binom(11, 4)\n\n# no need to touch any of these lines\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nBy hand  : 330.0 paths\nFunction : 165518563019223 paths\n\n\n\n\n\nA.1\n\n# 1. run the code\nL = read_lattice(\"A1\")\nshow_lattice(L)\n\nThis lattice has 5 rows and 8 columns.\n\n\n\n\n\n\nMathematical derivation\n\n\n\n\n\n\nThere’s a top-left region and a bottom-left region, with only one way in and out of each. The bottom-left region has 2 rows and 5 columns, while the top-right region has 3 rows and 3 columns. We can only go in one of the two regions (and not both), so the principle of addition applies. The number of ways to go through the top-left region is \\(\\binom{3+3-2}{3-1} = \\binom{4}{2}\\) and the number of ways to go through the bottom right is \\(\\binom{5+2-2}{2-1} = \\binom{5}{1}\\). By the principle of addition, we can add these two together: the total is\n\\[\\binom{4}{2} + \\binom{5}{1}\\]\n\n\n\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = binom(4, 2) + binom(5, 1)\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nBy hand  : 11.0 paths\nFunction : 11.0 paths\n\n\n\n\n\nA.2\n\n# 1. run the code\nL = read_lattice(\"A2\")\nshow_lattice(L)\n\nThis lattice has 5 rows and 8 columns.\n\n\n\n\n\n\nMathematical derivation\n\n\n\n\n\n\nWe start in a rectangular region of size \\(3\\times 5\\). There are \\(\\binom{3+5-2}{3-1} = \\binom{6}{2}\\) ways to traverse this region. Once we get to the end of that region, we find ourselves in a new region of size \\(3\\times 4\\), and there are \\(\\binom{3+4-2}{3-1} = \\binom{5}{2}\\) ways to traverse this region. Since we traverse these two regions in sequence, the principle of multiplication applies and our final answer is\n\\[\n\\binom{6}{2} \\binom{5}{2}\n\\]\n\n\n\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = binom(6, 2) * binom(5, 2)\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nBy hand  : 150.0 paths\nFunction : 150.0 paths\n\n\n\n\n\nA.3\nHint: this one is quick if you can figure out the right way to use your answers in A.0 and A.2.\n\n# 1. run the code\nL = read_lattice(\"A3\")\nshow_lattice(L)\n\nThis lattice has 5 rows and 8 columns.\n\n\n\n\n\n\nMathematical derivation\n\n\n\n\n\n\nThis grid has the same size (\\(5\\times 8\\)) as the grids in A.0 and A.2. We need to count the number of lattice paths that don’t pass through the shaded cell. But this is exactly the same shaded cell that all paths from A.2. did have to pass through. So, our answer is just the total from A.0 minus the number of paths that passed through this point in A.2. So, this is\n\\[\n\\binom{11}{4} - \\binom{6}{2} \\binom{5}{2}\n\\]\n\n\n\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = binom(11,4) - binom(6, 2) * binom(5, 2)\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nBy hand  : 180.0 paths\nFunction : 180.0 paths\n\n\n\n\n\nA.4\n\n# 1. run the code\nL = read_lattice(\"A4\")\nshow_lattice(L)\n\nThis lattice has 10 rows and 16 columns.\n\n\n\n\n\n\nMathematical derivation\n\n\n\n\n\n\nThere are four rectangular regions: a bottom, middle, and top region on the left, and a region on the right. Let’s call these \\(A\\), \\(B\\), \\(C\\), and \\(D\\). If I travel through \\(A\\), then I must travel through \\(D\\). If I do not travel through \\(A\\), then I can travel through \\(B\\) or \\(C\\) (but not both). So, my overall setup is:\n\\[\nP_A P_D + P_B + P_C\\;,\n\\]\nwhere \\(P_A\\) means the number of paths through \\(A\\). Now we can just use binomial coefficients:\n\\[\n\\begin{aligned}\nP_A &= \\binom{11 + 2 - 2}{2 - 1} &=\\quad& \\binom{11}{1} \\\\\nP_B &= \\binom{7 + 2 - 2}{2 - 1}  &=\\quad& \\binom{7}{1} \\\\\nP_C &= \\binom{5 + 3 - 2}{3 - 1}  &=\\quad& \\binom{6}{2} \\\\\nP_D &= \\binom{6 + 3 - 2}{3 - 1}  &=\\quad& \\binom{7}{2}\n\\end{aligned}\n\\]\n\n\n\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = binom(11,1)*binom(7,2) + binom(7, 1) + binom(6, 2)\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nBy hand  : 253.0 paths\nFunction : 253.0 paths\n\n\n\n\n\nOnce you’re done with Part A…\nPlease circle back to the beginning of the lab to work on Part B. Move on to Part C once you’re done with Part B.2."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#part-c",
    "href": "assignments/labs/04-lattice-paths-sol.html#part-c",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part C",
    "text": "Part C\n\nC.1\nHere is the “challenge” lattice from the beginning of the assignment. Use your function count_lattice_paths to find the number of paths in this lattice. I do not recommend trying this by hand.\n\nL = read_lattice(\"challenge\")\nshow_lattice(L)\n\nThis lattice has 10 rows and 16 columns.\n\n\n\n\n\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nFunction : 888.0 paths\n\n\n\n\nC.2\nHere’s a large lattice with many random obstacles. Run the code to generate the lattice, and then use count_lattice_paths to count the number of paths.\n\ndef random_lattice(rows = 20, columns = 30, obstacle_density = 0.1):\n    np.random.seed(12)\n    L = 1*(np.random.rand(rows, columns) &gt; obstacle_density)\n    L[0, L.shape[1]-1] = 1\n    L[L.shape[0]-1, 0] = 1\n    return(L)\n\nL = random_lattice(30, 40, 0.2)\nshow_lattice(L)\n\n\n\n\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\nFunction : 165518563019223 paths"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths-sol.html#part-d",
    "href": "assignments/labs/04-lattice-paths-sol.html#part-d",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part D",
    "text": "Part D\nTake the lattice in Part C that you generated. Imagine for a moment that you were going to solve the lattice path counting problem by writing an algorithm that actually found all the possible lattice paths and counted them up.\n\nD.1\nSuppose that it took your algorithm \\(1\\times 10^{-9}\\) seconds to compute each path. Approximately how long would it take your algorithm to find all the lattice paths in the lattice above? Please give your answer in units of days. You might find it helpful to do some computations in Python with a new cell block.\n\ndays = count_lattice_paths(L) / (10**9 * 60 * 60 * 24) # this many days\nprint(f\"Approximately {round(days)} days\")\n# student solutions might differ due to random generation of the lattice\n\nApproximately 2 days\n\n\n\n\nD.2\nRun the code cell below. Python will run count_lattice_paths on the lattice L several times and compute the mean runtime.\n\n%timeit count_lattice_paths(L)\n\n3.02 ms ± 28.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\nHow much faster is our implementation of count_lattice_paths? Please give your response in orders of magnitude. An order of magnitude is a multiple of 10. For example, 7 is two orders of magnitude smaller than 700.\nHints:\n\nIf you first run the line from math import log10 then you’ll be able to use the log10 function to compute the log base-10 of \\(x\\). This is one way to calculate the order of magnitude change.\nA millisecond (ms) is 1/1000 seconds.\n\n\n\n\n\n\n\n\nfrom math import log10\nseconds_for_manual_alg = count_lattice_paths(L) / (10**9) \nseconds_for_count_lattice_paths = 3*10**(-3) \n\norder = log10(seconds_for_manual_alg / seconds_for_count_lattice_paths)\nprint(f\"We have saved roughly {round(order)} orders of magnitude.\")  \n\nWe have saved roughly 8 orders of magnitude.\n\n\nStudent answers may differ due to randomness in the lattice generation."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#collaboration-statement",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#collaboration-statement",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice performing mathematical operations on sets, especially the cardinality of sets formed from other sets.\nYou will continue to practice with writing mathematics and creating symbols with \\(\\LaTeX\\).\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#part-a",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#part-a",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part A",
    "text": "Part A\n\nExercise A.1\nDraw a Venn diagram with two intersecting sets \\(A\\) and \\(B\\). By referring to your Venn diagram, write an explanation of the inclusion-exclusion formula:\n\\[\n\\lvert A \\cup B \\rvert = \\lvert A \\rvert + \\lvert B \\rvert - \\lvert A \\cap B \\rvert.\n\\]\nYou should write your explanation on the whiteboard beside your diagram. Take a picture of your diagram and explanation and save it somewhere where you can find it again.\n\n\n(After Lab)\nBased on your whiteboard work, give a carefully edited, typed version of your explanation, using mathematical symbols as appropriate.\n\n\n\n\n\n\nSolution\nThe general idea is that to compute \\(|A \\cup B|\\), we can add together the areas of the circles for \\(A\\) and \\(B\\) individually, but account for the overlap \\(A\\cap B\\). This overlap is contained once in \\(A\\) and once in \\(B\\), and so we need to subtract \\(|A\\cap B|\\) to avoid overcounting."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#part-b",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#part-b",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part B",
    "text": "Part B\n\nExercise B.1\nDraw a Venn diagram with 3 intersecting sets \\(A\\), \\(B\\), and \\(C\\). Label each region of the diagram. Use your Venn diagram to conjecture an inclusion-exclusion formula for the expression \\(\\lvert A \\cup B \\cup C\\rvert\\). You should explain your formula but you don’t need to write a formal proof.\nTake a picture of your Venn diagram and your whiteboard explanation and save it somewhere where you can find it again.\n\n\n(After Lab)\nUpload your Venn diagram in this notebook and refer to it when writing up your explanation.\n\n\n\n\n\n\nSolution\nHere is a typed heuristic explanation:\nTo compute \\(|A \\cup B \\cup C\\), we can start by adding together the areas of all the individual regions \\(|A| + |B| + |C|\\). As in the two-set inclusion-exclusion formula, this results in all the two-set intersections being double-counted. So, we should subtract \\(|A\\cap B|\\), \\(|A \\cap C|\\), and \\(|B\\cap C|\\). But what about the very middle, the intersection \\(A \\cap B \\cap C\\)? That was included once in each of \\(A\\), \\(B\\), and \\(C\\), so in our first stage we counted it three times. But it’s also included in \\(A \\cap B\\), \\(A \\cap C\\), and \\(B\\cap C\\), which means we subtracted it three times. We want to count it exactly once, so we should add it back once in the formula.\nThe final inclusion-exclusion formula for three intersecting sets is therefore\n\\[\n|A \\cup B \\cup C| = |A| + |B| + |C| - |A \\cap B| - |A \\cap C| - |B \\cap C| + |A \\cap B \\cap C|.\n\\]"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#part-c",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#part-c",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part C",
    "text": "Part C\nNow let’s perform an algebraic derivation of the 3-set inclusion-exclusion formula. To do this, let’s define \\(D = B \\cup C\\). Then, we can write\n\\(\\lvert A \\cup B \\cup C\\rvert = \\lvert A \\cup D\\rvert\\;.\\)\n\nFirst, apply the two-set inclusion-exclusion formula to the righthand side of this expression.\nThen, apply the two-set inclusion exclusion formula again to simplify the expressions that result. You may need to do this several times times.\nDuring this process, you will find it useful to use one of the distributive laws:\n\n\\[\nA \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)\n\\]\n\nExercise C.1\nFollowing this strategy write a derivation (a computation leading to the desired formula) on the whiteboard. Justify each of your steps by citing a formula or identity that we have introduced in the course so far. Take a picture of your derivation once you’re done.\n\n\n(After Lab)\nType your derivation below. If you’d like to write sequential equations, which are very suitable for calculations like this one, click into this Markdown cell to see how I did this:\n\\[\n\\begin{aligned}\nx &= y \\\\\n  & = z\\;.\n\\end{aligned}\n\\]\n\n\n\n\n\n\nSolution: A complete solution should look roughly like this.\n\\[\n\\begin{aligned}\n|A \\cup B \\cup C|  &= |A \\cup D| & \\text{(definition of $D$)} \\\\\n                   &= |A| + |D| - |A \\cap D| &\\text{(inclusion-exclusion formula)} \\\\\n                   &= |A| + |B \\cup C| - |A \\cap (B \\cup C)| &\\text{(definition of $D$)} \\\\\n                   &= |A| + |B| + |C| - |B \\cap C| \\\\\n                   &\\quad - |A \\cap (B \\cup C)| &\\text{(inclusion-exclusion formula)} \\\\\n                   &= |A| + |B| + |C| - |B \\cap C| \\\\\n                   &\\quad - |(A \\cap B) \\cup (A \\cap C) | &\\text{(distributive law)} \\\\\n                   &= |A| + |B| + |C| - |B \\cap C| - |A\\cap B|  \\\\\n                   &\\quad \\quad - |A\\cap C| + |(A\\cap B) \\cap (A \\cap C)|  &\\text{(inclusion-exclusion formula)} \\\\\n                   &= |A| + |B| + |C| - |B \\cap C| - |A\\cap B|  \\\\\n                   &\\quad - |A\\cap C| + |A\\cap B\\cap C|  &\\text{($A \\cap A = A$)}\n\\end{aligned}\n\\]\nCalculations that are correct but combine steps or do not justify each step result in an M. An E requires step-by-step reasoning with justifications in each line."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#part-d",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#part-d",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part D",
    "text": "Part D\nYou should run each of the Python cells in this part, including the ones that don’t require you to write any new code.\nNow let’s test our mathematical theory against computational experiments.\nThe following function will compute the size of a union of any number of provided sets.\n\ndef union_size(A, *other_sets):\n    return len(A.union(*other_sets))\n\nHere it is in action:\n\nA = {1, 2, 3}\nB = {2, 3, 4, 5}\nC = {3, 4, 7}\n\nunion_size(A, B, C) # union is {1, 2, 3, 4, 5, 7}\n\n6\n\n\nNow we’re going to write a function that can compute the size of a union using using a different method, using inclusion-exclusion.\nTo get you started on this function, I’ve populated a function that, when one or more sets are passed as arguments, prints all possible combinations of those sets. Then, it returns 0.\n\nfrom itertools import combinations\ndef ie_union_size(A, *other_sets):\n    union_size = 0\n    all_sets = other_sets + (A,)\n    for i in range(1, len(all_sets) + 1):\n        for sets in combinations(all_sets, i):\n            print(sets)\n    return union_size        \n\nHere it is in action:\n\nx = ie_union_size(A, B, C)\nprint(f\"the current return value is {x}\")\n\n({2, 3, 4, 5},)\n({3, 4, 7},)\n({1, 2, 3},)\n({2, 3, 4, 5}, {3, 4, 7})\n({2, 3, 4, 5}, {1, 2, 3})\n({3, 4, 7}, {1, 2, 3})\n({2, 3, 4, 5}, {3, 4, 7}, {1, 2, 3})\nthe current return value is 0\n\n\n\nExercise D.1\nModify this the ie_union_size function so that it correctly computes the size of the union of the input sets using the inclusion-exclusion formula. Your solution should ensure that ie_union_size returns the correct result whenever it is passed either 2 or 3 arguments. Show checks using the sets A, B, and C above to show that your function works in these cases.\nSpecifications:\n\nFor an M, it’s fine to use an if-statement in your solution. For an E, do not use any if-statements. You may find it helpful to run and think about the following line of code:\n\n[(-1)**(i+1) for i in range(1, 5)]\nHints:\n\nYou should add to the variable union_size using the syntax union_size += value_to_add.\nIt’s possible to solve this problem by replacing the print statement with a single careful line of code (under 80 characters), but it’s also ok to use more lines.\nWhen sets is a tuple of sets, the syntax sets[0].intersection(*sets[1:]) will compute the intersection of all the elements of sets.\n\n\n# your solution here \nfrom itertools import combinations\ndef ie_union_size(A, *other_sets):\n    union_size = 0\n    all_sets = other_sets + (A,)\n    for i in range(1, len(all_sets) + 1):\n        for sets in combinations(all_sets, i):\n            \n            # solution code\n            union_size += len(sets[0].intersection(*sets[1:]))*(-1)**(i+1)\n            \n    return union_size        \n\n\n# please add some checks to show that your solution agrees with union_size when passed either 2 or 3 sets. \n\n\n# solution tests. Any tests the student performs are fine provided that they cover both the two-set and the three-set cases. The tests should be designed so that they are successful if the answers agree exactly and unsuccessful if they do not agree exactly. Whether the student chooses to print something, use an if-statement, use different checks, etc. isn't too important. \n\nprint(ie_union_size(A, B) == union_size(A, B))\nprint(ie_union_size(A, B, C) == union_size(A, B, C))\n\nTrue\nTrue\n\n\n:::"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion-sol.html#part-e-optional-for-m-required-for-e",
    "href": "assignments/labs/02-inclusion-exclusion-sol.html#part-e-optional-for-m-required-for-e",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part E (optional for M, required for E)",
    "text": "Part E (optional for M, required for E)\nYou can skip this problem if you are satisfied with an M on this lab report. If you are aiming for an E, please complete it.\n\nExercise E.1\nShow a test of your implementation of ie_union_size against union_size when passed 4 and 5 arguments. If the two functions do not agree, modify union_size until they do agree.\nYou may find it helpful to think about the inclusion-exclusion formula for 4 sets, which reads:\n\\[\n\\begin{aligned}\n\\lvert A \\cup B \\cup C \\cup D \\rvert &= \\lvert A \\rvert + \\lvert B \\rvert + \\lvert C \\rvert + \\lvert D \\rvert \\\\\n&\\quad - \\lvert A \\cap B \\rvert - \\lvert A \\cap C \\rvert - \\lvert A \\cap D \\rvert \\\\\n&\\quad - \\lvert C \\cap C \\rvert - \\lvert B \\cap D \\rvert - \\lvert C \\cap D \\rvert \\\\\n&\\quad + \\lvert A \\cap B \\cap C \\rvert + \\lvert A \\cap B \\cap D \\rvert \\\\\n&\\quad + \\lvert A \\cap C \\cap D \\rvert + \\lvert C \\cap C \\cap D \\rvert \\\\\n&\\quad - \\lvert A \\cap B \\cap C \\cap D \\rvert\\;.  \n\\end{aligned}\n\\]\nCan you find a pattern that you can generalize and use in your solution? It’s not required to prove your pattern – we’ll learn more about how to do that later in the course.\n\n# Show your tests here using 4 and 5 arguments. \n# You can use A, B, and C from above, as well as the following two additional sets: \n\nD = {3, 6, 7, 8}\nE = {1, 3, 4, 5, 7}\n\n# your tests here\n\n# solution tests\nprint(ie_union_size(A, B, C, D) == union_size(A, B, C, D))\nprint(ie_union_size(A, B, C, D, E) == union_size(A, B, C, D, E))\n\nTrue\nTrue\n\n\n:::"
  },
  {
    "objectID": "assignments/labs/03-proof-practice.html",
    "href": "assignments/labs/03-proof-practice.html",
    "title": "Lab 3: Proof Practice",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/03-proof-practice.html#collaboration-statement",
    "href": "assignments/labs/03-proof-practice.html#collaboration-statement",
    "title": "Lab 3: Proof Practice",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice assessing which proof technique to use for a given problem.\nYou will continue to practice correctly typesetting proofs using the \\(\\LaTeX\\) typesetting system.\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/03-proof-practice.html#for-this-lab",
    "href": "assignments/labs/03-proof-practice.html#for-this-lab",
    "title": "Lab 3: Proof Practice",
    "section": "For This Lab",
    "text": "For This Lab\nThis is a lab in which you will practice choosing the correct proof technique for a given problem. By now, we have learned several proof techniques:\n\nElement Method\nDirect Proof\nProof by Contrapositive\nProof by Division into Cases\nProof by Contradiction\n\nEach of the problems below will ask you to write a proof. Please begin your proof by stating which proof technique you are using. Here are some examples of good starts:\n\nWe will prove the claim using the element method. Let \\(x \\in A\\)…\nWe will prove the claim by division into cases. Suppose first that \\(x\\) is negative…\nWe will prove the claim by contradiction. Suppose therefore that [thing to be proven] is not true. Then…"
  },
  {
    "objectID": "assignments/labs/03-proof-practice.html#how-many-proofs",
    "href": "assignments/labs/03-proof-practice.html#how-many-proofs",
    "title": "Lab 3: Proof Practice",
    "section": "How Many Proofs?",
    "text": "How Many Proofs?\nThere are a total of 5 problems on this lab. For an M, it is sufficient to submit high quality for 4 of them. For an E, please submit all 5."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html",
    "href": "assignments/labs/01-intro-and-truth-tables.html",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "",
    "text": "Learning Objectives:\nIn this lab,\nNote: This lab is different! During lab time, I will usually expect you not to work on your laptops, and instead work on whiteboards. Today, because typing mathematics is part of the learning goal, I want to make sure you have some time to practice that in class.\nWorking in Groups:\nDuring class, please make sure that every group member has completed and understood a part before moving on!\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-1",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-1",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 1",
    "text": "Exercise 1\nA group norm is a shared, mutually-agreed upon expectation to which all group members will be held. In this part of the activity, you’ll agree on several group norms and write them using Markdown formatting.\nFirst, you’re going to copy our core group norms. Make a new Markdown cell directly below this one. In that cell, use Markdown to replicate the following block of text.\n\n[Make a new Markdown cell right below this note!]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-2",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-2",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 2",
    "text": "Exercise 2\nNow, take 5 minutes to brainstorm at least 2 new group norms. Add them to your Markdown list above. You don’t need to copy your list down to this part."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-3",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-3",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 3",
    "text": "Exercise 3\nConsider the sentence “Either it will not rain or it will snow.”\n\nLet \\(p\\) be the proposition that it will rain.\nLet \\(q\\) be the proposition that it will snow.\n\nIn the markdown cell below, use math commands to write this sentence in logical symbols. You may wish to use the symbols \\lor, \\land, and \\lnot.\n[Your solution here!]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-4",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-4",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 4",
    "text": "Exercise 4\nMake truth tables for the following two expressions:\n\n\\(\\lnot (p \\land q)\\)\n\\(\\lnot p \\lor \\lnot q\\)\n\nIt’s ok to write your truth tables “casually” using Markdown, but OPTIONALLY you can also structure them as tables using some more advanced \\(\\LaTeX\\) syntax. Double click into this markdown cell to see how I created the beginnings of a truth table:\n\\[\n\\begin{array}{c|c|c}\np & q & p \\lor q \\\\\n\\hline\nT & T & ? \\\\\nT & F & ? \\\\\n\\end{array}\n\\]\n[your truth tables here!]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.1",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.1",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.1",
    "text": "Exercise 5.1\nThe sum-of-products method is not always very efficient! Write a much simpler logical expression with the same truth table as shown in the example above.\n[your simplified logical expression here]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.2",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.2",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.2",
    "text": "Exercise 5.2\n\\[\\require{cancel}\\]\nMake a truth table for the logical expression\n\\[\n\\cancel{\\lnot (p \\lor \\lnot q) \\land (\\lnot q \\land r)}\n\\]\nCORRECTION:\nThe truth table for this expression is not very interesting. Please instead use the expression\n\\[\n(p \\lor \\lnot q) \\land (\\lnot q \\land r)\n\\]\n[Your truth table]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.3",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.3",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.3",
    "text": "Exercise 5.3\nUsing your truth table for the expression above, write down the representation derived from the sum-of-products method.\nNote that there are three variables, so your truth table should have 8 rows.\n[your sum-of-products representation here]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.4",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-5.4",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.4",
    "text": "Exercise 5.4\nSuppose that we are designing a circuit which needs to perform a logical operation. Each symbol \\(\\lnot\\), \\(\\land\\), \\(\\lor\\) corresponds to a “gate” that we’ll include in our circuit. We can construct our circuit using either the given expression from Exercise 5.2 or the sum-of-products expression that you found in exercise 5.3. How many gates would be needed in each case?\n[your response here!]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-6",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-6",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 6",
    "text": "Exercise 6\nWrite Python functions which implement the following logical operations. For each one, use the truth_table function above to display the truth table of the logical expression:\n\n\\(\\lnot p \\lor q\\)\n\\(p \\lor (q \\land \\lnot p) \\lor \\lnot p\\)\n\\(\\lnot p \\land q\\)\n\\(\\lnot (p \\land \\lnot q)\\)\n\nTwo logical expressions are logically equivalent if they have exactly the same final column in their truth tables. Which of these expressions are logically equivalent to which other expressions?\nNote: You will want to use Python constructions like:\n\np and q\nnot p\np or q\n\n\n# Exercise 6.1: implement your function and call truth_table to display\n\n\n# Exercise 6.2: implement your function and call truth_table to display\n\n\n# Exercise 6.3: implement your function and call truth_table to display\n\n\n# Exercise 6.4: implement your function and call truth_table to display\n\nExercise 6.5: which of these expressions are logically equivalent to which other expressions?\n[your response here]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables.html#exercise-7",
    "href": "assignments/labs/01-intro-and-truth-tables.html#exercise-7",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 7",
    "text": "Exercise 7\nHere are two Python functions that implement a logical operation with three arguments. For each one, write down the logical operation performed, using the symbols \\(\\lnot\\), \\(\\lor\\), and \\(\\land\\). Then, answer the following questions:\n\nWhich function do you find easier to read as code, and why?\nWhich function do you find easier to transcribe into logical symbols, and why?\n\nYou don’t have to construct truth tables for these functions, although you’re welcome to.\n\ndef f_1(p, q, r):\n    a = p and q\n    b = r or q\n    c = not (a or b)\n    return c\n\ndef f_2(p, q, r):\n    return (p and q) or ((r or p) and (r or q))\n\nA logical expression describing f_1 is:\n[your logical expression here]\nA logical expression describing f_2 is:\n[your logical expression here]\nWhich function do you find easier to read as code, and why?\n[your response here]\nWhich function do you find easier to transcribe into logical symbols, and why?\n[your response here]"
  },
  {
    "objectID": "assignments/labs/06-network-science-sol.html",
    "href": "assignments/labs/06-network-science-sol.html",
    "title": "Lab 6: Introduction to Network Science",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\nLearning Objectives:\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/06-network-science-sol.html#part-d",
    "href": "assignments/labs/06-network-science-sol.html#part-d",
    "title": "Lab 6: Introduction to Network Science",
    "section": "Part D",
    "text": "Part D\nNow we are ready to implement a function that will compute a matrix of walks of length \\(k\\). We will do this using recursion.\nHere is a partial implementation of such a function, which accepts the adjacency matrix \\(\\mathbf{A}\\) of a graph as its first argument and the desired length of walk to count as its second. Please complete this function using your implementation of matrix_multiply above.\nYou need to write at most 3 lines of code in order to complete this implementation. You may want to check back on Part B, which is a mathematical description of the recursive logic for this function.\n\ndef count_walks(A, k):\n    \"\"\"\n    return a matrix W containing the number of walks of length k between every pair of nodes in the graph. \n    \n    args: \n        A: np.array, the adjacency matrix of a graph. \n        k: int, the length of walk to count \n    \n    return: \n        W: np.array, a matrix in which entry W[i,j] is the number of walks of   \n           length k from node i to node j. \n    \"\"\"\n    if k == 1:\n        return A \n    else: \n        # print(\"not implemented\")\n        # solution code \n        W = count_walks(A, k-1)\n        return matrix_multiply(W, A)\n\nYour function is correct when running the code below prints \"Test passed!\".\n\nA = np.random.rand(10, 10)\n\nif np.allclose(A@A@A@A, count_walks(A, 4)): \n    print(\"Test passed!\")\nelse:\n    print(\"You still have some work to do...\")\n\nTest passed!"
  },
  {
    "objectID": "assignments/labs/06-network-science-sol.html#part-f",
    "href": "assignments/labs/06-network-science-sol.html#part-f",
    "title": "Lab 6: Introduction to Network Science",
    "section": "Part F",
    "text": "Part F\nFinally, let’s compare the number of triangles in the karate club network to the number of triangles in the random fake network. First, run the code below. You don’t need to write any new code.\n\nA_karate = nx.adjacency_matrix(karate).toarray()\nA_fake   = nx.adjacency_matrix(fake).toarray()\n\nprint(f\"There are {triangle_count(A_karate)} triangles in the real karate club social network.\")\nprint(f\"There are {triangle_count(A_fake)} triangles in the fake network.\")\n\nThere are 10926 triangles in the real karate club social network.\nThere are 12 triangles in the fake network.\n\n\nBriefly comment:\n\nIs there a big difference between the real social network and the fake one?\nAre you surprised?\n\n[Your response here.]\n\n\n\n\n\n\nSOLUTION: Full credit for any reasonable short text response, although I am expecting many to be surprised by the magnitude of the difference."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "",
    "text": "Learning Objectives:\nIn this lab,\nNote: This lab is different! During lab time, I will usually expect you not to work on your laptops, and instead work on whiteboards. Today, because typing mathematics is part of the learning goal, I want to make sure you have some time to practice that in class.\nWorking in Groups:\nDuring class, please make sure that every group member has completed and understood a part before moving on!\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-1",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-1",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 1",
    "text": "Exercise 1\nA group norm is a shared, mutually-agreed upon expectation to which all group members will be held. In this part of the activity, you’ll agree on several group norms and write them using Markdown formatting.\nFirst, you’re going to copy our core group norms. Make a new Markdown cell directly below this one. In that cell, use Markdown to replicate the following block of text.\n\n[Make a new Markdown cell right below this note!]\n\n\n\n\n\n\nSOLUTION: full credit for any list that:\n\nLooks similar to the example\nDemonstrates a header, numbered lists, bulleted lists, nested lists, bold, and italic.\nIncludes at least two additional norms not supplied in the example."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-2",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-2",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 2",
    "text": "Exercise 2\nNow, take 5 minutes to brainstorm at least 2 new group norms. Add them to your Markdown list above. You don’t need to copy your list down to this part."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-3",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-3",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 3",
    "text": "Exercise 3\nConsider the sentence “Either it will not rain or it will snow.”\n\nLet \\(p\\) be the proposition that it will rain.\nLet \\(q\\) be the proposition that it will snow.\n\nIn the markdown cell below, use math commands to write this sentence in logical symbols. You may wish to use the symbols \\lor, \\land, and \\lnot.\n\n\n\n\n\n\nSOLUTION: \\(\\lnot p \\lor q\\)"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-4",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-4",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 4",
    "text": "Exercise 4\nMake truth tables for the following two expressions:\n\n\\(\\lnot (p \\land q)\\)\n\\(\\lnot p \\lor \\lnot q\\)\n\nIt’s ok to write your truth tables “casually” using Markdown, but OPTIONALLY you can also structure them as tables using some more advanced LaTeX syntax. Double click into this markdown cell to see how I created the beginnings of a truth table:\n\\[\n\\begin{array}{c|c|c}\np & q & p \\lor q \\\\\n\\hline\nT & T & ? \\\\\nT & F & ? \\\\\n\\end{array}\n\\]\n\n\n\n\n\n\nSOLUTION:\n(any more “casual” solution in Markdown that contains the correct sequence of Ts and Fs is also fine.)\n\\[\n\\begin{array}{c|c|c|c}\np & q & p \\land q & \\lnot (p\\land q)\\\\\n\\hline\nT & T & T & F\\\\\nT & F & F & T\\\\\nF & T & F & T\\\\\nF & F & F & T\\\\\n\\end{array}\n\\]\n\\[\n\\begin{array}{c|c|c|c|c}\np & q & \\lnot p \\lnot q & \\lnot (p\\lor q)\\\\\n\\hline\nT & T & F & F & F\\\\\nT & F & F & T & T\\\\\nF & T & T & F & T\\\\\nF & F & T & T & T\\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.1",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.1",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.1",
    "text": "Exercise 5.1\nThe sum-of-products method is not always very efficient! Write a much simpler logical expression with the same truth table as shown in the example above.\n\n\n\n\n\n\nSOLUTION: \\(\\lnot q\\)."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.2",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.2",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.2",
    "text": "Exercise 5.2\nMake a truth table for the logical expression\n\\[\n(p \\lor \\lnot q) \\land (\\lnot q \\land r)\n\\]\n\n\n\n\n\n\nSOLUTION.\nIn the original lab assignment, I made a mistake and instead asked students to compute the truth table for the expression \\(\\lnot (p \\lor \\lnot q) \\land (\\lnot q \\land r)\\). This expression is a contradiction, and so the final column of the truth table is all \\(F\\)’s.\nHere is the most complete solution. Solutions that contain the correct final column and have several intermediate columns are also sufficient for an E. If only one or two intermediate columns are shown, M.\n\\[\n\\begin{array}{c|c|c|c}\np & q & r & \\lnot q & (p \\lor \\lnot q) & \\lnot q \\land r &  (p \\lor \\lnot q) \\land (\\lnot q \\land r)\\\\\n\\hline\nT & T & T & F & T & F &  F\\\\\nT & T & F & F & T & F &  F\\\\\nT & F & T & T & T & T &  T\\\\\nT & F & F & T & T & F &  F\\\\\nF & T & T & F & F & F &  F\\\\\nF & T & F & F & F & F &  F\\\\\nF & F & T & T & T & T &  T\\\\\nF & F & F & T & T & F &  F\\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.3",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.3",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.3",
    "text": "Exercise 5.3\nUsing your truth table for the expression above, write down the representation derived from the sum-of-products method.\nNote that there are three variables, so your truth table should have 8 rows.\n\n\n\n\n\n\nSOLUTION:\nIn the original version of the lab, I made an error in constructing the desired expression, so the correct sum-of-products expression is simply \\(F\\). Students who wrote this solution but did not do the revised problem can earn an “M” with feedback. An E requires students to complete the revised problem.\nIn the revised version of the lab, the correct sum-of-products expression is\n\\[\n(p \\land \\lnot q \\land r)\\lor(\\lnot p \\land \\lnot q \\land r)\n\\]"
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.4",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-5.4",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 5.4",
    "text": "Exercise 5.4\nSuppose that we are designing a circuit which needs to perform a logical operation. Each symbol \\(\\lnot\\), \\(\\land\\), \\(\\lor\\) corresponds to a “gate” that we’ll include in our circuit. We can construct our circuit using either the given expression from Exercise 5.2 or the sum-of-products expression that you found in exercise 5.3. How many gates would be needed in each case?\n\n\n\n\n\n\nSOLUTION:\nIn the original erroneous version of the lab, the cost of the original expression would have been 6 gates and the cost of the sum-of-products expression would have been 0 gates.\nIn the corrected version, the cost of the sum-of-products expression is 8 gates. Some students may observe that in both expressions it is not necessary to do things like compute \\(\\lnot q\\) twice, and therefore show a smaller number of gates. This is good provided that they justify their reasoning."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-6",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-6",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 6",
    "text": "Exercise 6\nWrite Python functions which implement the following logical operations. For each one, use the truth_table function above to display the truth table of the logical expression:\n\n\\(\\lnot p \\lor q\\)\n\\(p \\lor (q \\land \\lnot p) \\lor \\lnot p\\)\n\\(\\lnot p \\land q\\)\n\\(\\lnot (p \\land \\lnot q)\\)\n\nTwo logical expressions are logically equivalent if they have exactly the same final column in their truth tables. Which of these expressions are logically equivalent to which other expressions?\nNote: You will want to use Python constructions like:\n\np and q\nnot p\np or q\n\n\n\n\n\n\n\n\n# Exercise 6.1: implement your function and call truth_table to display\n\n\ndef f1(p, q):\n    return (not p) or q\n\ntruth_table(f1)\n\np   q   f\n---------\nT | T | T\nT | F | F\nF | T | T\nF | F | T\n\n\n\n# Exercise 6.2: implement your function and call truth_table to display\n\ndef f2(p, q):\n    return p or (q and (not p)) or (not p)\n\ntruth_table(f2)\n\np   q   f\n---------\nT | T | T\nT | F | T\nF | T | T\nF | F | T\n\n\n\n# Exercise 6.3: implement your function and call truth_table to display\n\ndef f3(p, q):\n    return (not p) and q\n\ntruth_table(f3)\n\np   q   f\n---------\nT | T | F\nT | F | F\nF | T | T\nF | F | F\n\n\n\n# Exercise 6.4: implement your function and call truth_table to display\n\ndef f4(p, q):\n    return not (p and (not q))\n\ntruth_table(f4)\n\np   q   f\n---------\nT | T | T\nT | F | F\nF | T | T\nF | F | T\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.5: which of these expressions are logically equivalent to which other expressions?\nSOLUTION: Expressions 1 and 4 are equivalent. Expressions 2 and 3 are not equivalent to 1 and 4 or to each other."
  },
  {
    "objectID": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-7",
    "href": "assignments/labs/01-intro-and-truth-tables-sol.html#exercise-7",
    "title": "Lab 1: Mathematical Writing and Truth Tables",
    "section": "Exercise 7",
    "text": "Exercise 7\nHere are two Python functions that implement a logical operation with three arguments. For each one, write down the logical operation performed, using the symbols \\(\\lnot\\), \\(\\lor\\), and \\(\\land\\). Then, answer the following questions:\n\nWhich function do you find easier to read as code, and why?\nWhich function do you find easier to transcribe into logical symbols, and why?\n\nYou don’t have to construct truth tables for these functions, although you’re welcome to.\n\ndef f_1(p, q, r):\n    a = p and q\n    b = r or q\n    c = not (a or b)\n    return c\n\ndef f_2(p, q, r):\n    return (p and q) or ((r or p) and (r or q))\n\nA logical expression describing f_1 is:\n\n\n\n\n\n\nSOLUTION: \\(\\lnot ((p \\land q) \\lor (r \\lor q))\\). If they write other logical expressions, please check for equivalence.\n\n\n\nA logical expression describing f_2 is:\n\n\n\n\n\n\nSOLUTION: \\((p \\land q) \\lor ((r \\lor p) \\land (r \\lor q))\\)\n\n\n\nWhich function do you find easier to read as code, and why?\n\n\n\n\n\n\nSOLUTION: I (Phil) think that f_1 is easier to read as code because it is chunked into lines, but they might reasonably disagree.\n\n\n\nWhich function do you find easier to transcribe into logical symbols, and why?\n\n\n\n\n\n\nSOLUTION: I (Phil) think that f_2 is easier to transcribe into logical symbols because it’s already written in that format – just need to translate and to \\(\\land\\) etc."
  },
  {
    "objectID": "assignments/labs/06-network-science.html",
    "href": "assignments/labs/06-network-science.html",
    "title": "Lab 6: Introduction to Network Science",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\nLearning Objectives:\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/06-network-science.html#part-d",
    "href": "assignments/labs/06-network-science.html#part-d",
    "title": "Lab 6: Introduction to Network Science",
    "section": "Part D",
    "text": "Part D\nNow we are ready to implement a function that will compute a matrix of walks of length \\(k\\). We will do this using recursion.\nHere is a partial implementation of such a function, which accepts the adjacency matrix \\(\\mathbf{A}\\) of a graph as its first argument and the desired length of walk to count as its second. Please complete this function using your implementation of matrix_multiply above.\nYou need to write at most 3 lines of code in order to complete this implementation. You may want to check back on Part B, which is a mathematical description of the recursive logic for this function.\n\ndef count_walks(A, k):\n    \"\"\"\n    return a matrix W containing the number of walks of length k between every pair of nodes in the graph. \n    \n    args: \n        A: np.array, the adjacency matrix of a graph. \n        k: int, the length of walk to count \n    \n    return: \n        W: np.array, a matrix in which entry W[i,j] is the number of walks of   \n           length k from node i to node j. \n    \"\"\"\n    if k == 1:\n        return A \n    else: \n        # delete the line below and replace with up to 3 lines of your \n        # solution code\n        return np.zeros_like(A) \n\nYour function is correct when running the code below prints \"Test passed!\".\n\nA = np.random.rand(10, 10)\n\nif np.allclose(A@A@A@A, count_walks(A, 4)): \n    print(\"Test passed!\")\nelse:\n    print(\"You still have some work to do...\")"
  },
  {
    "objectID": "assignments/labs/06-network-science.html#part-f",
    "href": "assignments/labs/06-network-science.html#part-f",
    "title": "Lab 6: Introduction to Network Science",
    "section": "Part F",
    "text": "Part F\nFinally, let’s compare the number of triangles in the karate club network to the number of triangles in the random fake network. First, run the code below. You don’t need to write any new code.\n\nA_karate = nx.adjacency_matrix(karate).toarray()\nA_fake   = nx.adjacency_matrix(fake).toarray()\n\nprint(f\"There are {triangle_count(A_karate)} triangles in the real karate club social network.\")\nprint(f\"There are {triangle_count(A_fake)} triangles in the fake network.\")\n\nBriefly comment:\n\nIs there a big difference between the real social network and the fake one?\nAre you surprised?\n\n[Your response here.]"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html",
    "href": "assignments/labs/05-gradient-descent.html",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\nLearning Objectives:\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#the-gradient-descent-algorithm-for-fx-frac12x2",
    "href": "assignments/labs/05-gradient-descent.html#the-gradient-descent-algorithm-for-fx-frac12x2",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "The Gradient Descent Algorithm For \\(f(x) = \\frac{1}{2}x^2\\)",
    "text": "The Gradient Descent Algorithm For \\(f(x) = \\frac{1}{2}x^2\\)\nFormally, the algorithm for gradient descent for \\(f(x) = \\frac{1}{2}x^2\\) works as follows.\nInputs: initial guess \\(x_0\\), learning rate \\(\\alpha \\in \\mathbb{R}^+\\), total number of timesteps \\(T\\).\n\nSet \\(t \\gets 0\\).\nWhile \\(t &lt; T\\):\n\nSet \\(x_t \\gets x_{t-1} - \\alpha x_{t-1}\\).\n\\(t \\gets t+1\\).\n\n\nThis is the algorithm implemented in the Python code block above."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#part-a-gradient-descent-converges-sometimes",
    "href": "assignments/labs/05-gradient-descent.html#part-a-gradient-descent-converges-sometimes",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part A: Gradient Descent Converges (Sometimes)",
    "text": "Part A: Gradient Descent Converges (Sometimes)\nLet \\(\\delta_t = |x_t - 0| = |x_t|\\) be the error in our current estimate. You can think of \\(\\delta_t\\) as the distance between the correct answer (which is \\(x^* = 0\\)) and our current guess \\(x_t\\). We’d like to make the error \\(\\delta_t\\) close to 0, and we’d like to do so as quickly as possible.\n\nExercise A.1\nAt the board with your group, write a careful calculation which proves the recursion relation\n\\[\n\\delta_t = |1 - \\alpha | \\delta_{t-1}\\;.\n\\]\nfor the error \\(\\delta_t\\) when using the gradient descent algorithm outlined above. Then, after lab, type your calculation and place it below.\nHints:\n\n\\(|a|\\) is the absolute value of \\(a\\).\nFor any \\(a, b \\in \\mathbb{R}\\), \\(|ab| = |a||b|\\).\n\n[Type a careful version of your calculation below.]\n\n\nExercise A.2\nAt the board, write a proof by induction on the timestep \\(t\\) that the following formula solves the recurrence relation from A.1:\n\\[\n\\delta_t = |1-\\alpha|^{t} \\delta_0\\;.\n\\]\nThen, after lab, type your proof and place it below. Please remember to include both a base case and an inductive step. Use Exercise A.1!\n[Type a careful proof by induction based on your work.]\nThe number \\(\\alpha\\) is often called the learning rate. It’s nice for the learning rate to be large, because this often allows us to get good approximations quickly. However, we can’t choose this number to be too large…"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#exercise-a.3",
    "href": "assignments/labs/05-gradient-descent.html#exercise-a.3",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.3",
    "text": "Exercise A.3\nThere exist numbers \\(\\alpha_*\\) and \\(\\alpha^*\\) with the property that \\(\\delta_t &lt; \\delta_{t-1}\\) if and only if \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). Determine the values of \\(\\alpha_*\\) and \\(\\alpha^*\\) and explain. You’ll need to use the recursion relation in A.1.\n[Your solution here]"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#exercise-a.4",
    "href": "assignments/labs/05-gradient-descent.html#exercise-a.4",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.4",
    "text": "Exercise A.4\nSuppose that we do \\(1,000\\) steps of gradient descent, so that \\(T = 1,000\\). Consider the following three possibilities:\n\n\\(\\delta_T\\) becomes very close to 0.\n\\(\\delta_T\\) stays at its original value \\(\\delta_0\\).\n\\(\\delta_T\\) becomes very large.\n\nDescribe which of these possibilities will occur in the following scenarios:\n\nScenario I: \\(\\alpha = 0\\).\nScenario II: \\(\\alpha = 3\\).\nScenario III: \\(\\alpha = 1/2\\).\n\n[Your response here]"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#exercise-a.5",
    "href": "assignments/labs/05-gradient-descent.html#exercise-a.5",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.5",
    "text": "Exercise A.5\nFill in the blanks and write a proof of the following theorem.\nTheorem: If we do many steps of gradient descent for the function \\(f(x) = \\frac{1}{2}x^2\\) with learning rate \\(\\alpha\\), the error \\(\\delta_t\\) will converge (become very close) to 0 if and only if \\(\\_\\_\\_ &lt; \\alpha &lt; \\_\\_\\_\\).\nHint: To prove the theorem, you should just cite your answers to the previous parts. You don’t actually have to do very much new mathematics in this exercise; you just have to connect your results together in a full proof.\n[Your proof here.]"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#exercise-a.6",
    "href": "assignments/labs/05-gradient-descent.html#exercise-a.6",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.6",
    "text": "Exercise A.6\nSuppose that I start with an initial guess \\(x_0\\). I would like to run my gradient descent algorithm long enough that, in my final timestep \\(t\\), \\(\\delta_T &lt; \\epsilon\\) for some small number \\(\\epsilon &gt; 0\\). \\(\\epsilon\\) is often called the tolerance. Using your response from Exercise A.2, solve for \\(T\\) in terms of the tolerance \\(\\epsilon\\). Please show your work! The result should be a formula for the necessary number of timesteps \\(T\\) in terms of \\(\\epsilon\\).\nHint: You will need to use logs to solve for \\(T\\).\n[Your calculation for the required number of steps \\(T\\) to achieve a given tolerance]\nSOLUTION:"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#part-b",
    "href": "assignments/labs/05-gradient-descent.html#part-b",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part B",
    "text": "Part B\nBelow, I’ve started a computational experiment in which I’ve run the gradient descent algorithm for two separate values of \\(\\alpha\\). On the horizontal axis I’ve plotted the iteration number, and on the vertical axis I’ve plotted the error \\(\\delta_t\\) on log-scaled axes.\nFor the value of \\(\\alpha\\) I chose, the error decreases on the log-scaled axes.\nGuided by your results in the previous parts, add two values of \\(\\alpha\\) to the alpha_vals list such that:\n\nIn one case, the error increases. Bad!\nIn another case, the error is constant and never changes. Whoops!\n\nAll you need to do is add two values to the alpha_vals list and then run the code cell.\n\n# you only need to edit this list!\n\n# SOLUTION (lots of valid values)\nalpha_vals = [.1]\n\n## -------\n## no need to touch anything below\n## -------\n\ncolors = [\"orange\", \"blue\", \"black\", \"grey\"]\nfor i in range(len(alpha_vals)): # for each value of alpha\n    \n    # do a complete algorithm run\n    x_guess = 0.9\n    alpha = alpha_vals[i]\n    color = colors[i]\n    \n    T = 100\n    t = 0\n\n    # plot the results\n    plt.scatter([t], [x_guess], zorder = 10, s = 5, color = color, label = r\"$\\alpha = $\" + str(alpha))\n    while t &lt; T: \n        plt.scatter([t], [x_guess], zorder = 10, s = 5, color = color)\n        x_guess = x_guess - alpha*x_guess\n        t = t+1\n\n# label the plot\nplt.semilogy()\nplt.legend()\nlabs = plt.gca().set(xlabel = \"Iteration $t$\", ylabel = r\"Error $\\delta_t$ (log-scale)\")"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent.html#part-c-required-for-e-optional-for-m",
    "href": "assignments/labs/05-gradient-descent.html#part-c-required-for-e-optional-for-m",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part C (Required for E, optional for M)",
    "text": "Part C (Required for E, optional for M)\nIf you are happy with an M on this assignment, you can skip all of Part C and move on to Part D. You should solve this part only if you want an E.\nConsider now the general quadratic function \\(f(x) = \\frac{1}{2} ax^2 + bx + c\\) for some \\(a &gt; 0\\) and \\(b, c \\in \\mathbb{R}\\). This function has its minimum at the point \\(x_* = -\\frac{b}{a}\\). For this function, the gradient descent algorithm is just a little bit different:\nInputs: initial guess \\(x_0\\), learning rate \\(\\alpha \\in \\mathbb{R}^+\\), total number of timesteps \\(T\\).\n\nSet \\(t \\gets 0\\).\nWhile \\(t &lt; T\\):\n\nSet \\(x_t \\gets x_{t-1} - \\alpha (ax_{t-1} + b)\\).\n\\(t \\gets t+1\\).\n\n\nIn this section, you’ll repeat the exercises in Part A for this more general function. The results will be similar but a little more complicated.\n\nExercise C.1\nDefine \\(\\delta_t = |x_t - x_*|\\). Prove the recursion relation\n\\[\n\\delta_t = |1 - \\alpha a | \\delta_{t-1}\\;.\n\\]\nHint: the algebra here is messier but it’s nothing more than grouping, rearranging fractions, and factoring.\n[Your proof here]\n\n\nExercise C.2\nThere exist numbers \\(\\alpha_*\\) and \\(\\alpha^*\\) such that we are guaranteed that \\(\\delta_t \\rightarrow 0\\) if any only if \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). What are \\(\\alpha_*\\) and \\(\\alpha^*\\) in terms of \\(a\\), \\(b\\), and \\(c\\)? Justify your response.\n[your response here]\n\n\nExercise C.3\nSuppose that indeed \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). Suppose that we start with initial guess \\(x_0\\). Suppose that we wish to run our algorithm for a number of timesteps \\(T\\) so that the error \\(\\delta_T\\) is guaranteed to be less than \\(\\epsilon\\). Solve for \\(T\\) in terms of \\(\\epsilon\\), \\(x_0\\), \\(a\\), \\(b\\), and \\(c\\) to find the required number of steps. Please show your work!\n[Your calculation here]"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html",
    "href": "assignments/labs/05-gradient-descent-sol.html",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\nLearning Objectives:\nAssessment:\nLabs are assessed according to the posted EMRN rubric.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#the-gradient-descent-algorithm-for-fx-frac12x2",
    "href": "assignments/labs/05-gradient-descent-sol.html#the-gradient-descent-algorithm-for-fx-frac12x2",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "The Gradient Descent Algorithm For \\(f(x) = \\frac{1}{2}x^2\\)",
    "text": "The Gradient Descent Algorithm For \\(f(x) = \\frac{1}{2}x^2\\)\nThe algorithm for gradient descent for \\(f(x) = \\frac{1}{2}x^2\\) works as follows.\nInputs: initial guess \\(x_0\\), learning rate \\(\\alpha \\in \\mathbb{R}^+\\), total number of timesteps \\(T\\).\n\nSet \\(t \\gets 0\\).\nWhile \\(t &lt; T\\):\n\nSet \\(x_t \\gets x_{t-1} - \\alpha x_{t-1}\\).\n\\(t \\gets t+1\\).\n\n\nYou can see this algorithm in action in the code block and plot above."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#part-a-gradient-descent-converges-sometimes",
    "href": "assignments/labs/05-gradient-descent-sol.html#part-a-gradient-descent-converges-sometimes",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part A: Gradient Descent Converges (Sometimes)",
    "text": "Part A: Gradient Descent Converges (Sometimes)\nLet \\(\\delta_t = |x_t - 0| = |x_t|\\) be the error in our current estimate. You can think of \\(\\delta_t\\) as the distance between the correct answer (which is \\(x^* = 0\\)) and our current guess \\(x_t\\). We’d like to make the error \\(\\delta_t\\) close to 0, and we’d like to do so as quickly as possible.\n\nExercise A.1\nAt the board with your group, write a careful calculation which proves the recursion relation\n\\[\n\\delta_t = |1 - \\alpha | \\delta_{t-1}\\;.\n\\]\nfor the error \\(\\delta_t\\) when using the gradient descent algorithm outlined above. Then, after lab, type your calculation and place it below.\nHints:\n\n\\(|a|\\) is the absolute value of \\(a\\).\nFor any \\(a, b \\in \\mathbb{R}\\), \\(|ab| = |a||b|\\).\n\n[Type a careful version of your calculation below.]\n\n\n\n\n\n\nSOLUTION:\nWe can compute directly:\n\\[\n\\begin{aligned}\n\\delta_t &= |x_t| &\\text{(definition of $\\delta_t$)} \\\\\n         &= |x_{t-1} - \\alpha x_{t-1}| & \\text{(first part of Step 2 in algorithm)} \\\\\n         &= |(1-\\alpha)x_{t-1}| & \\text{(factoring)} \\\\\n         &= |1-\\alpha| |x_{t-1}| & \\text{(more factoring)} \\\\\n         &= |1-\\alpha| \\delta_{t-1} & \\text{(definition of $\\delta_{t-1}$)} \\\\\n\\end{aligned}\n\\]\n\n\n\n\n\nExercise A.2\nAt the board, write a proof using induction on the timestep \\(t\\) to prove solve the recurrence relation:\n\\[\n\\delta_t = |1-\\alpha|^{t} \\delta_0\\;.\n\\]\nThen, after lab, type your proof and place it below. Please remember to include both a base case and an inductive step. Use Exercise A.1!\n[Type a careful proof by induction based on your work.]\n\n\n\n\n\n\nSOLUTION:\nBase case: For \\(t = 0\\), we can verify the equation: \\(\\delta_0 = |1-\\alpha|^0 = \\delta_0\\). This is true because \\(|1-\\alpha|^0 = 1\\).\nInductive step: Suppose that the equation is true for some integer \\(t\\). Then, we could use Exercise A.1:\n\\[\n\\begin{aligned}\n\\delta_{t+1} &= |1-\\alpha| \\delta_t & \\text{(Exercise A.1)}\\\\\n             &= |1-\\alpha| |1-\\alpha|^t \\delta_0 & \\text{(inductive hypothesis)} \\\\\n             &=  |1-\\alpha|^{t+1} \\delta_0 & \\text{(exponent algebra)}\\;.\n\\end{aligned}\n\\]\nThis completes the inductive step and the proof.\n\n\n\nThe number \\(\\alpha\\) is often called the learning rate. It’s nice for the learning rate to be large, because this often allows us to get good approximations quickly. However, we can’t choose this number to be too large…"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#exercise-a.3",
    "href": "assignments/labs/05-gradient-descent-sol.html#exercise-a.3",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.3",
    "text": "Exercise A.3\nThere exist numbers \\(\\alpha_*\\) and \\(\\alpha^*\\) with the property that \\(\\delta_t &lt; \\delta_{t-1}\\) if and only if \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). Determine the values of \\(\\alpha_*\\) and \\(\\alpha^*\\) and explain. You’ll need to use the recursion relation in A.2.\n[Your solution here]\n\n\n\n\n\n\nWe need to guarantee that \\(|1-\\alpha| &lt; 1\\) in order for the formula \\(\\delta_t = |1-\\alpha|^{t} \\delta_0\\;\\) not to result in exponential growth. For this, we need \\(0 &lt; \\alpha &lt; 2\\). So, \\(\\alpha_* = 0\\) and \\(\\alpha^* = 2\\)."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#exercise-a.4",
    "href": "assignments/labs/05-gradient-descent-sol.html#exercise-a.4",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.4",
    "text": "Exercise A.4\nSuppose that we do \\(1,000\\) steps of gradient descent, so that \\(T = 1,000\\). Consider the following three possibilities:\n\n\\(\\delta_T\\) becomes very close to 0.\n\\(\\delta_T\\) stays at its original value \\(\\delta_0\\).\n\\(\\delta_T\\) becomes very large.\n\nDescribe which of these possibilities will occur in the following scenarios:\n\nScenario I: \\(\\alpha = 0\\).\nScenario II: \\(\\alpha = 3\\).\nScenario III: \\(\\alpha = 1/2\\).\n\n[Your response here]\n\n\n\n\n\n\nSOLUTION:\n\nScenario I: \\(\\delta_T\\) stays at its original value \\(\\delta_0\\).\nScenario II: \\(\\delta_T\\) becomes very large.\nScenario III: \\(\\delta_T\\) becomes very small."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#exercise-a.5",
    "href": "assignments/labs/05-gradient-descent-sol.html#exercise-a.5",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.5",
    "text": "Exercise A.5\nFill in the blanks and write a proof of the following theorem.\nTheorem: If we do many steps of gradient descent for the function \\(f(x) = \\frac{1}{2}x^2\\) with learning rate \\(\\alpha\\), the error \\(\\delta_t\\) will converge (become very close) to 0 if and only if \\(\\_\\_\\_ &lt; \\alpha &lt; \\_\\_\\_\\).\nHint: To prove the theorem, you should just cite your answers to the previous parts. You don’t actually have to do very much new mathematics in this exercise; you just have to connect your results together in a full proof.\n[Your proof here.]\n\n\n\n\n\n\nSOLUTION:\nTheorem: If we do many steps of gradient descent for the function \\(f(x) = \\frac{1}{2}x^2\\) with learning rate \\(\\alpha\\), the error \\(\\delta_t\\) will converge (become very close) to 0 if and only if \\(0 &lt; \\alpha &lt; 2\\).\nProof: By Exercise A.3, we know that \\(\\delta_t = |1-\\alpha|^T\\delta_0\\). By properties of geometric recurrence relations, we know that \\(\\delta_t\\rightarrow 0\\) if and only if \\(|1-\\alpha| &lt; 1\\). This is guaranteed if \\(0 &lt; \\alpha &lt; 2\\), completing the proof."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#exercise-a.6",
    "href": "assignments/labs/05-gradient-descent-sol.html#exercise-a.6",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Exercise A.6",
    "text": "Exercise A.6\nSuppose that I start with an initial guess \\(x_0\\). I would like to run my gradient descent algorithm long enough that, in my final timestep \\(t\\), \\(\\delta_T &lt; \\epsilon\\) for some small number \\(\\epsilon &gt; 0\\). \\(\\epsilon\\) is often called the tolerance. Using your response from Exercise A.2, solve for \\(T\\) in terms of the tolerance \\(\\epsilon\\). Please show your work! The result should be a formula for the necessary number of timesteps \\(T\\) in terms of \\(\\epsilon\\).\nHint: You will need to use logs to solve for \\(T\\).\n[Your calculation for the required number of steps \\(T\\) to achieve a given tolerance]\nSOLUTION:\n\n\n\n\n\n\nWe start with \\(\\delta_T = |1-\\alpha|^T \\delta_0\\). We want to ensure that \\(\\delta_T &lt; \\epsilon\\). So, we want to ensure that\n\\[|1-\\alpha|^T\\delta_0 &lt; \\epsilon\\;.\\]\nTo solve for \\(T\\), we’ll start by taking logs on both sides:\n\\[T \\log_2 |1-\\alpha| + \\log_2 \\delta_0 &lt; \\log_2 \\epsilon\\;.\\]\nDividing through, we get\n\\[\nT &gt; \\frac{\\log_2 \\epsilon - \\log_2 \\delta_0}{\\log_2 |1-\\alpha| }\\;.\n\\]\nThe direction of the inequality changed from \\(&lt;\\) to \\(\\geq\\) because we divided by \\(\\log_2 |1-\\alpha|\\), which is a negative number.\nAny response that uses a different base for the \\(\\log\\) is also fully correct."
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#part-b",
    "href": "assignments/labs/05-gradient-descent-sol.html#part-b",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part B",
    "text": "Part B\nBelow, I’ve started a computational experiment in which I’ve run the gradient descent algorithm for two separate values of \\(\\alpha\\). On the horizontal axis I’ve plotted the iteration number, and on the vertical axis I’ve plotted the error \\(\\delta_t\\) on log-scaled axes.\nFor the value of \\(\\alpha\\) I chose, the error decreases on the log-scled axes.\nGuided by your results in the previous parts, add two values of \\(\\alpha\\) to the alpha_vals list such that:\n\nIn one case, the error increases. Bad!\nIn another case, the error is constant and never changes. Whoops!\n\nAll you need to do is add two values to the alpha_vals list and then run the code cell.\n\n# you only need to edit this list!\n\n# SOLUTION (lots of valid values), the plot should have a decreasing line, an increasing line, and a horizontal line\n\nalpha_vals = [.1, 2.1, 0]\n\n## -------\n## no need to touch anything below\n## -------\n\ncolors = [\"orange\", \"blue\", \"black\", \"grey\"]\nfor i in range(len(alpha_vals)): # for each value of alpha\n    \n    # do a complete algorithm run\n    x_guess = 0.9\n    alpha = alpha_vals[i]\n    color = colors[i]\n    \n    T = 100\n    t = 0\n\n    # plot the results\n    plt.scatter([t], [x_guess], zorder = 10, s = 5, color = color, label = r\"$\\alpha = $\" + str(alpha))\n    while t &lt; T: \n        plt.scatter([t], [x_guess], zorder = 10, s = 5, color = color)\n        x_guess = x_guess - alpha*x_guess\n        t = t+1\n\n# label the plot\nplt.semilogy()\nplt.legend()\nlabs = plt.gca().set(xlabel = \"Iteration $t$\", ylabel = r\"Error $\\delta_t$ (log-scale)\")"
  },
  {
    "objectID": "assignments/labs/05-gradient-descent-sol.html#part-c-required-for-e-optional-for-m",
    "href": "assignments/labs/05-gradient-descent-sol.html#part-c-required-for-e-optional-for-m",
    "title": "Lab 5: Analyzing Gradient Descent",
    "section": "Part C (Required for E, optional for M)",
    "text": "Part C (Required for E, optional for M)\nIf you are happy with an M on this assignment, you can skip all of Part C. You should solve this part only if you want an E.\nConsider now the general quadratic function \\(f(x) = \\frac{1}{2} ax^2 + bx + c\\) for some \\(a &gt; 0\\) and \\(b, c \\in \\mathbb{R}\\).\nThis function has its minimum at the point \\(x_* = -\\frac{b}{a}\\). For this function, the gradient descent algorithm is just a little bit different:\nInputs: initial guess \\(x_0\\), learning rate \\(\\alpha \\in \\mathbb{R}^+\\), total number of timesteps \\(T\\).\n\nSet \\(t \\gets 0\\).\nWhile \\(t &lt; T\\):\n\nSet \\(x_t \\gets x_{t-1} - \\alpha (ax_{t-1} + b)\\).\n\\(t \\gets t+1\\).\n\n\nIn this section, you’ll repeat the exercises in Part A for this more general function. The results will be similar but a little more complicated.\n\nExercise C.1\nDefine \\(\\delta_t = |x_t - x_*|\\). Prove the recursion relation\n\\[\n\\delta_t = |1 - \\alpha a | \\delta_{t-1}\\;.\n\\]\nHint: the algebra here is messier but it’s nothing more than grouping, rearranging fractions, and factoring.\n[Your proof here]\n\n\n\n\n\n\nSOLUTION:\nWe can directly compute\n\\[\n\\begin{aligned}\n\\delta_t &= |x_t - x^*| \\\\\n         &= |x_t + \\frac{b}{a}| \\\\\n         &= |x_{t-1} - \\alpha(a x_{t-1} + b) + \\frac{b}{a}| \\\\\n         &= |(1-\\alpha a) x_{t-1} - \\alpha b + \\frac{b}{a}| \\\\\n         &= |(1-\\alpha a) x_{t-1} + (1-\\alpha a) \\frac{b}{a}| \\\\  \n         &= (1-\\alpha a)| x_{t-1} + \\frac{b}{a}| \\\\  \n         &= (1-\\alpha a)| x_{t-1} - x^*| \\\\  \n         &= (1-\\alpha a)\\delta_{t-1} \\\\  \n\\end{aligned}\n\\]\n\n\n\n\n\nExercise C.2\nThere exist numbers \\(\\alpha_*\\) and \\(\\alpha^*\\) such that we are guaranteed that \\(\\delta_t \\rightarrow 0\\) if any only if \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). What are \\(\\alpha_*\\) and \\(\\alpha^*\\) in terms of \\(a\\), \\(b\\), and \\(c\\)? Justify your response.\n[your response here]\n\n\n\n\n\n\nSOLUTION: As before, we need to ensure that \\(|1-\\alpha a| &lt; 1\\). This requires that \\(\\alpha &gt; 0\\) or \\(\\alpha &lt; \\frac{2}{a}\\). So, \\(\\alpha_* = 0\\) and \\(\\alpha^* = \\frac{2}{a}\\).\n\n\n\n\n\nExercise C.3\nSuppose that indeed \\(\\alpha_* &lt; \\alpha &lt; \\alpha^*\\). Suppose that we start with initial guess \\(x_0\\). Suppose that we wish to run our algorithm for a number of timesteps \\(T\\) so that the error \\(\\delta_T\\) is guaranteed to be less than \\(\\epsilon\\). Solve for \\(T\\) in terms of \\(\\epsilon\\), \\(x_0\\), \\(a\\), \\(b\\), and \\(c\\) to find the required number of steps. Please show your work!\n[Your calculation here]\n\n\n\n\n\n\nSOLUTION:\nOur calculation is almost identical to the calculation in Exercise A.6, with the exception of the extra \\(a\\). Following exactly the same steps, we get\n\\[\nT \\geq \\frac{\\log_2 \\epsilon -  \\log_2 \\delta_0}{\\log_2 |1-a \\alpha|}\\;.\n\\]"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html",
    "href": "assignments/labs/04-lattice-paths.html",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#collaboration-statement",
    "href": "assignments/labs/04-lattice-paths.html#collaboration-statement",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice using binomial coefficients and the principles of addition, multiplication, and inclusion-exclusion to count lattice paths in special scenarios.\nYou will implement a Python function for general lattice path-counting and check its correctness against known mathematical results.\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#general-instructions",
    "href": "assignments/labs/04-lattice-paths.html#general-instructions",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "General Instructions",
    "text": "General Instructions\nUnlike most labs, in this one it’s normal to spend time looking at your computer and typing. Please make sure to work with your group and not proceed to the next part until all group members are comfortable with the work you’ve done on the previous part."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#part-b",
    "href": "assignments/labs/04-lattice-paths.html#part-b",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part B",
    "text": "Part B\nYes, Part B is actually at the front of the lab! Right now, you should just run the code cell below (and do so each time you open the lab), but otherwise you don’t need to do anything until you’ve completed Part A.\n\nB.1\nBelow, I’ve partially implemented the function count_lattice_paths, which accepts a lattice L and returns the number of paths from the bottom left to the top right.\nIn order to do this, you are going to use a recurrence relation which generalizes the recurrence relation for binomial coefficients in DMOI 1.2. Let \\(p_{i,j}\\) denote the number of lattice paths from cell \\((0,0)\\) to cell \\((i-1,j-1)\\) on the lattice (we’re starting at \\((0, 0)\\) and subtracting 1 due to Python’s zero-based indexing). Then,\n\\[\np_{i,j} =\n\\begin{cases}\n    0 &\\quad (i,j) \\text{ is impassable} \\\\\n    1 &\\quad (i,j) = (1,1) \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{i-1,0} &\\quad j = 0 \\text{ and } i &gt; 0 \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{0,j-1} &\\quad i = 0 \\text{ and } j &gt; 0 \\text{ and } (i,j) \\text{ is passable}\\\\\n    p_{i-1,j} + p_{i,j-1} &\\quad i,j &gt; 0 \\text{ and } (i,j) \\text{ is passable}\n\\end{cases}\n\\]\nIn the code block below, please fill in an implementation of this logic in the specified parts of the code. I have handled the first case (if \\((i,j)\\) is impassable) and one of the other cases for you as an example. You need to fill in the other three. In order to work correctly, each branch of your if-statement should save the correct result to a variable called p as illustrated in the example.\nYou should also delete the first two lines of the function body.\n\ndef count_lattice_paths(L):\n    \"\"\"\n    return the number of lattice paths from the bottom left to the top right of a lattice L, specified as a binary np.array in which 0s represent impassable cells.\n    \n    params: \n        L, np.array, a binary array specifying the lattice and obstructions. 1s are passable cells and 0s are impassable cells. \n        \n    return: \n        float, the number of paths in the lattice from the bottom left to the top right that do not pass through any impassable cells. \n\n    \"\"\"\n    \n    # delete these two lines when you start working on Part B\n    print(\"count_lattice_paths is not implemented: you'll come back to this in Part B\")\n    return -1 \n\n    # construct a new array which will hold the path counts\n    P = np.zeros_like(L)\n    \n    # loop through the elements of this array\n    for i in range(P.shape[0]):\n        for j in range(P.shape[1]):\n            \n            # if cell is impassable, there are 0 paths to that cell\n            if np.flip(L,0)[i, j] == 0:\n                p = 0\n\n            # otherwise, if cell is passable: \n            else: \n                if (i == 0) and (j != 0):\n                    p = P[i, j-1]\n                # your code below! Use the \n                # math description above to compute the correct value of \n                # p depending on the values of i and j. You can do this by adding some additional elif and else-classes to the inner if-statement. \n\n                \n                \n                \n        \n            # don't touch anything below   \n            P[i, j] = p\n    return P[-1,-1]   \n\n\n\nB.2\nTest your code by re-running the code blocks in Part A in order. You are looking for exact agreement between your “by-hand” code using binomial coefficients and the result of your implementation of count_lattice_paths. If there is any difference between the two answers, then something is off with either your math or your code.\nYou are done with Part B when you have run all the Part A code and found exact agreement between your binomial coefficients and your count_lattice_paths implementation. You do not need to write any additional commentary or code in Part B. Once you’ve found exact matches for every example in Part A, you are ready to move on to Part C.\nNote: it is normal for this to be a nonlinear and occasionally frustrating process that requires you to revisit both your mathematical reasoning and your code."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#part-a",
    "href": "assignments/labs/04-lattice-paths.html#part-a",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part A",
    "text": "Part A\nFor each of the following subparts, do the following:\n\nRun the provided code block to download and view the lattice.\nUsing math, write an expression describing the number of lattice paths from the blue dot to the orange dot. Give a short explanation of your answer.\n\nYou can typeset binomial coefficients like this: $\\binom{n}{k}$ renders as \\(\\binom{n}{k}\\).\n\nWrite and run a Python expression using the binom function from the scipy package to evaluate your mathematical expression.\n\nYou should assign the result to a variable called number_of_paths_by_hand, which is assigned value -1 in the script currently.\nInclude a call print(count_lattice_paths(L)) right below your calculation. We will use this after we complete Part H.\n\n\nUsing binomial coefficients: I’ve visualized the lattices a little bit differently than Levin does in DMOI. In particular, we assume that we start on grid square (1, 1). This means that:\n\nTheorem: In a grid of size \\(m\\) rows and \\(n\\) columns with no obstructions, the number of paths from the bottom left corner to the top right corner is \\(\\binom{m+n-2}{m-1}\\). This number is the same as \\(\\binom{m+n-2}{n-1}\\).\n\nHere’s an example of a fully-worked solution. Your solutions to the other problems should look very similar.\n\nA.0\n\n# 1. run the code\nL = read_lattice(\"A0\")\nshow_lattice(L)\n\n\nMathematical derivation\nFrom the theorem given above, we know that the number of lattice paths through a lattice with \\(m\\) rows and \\(n\\) columns is \\(\\binom{m + n - 2}{m-1}\\). So, the number of lattice paths in this case is \\(\\binom{8+5-2}{5-1} = \\binom{11}{4}\\).\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\n\n# You only need to change the line directly below this comment with your calculation. \nnumber_of_paths_by_hand = binom(11, 4)\n\n# no need to touch any of these lines\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\n\nA.1\n\n# 1. run the code\nL = read_lattice(\"A1\")\nshow_lattice(L)\n\n\nMathematical derivation\nYour math here!!\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = -1 # replace with your math expression\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\n\nA.2\n\n# 1. run the code\nL = read_lattice(\"A2\")\nshow_lattice(L)\n\n\nMathematical derivation\nYour math here!!\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = -1 # replace with your math expression\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\n\nA.3\nHint: this one is quick if you can figure out the right way to use your answers in A.0 and A.2.\n\n# 1. run the code\nL = read_lattice(\"A3\")\nshow_lattice(L)\n\n\nMathematical derivation\nYour math here!!\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = -1 # replace with your math expression\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\n\nA.4\n\n# 1. run the code\nL = read_lattice(\"A4\")\nshow_lattice(L)\n\n\nMathematical derivation\nYour math here!!\n\n\nComputation\n\n# 3. compute the result and call print(count_lattice_paths(L)) right under\nnumber_of_paths_by_hand = -1 # replace with your math expression\nprint(f\"By hand  : {number_of_paths_by_hand} paths\")\n\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\n\nOnce you’re done with Part A…\nPlease circle back to the beginning of the lab to work on Part B. Move on to Part C once you’re done with Part B.2."
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#part-c",
    "href": "assignments/labs/04-lattice-paths.html#part-c",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part C",
    "text": "Part C\n\nC.1\nHere is the “challenge” lattice from the beginning of the assignment. Use your function count_lattice_paths to find the number of paths in this lattice. I do not recommend trying this by hand.\n\n# run this block\nL = read_lattice(\"challenge\")\nshow_lattice(L)\n\n\n# run this code -- no need to modify\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")\n\n\n\nC.2\nHere’s a large lattice with many random obstacles. Run the code to generate the lattice, and then use count_lattice_paths to count the number of paths.\n\n# run this block\ndef random_lattice(rows = 20, columns = 30, obstacle_density = 0.1):\n    np.random.seed(12)\n    L = 1*(np.random.rand(rows, columns) &gt; obstacle_density)\n    L[0, L.shape[1]-1] = 1\n    L[L.shape[0]-1, 0] = 1\n    return(L)\n\nL = random_lattice(30, 40, 0.2)\nshow_lattice(L)\n\n\n# run this block -- no need to modify\nnumber_of_paths_function = count_lattice_paths(L)\nprint(f\"Function : {number_of_paths_function} paths\")"
  },
  {
    "objectID": "assignments/labs/04-lattice-paths.html#part-d",
    "href": "assignments/labs/04-lattice-paths.html#part-d",
    "title": "Lab 4: Counting Lattice Paths",
    "section": "Part D",
    "text": "Part D\nTake the lattice in Part C that you generated. Imagine for a moment that you were going to solve the lattice path counting problem by writing an algorithm that actually found all the possible lattice paths and counted them up.\n\nD.1\nSuppose that it took your algorithm \\(1\\times 10^{-9}\\) seconds to compute each path. Approximately how long would it take your algorithm to find all the lattice paths in the lattice above? Please give your answer in units of days. You might find it helpful to do some computations in Python in the cell block below.\n\n# calculate the number of days it would take to enumerate these paths\n# use Python as a calculator! \n\n\n\nD.2\nRun the code cell below. Python will run count_lattice_paths on the lattice L several times and compute the mean runtime.\n\n%timeit count_lattice_paths(L)\n\nHow much faster is our implementation of count_lattice_paths? Please give your response in orders of magnitude. An order of magnitude is a multiple of 10. For example, 7 is two orders of magnitude smaller than 700.\nHints:\n\nIf you first run the line from math import log10 then you’ll be able to use the log10 function to compute the log base-10 of \\(x\\). This is one way to calculate the order of magnitude change.\nA millisecond (ms) is 1/1000 seconds.\n\n\n# your calculations here"
  },
  {
    "objectID": "assignments/labs/03-proof-practice-sol.html",
    "href": "assignments/labs/03-proof-practice-sol.html",
    "title": "Lab 3: Proof Practice",
    "section": "",
    "text": "[Your name]\n[The name of one of your group members]\n[The name of your other group member]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/03-proof-practice-sol.html#collaboration-statement",
    "href": "assignments/labs/03-proof-practice-sol.html#collaboration-statement",
    "title": "Lab 3: Proof Practice",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice assessing which proof technique to use for a given problem.\nYou will continue to practice correctly typesetting proofs using the \\(\\LaTeX\\) typesetting system.\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/03-proof-practice-sol.html#for-this-lab",
    "href": "assignments/labs/03-proof-practice-sol.html#for-this-lab",
    "title": "Lab 3: Proof Practice",
    "section": "For This Lab",
    "text": "For This Lab\nThis is a lab in which you will practice choosing the correct proof technique for a given problem. By now, we have learned several proof techniques:\n\nElement Method\nDirect Proof\nProof by Contrapositive\nProof by Division into Cases\nProof by Contradiction\n\nEach of the problems below will ask you to write a proof. Please begin your proof by stating which proof technique you are using. Here are some examples of good starts:\n\nWe will prove the claim using the element method. Let \\(x \\in A\\)…\nWe will prove the claim by division into cases. Suppose first that \\(x\\) is negative…\nWe will prove the claim by contradiction. Suppose therefore that [thing to be proven] is not true. Then…"
  },
  {
    "objectID": "assignments/labs/03-proof-practice-sol.html#how-many-proofs",
    "href": "assignments/labs/03-proof-practice-sol.html#how-many-proofs",
    "title": "Lab 3: Proof Practice",
    "section": "How Many Proofs?",
    "text": "How Many Proofs?\nThere are a total of 5 problems on this lab. For an M, it is sufficient to submit high quality for 4 of them. For an E, please submit all 5."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html",
    "href": "assignments/labs/02-inclusion-exclusion.html",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#collaboration-statement",
    "href": "assignments/labs/02-inclusion-exclusion.html#collaboration-statement",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Collaboration Statement",
    "text": "Collaboration Statement\n[Please describe the contributions of each group member. Please also describe the support you received from Course Assistants, other classmates, and any online resources such as StackExchange or ChatGPT.]\nLearning Objectives:\n\nYou will practice performing mathematical operations on sets, especially the cardinality of sets formed from other sets.\nYou will continue to practice with writing mathematics and creating symbols with \\(\\LaTeX\\).\n\nAssessment:\nLabs are assessed according to the posted EMRN rubric."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#part-a",
    "href": "assignments/labs/02-inclusion-exclusion.html#part-a",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part A",
    "text": "Part A\n\nExercise A.1\nDraw a Venn diagram with two intersecting sets \\(A\\) and \\(B\\). By referring to your Venn diagram, write an explanation of the inclusion-exclusion formula:\n\\[\n\\lvert A \\cup B \\rvert = \\lvert A \\rvert + \\lvert B \\rvert - \\lvert A \\cap B \\rvert.\n\\]\nYou should write your explanation on the whiteboard beside your diagram. Take a picture of your diagram and explanation and save it somewhere where you can find it again.\n\n\n(After Lab)\nBased on your whiteboard work, give a carefully edited, typed version of your explanation, using mathematical symbols as appropriate.\n[YOUR ANSWER HERE: a carefully-written explanation of your argument]"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#part-b",
    "href": "assignments/labs/02-inclusion-exclusion.html#part-b",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part B",
    "text": "Part B\n\nExercise B.1\nDraw a Venn diagram with 3 intersecting sets \\(A\\), \\(B\\), and \\(C\\). Label each region of the diagram. Use your Venn diagram to conjecture an inclusion-exclusion formula for the expression \\(\\lvert A \\cup B \\cup C\\rvert\\). You should explain your formula but you don’t need to write a formal proof.\nTake a picture of your Venn diagram and your whiteboard explanation and save it somewhere where you can find it again.\n\n\n(After Lab)\nUpload your Venn diagram in this notebook and refer to it when writing up your explanation.\n[YOUR ANSWER HERE: A carefully-written typed explanation of your argument using Venn diagrams. It’s ok if your argument is a little difficult to write without a picture – just do your best.]"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#part-c",
    "href": "assignments/labs/02-inclusion-exclusion.html#part-c",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part C",
    "text": "Part C\nNow let’s perform an algebraic derivation of the 3-set inclusion-exclusion formula. To do this, let’s define \\(D = B \\cup C\\). Then, we can write\n\\(\\lvert A \\cup B \\cup C\\rvert = \\lvert A \\cup D\\rvert\\;.\\)\n\nFirst, apply the two-set inclusion-exclusion formula to the righthand side of this expression.\nThen, apply the two-set inclusion exclusion formula again to simplify the expressions that result. You may need to do this several times times.\nDuring this process, you will find it useful to use one of the distributive laws:\n\n\\[\nA \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)\n\\]\n\nExercise C.1\nFollowing this strategy write a derivation (a computation leading to the desired formula) on the whiteboard. Justify each of your steps by citing a formula or identity that we have introduced in the course so far. Take a picture of your derivation once you’re done.\n\n\n(After Lab)\nType your derivation below. If you’d like to write sequential equations, which are very suitable for calculations like this one, click into this Markdown cell to see how I did this:\n\\[\n\\begin{aligned}\nx &= y  &\\text{(a justification)}\\\\\n  & = z &\\text{(another justification)}\\;.\n\\end{aligned}\n\\]\n[YOUR ANSWER HERE: A carefully-typed derivation using mathematical symbols as appropriate, as well as justifications for each step.]"
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#part-d",
    "href": "assignments/labs/02-inclusion-exclusion.html#part-d",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part D",
    "text": "Part D\nYou should run each of the Python cells in this part, including the ones that don’t require you to write any new code.\nNow let’s test our mathematical theory against computational experiments.\nThe following function will compute the size of a union of any number of provided sets.\n\ndef union_size(A, *other_sets):\n    return len(A.union(*other_sets))\n\nHere is it in action:\n\nA = {1, 2, 3}\nB = {2, 3, 4, 5}\nC = {3, 4, 7}\n\nunion_size(A, B, C) # union is {1, 2, 3, 4, 5, 7}\n\n6\n\n\nNow we’re going to write a function that can compute the size of a union using using a different method, using inclusion-exclusion.\nTo get you started on this function, I’ve populated a function that, when one or more sets are passed as arguments, prints all possible combinations of those sets. Then, it returns 0.\n\nfrom itertools import combinations\ndef ie_union_size(A, *other_sets):\n    union_size = 0\n    all_sets = other_sets + (A,)\n    for i in range(1, len(all_sets) + 1):\n        for sets in combinations(all_sets, i):\n            print(sets)\n    return union_size        \n\nHere it is in action:\n\nx = ie_union_size(A, B, C)\nprint(f\"the current return value is {x}\")\n\n({2, 3, 4, 5},)\n({3, 4, 7},)\n({1, 2, 3},)\n({2, 3, 4, 5}, {3, 4, 7})\n({2, 3, 4, 5}, {1, 2, 3})\n({3, 4, 7}, {1, 2, 3})\n({2, 3, 4, 5}, {3, 4, 7}, {1, 2, 3})\nthe current return value is 0\n\n\n\nExercise D.1\nModify this the ie_union_size function so that it correctly computes the size of the union of the input sets using the inclusion-exclusion formula. Your solution should ensure that ie_union_size returns the correct result whenever it is passed either 2 or 3 arguments. Show checks using the sets A, B, and C above to show that your function works in these cases.\nSpecifications:\n\nFor an M, it’s fine to use an if-statement in your solution. For an E, do not use any if-statements. You may find it helpful to run and think about the following line of code:\n\n[(-1)**(i+1) for i in range(1, 5)]\nHints:\n\nYou should add to the variable union_size using the syntax union_size += value_to_add.\nIt’s possible to solve this problem by replacing the print statement with a single careful line of code (under 80 characters), but it’s also ok to use more lines.\nWhen sets is a tuple of sets, the syntax sets[0].intersection(*sets[1:]) will compute the intersection of all the elements of sets.\nYou’ll need to do something with the signs of the cardinalities of sets. It’s helpful to look at the number of sets involved. For example, \\(|A|\\) will appear with a \\(+\\) sign but \\(|A\\cap B|\\) will appear with a \\(-\\) sign. What about \\(|A\\cap B \\cap C|\\)? What pattern fo you observe?\n\n\n# your solution here \nfrom itertools import combinations\ndef ie_union_size(A, *other_sets):\n    union_size = 0\n    all_sets = other_sets + (A,)\n    for i in range(1, len(all_sets) + 1):\n        for sets in combinations(all_sets, i):\n            # in this part of the loop, the variable sets is a tuple that holds \n            # some sets. Throughout the loop, all possible combinations of sets\n            # appear in this tuple. \n            \n            # to complete this part, you only need to replace the print statement below with some of your own code that modifies the union_size variable. Nothing else needs to be touched. \n            print(sets)\n    return union_size        \n\n\n# please add some checks to show that your solution agrees with union_size when passed either 2 or 3 sets."
  },
  {
    "objectID": "assignments/labs/02-inclusion-exclusion.html#part-e-optional-for-m-required-for-e",
    "href": "assignments/labs/02-inclusion-exclusion.html#part-e-optional-for-m-required-for-e",
    "title": "Lab 2: Set Cardinality and Inclusion-Exclusion",
    "section": "Part E (optional for M, required for E)",
    "text": "Part E (optional for M, required for E)\nYou can skip this problem if you are satisfied with an M on this lab report. If you are aiming for an E, please complete it.\n\nExercise E.1\nShow a test of your implementation of ie_union_size against union_size when passed 4 and 5 arguments. If the two functions do not agree, modify union_size until they do agree.\nYou may find it helpful to think about the inclusion-exclusion formula for 4 sets, which reads:\n\\[\n\\begin{aligned}\n\\lvert A \\cup B \\cup C \\cup D \\rvert &= \\lvert A \\rvert + \\lvert B \\rvert + \\lvert C \\rvert + \\lvert D \\rvert \\\\\n&\\quad - \\lvert A \\cap B \\rvert - \\lvert A \\cap C \\rvert - \\lvert A \\cap D \\rvert \\\\\n&\\quad - \\lvert C \\cap C \\rvert - \\lvert B \\cap D \\rvert - \\lvert C \\cap D \\rvert \\\\\n&\\quad + \\lvert A \\cap B \\cap C \\rvert + \\lvert A \\cap B \\cap D \\rvert \\\\\n&\\quad + \\lvert A \\cap C \\cap D \\rvert + \\lvert C \\cap C \\cap D \\rvert \\\\\n&\\quad - \\lvert A \\cap B \\cap C \\cap D \\rvert\\;.  \n\\end{aligned}\n\\]\nCan you find a pattern that you can generalize and use in your solution? It’s not required to prove your pattern – we’ll learn more about how to do that later in the course.\n\n# Show your tests here using 4 and 5 arguments. \n# You can use A, B, and C from above, as well as the following two additional sets: \n\nD = {3, 6, 7, 8}\nE = {1, 3, 4, 5, 7}\n\n# your tests here"
  },
  {
    "objectID": "content/problems/counting/grid-1.html",
    "href": "content/problems/counting/grid-1.html",
    "title": "",
    "section": "",
    "text": "Imagine that we are working on a grid with \\(n\\) rows and \\(m\\) columns, trying to count the number of paths from the blue dot in the bottom left corner to the orange dot in the top right corner.\n\nThe correct formula for the number of paths in this grid is \\[\n\\binom{m + n - k}{m - j}\n\\]\nfor some mysterious integers \\(k\\) and \\(j\\) that do not depend on \\(n\\) and \\(m\\). Determine the values of \\(k\\) and \\(j\\) and justify your choices.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/factors-inclusion-exclusion.html",
    "href": "content/problems/counting/factors-inclusion-exclusion.html",
    "title": "",
    "section": "",
    "text": "How many positive integers less than or equal to 1,500 are multiples of either 3 or 5? Do not answer this question by listing out all the possibilities. Instead, think carefully and use the principle of inclusion-exclusion.\nHint: think about multiples of 15…\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/traveling-salesperson.html",
    "href": "content/problems/counting/traveling-salesperson.html",
    "title": "Introduction",
    "section": "",
    "text": "In the traveling salesperson problem (TSP), we are given \\(n\\) cities with geographic coordinates and must find a shortest route that visits all of them. The easiest way to understand this is through a picture. Here’s a solution to the traveling salesperson problem for a route that visits all \\(48\\) state capitals in the contiguous US.\n\nThe traveling salesperson problem is a famously difficult problem for computational purposes. Indeed, the traveling salesperson problem is NP-hard, a concept you can learn about in our 300-level theory courses.\nIn this activity, we’ll learn more about why it’s hard. Specifically, we’ll learn how to count possible solutions to the traveling salesperson problem. We won’t worry about how to measure distance or find shortest paths – we’ll just count how many paths we would need to check.\n\n\nLet \\(a, b, c, d,\\ldots\\) be the names of a series of locations. A candidate solution to the traveling salesperson problem is a permutation of these locations. However, two permutations are equivalent if one is obtained from the other by shifting all the locations and bringing the final location to the front.\n\n\n\n\n\n\nFor example, a solution of the form \\(bcdea\\) would be equivalent to a solution of the form \\(abcde\\) because the second solution can be obtained by shifting all locations to the right and bringing the final location to the front. This corresponds to the idea that, in a cycle, it doesn’t matter which location you start in.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/traveling-salesperson.html#formal-description",
    "href": "content/problems/counting/traveling-salesperson.html#formal-description",
    "title": "Introduction",
    "section": "",
    "text": "Let \\(a, b, c, d,\\ldots\\) be the names of a series of locations. A candidate solution to the traveling salesperson problem is a permutation of these locations. However, two permutations are equivalent if one is obtained from the other by shifting all the locations and bringing the final location to the front.\n\n\n\n\n\n\nFor example, a solution of the form \\(bcdea\\) would be equivalent to a solution of the form \\(abcde\\) because the second solution can be obtained by shifting all locations to the right and bringing the final location to the front. This corresponds to the idea that, in a cycle, it doesn’t matter which location you start in."
  },
  {
    "objectID": "content/problems/counting/permutations.html",
    "href": "content/problems/counting/permutations.html",
    "title": "",
    "section": "",
    "text": "Consider the four letters \\(a,b,c,d\\).\n\nPart A\nWrite down 6 permutations of these letters. How many total permutations are there?\n\n\nPart B\nWrite down 4 \\(3\\)-permutations of these letters. How many total \\(3\\)-permutations are there?\n\n\nPart C\nPick one combination of 3 letters from \\(abcd\\), and write down all permutations of this combination.\nHow many combinations of 3 letters are there from \\(abcd\\)?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/counting/boulder.html",
    "href": "content/problems/counting/boulder.html",
    "title": "",
    "section": "",
    "text": "This time, we still want to get from the blue dot at \\((1,1)\\) to the orange dot at \\((m, n)\\). Now, however, there are some walls getting in the way! We are not allowed to cross through any of the grey grid cells.\n\nWe still want to count the number of ways to get from the blue dot to the orange dot. Consider the following annotated version of the grid in which there is a green dot at the point where the two large rectangular regions intersect:\n\nSuppose that this dot is at point \\((k, j)\\), where \\(1 \\leq k \\leq m\\) and \\(1 \\leq j \\leq n\\). Give a formula in terms of \\(m\\), \\(n\\), \\(k\\), and \\(j\\) for the number of paths lattice paths from \\((1, 1)\\) to \\((m, n)\\).\nHint: how many paths are there from the blue dot to the green dot? How many paths are there from the green dot to the orange dot? How would we combine these two results to get the solution? Check against the picture to make sure your binomial coefficients line up.\nHint: If you’re struggling to give a general answer, do the problem for the grid shown instead. The orange dot is at \\((8, 5)\\) and the green dot is at \\((5, 3)\\).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/advisors-and-deans.html",
    "href": "content/problems/quantified-logic/advisors-and-deans.html",
    "title": "",
    "section": "",
    "text": "An important feature of the residential college experience here at Middlebury is:\n\nEvery student has a faculty advisor and a class dean.\n\nLet \\(S\\) be the set of students, \\(A\\) be the set of faculty advisors, and \\(D\\) be the set of class deans. Let \\(H(s, a)\\) be the predicate that student \\(s\\) has faculty advisor \\(a\\). We can reuse \\(H(s, d)\\) to mean that student \\(s\\) has class dean \\(d\\).\n\nPart A\nTranslate the statement that every student has a faculty advisor and a class dean into logical symbols, including predicates and quantifiers.\n\n\nPart B\nCompute the negation of your answer in part \\(A\\). Simplify your result so that logical negation symbols appear only directly before predicates and not before any quantifiers or parenthetical expressions.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/awesome.html",
    "href": "content/problems/quantified-logic/awesome.html",
    "title": "",
    "section": "",
    "text": "Consider the following two statements:\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/awesome.html#part-a",
    "href": "content/problems/quantified-logic/awesome.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nTranslate of these statements into expressions of predicate logic, using the following predicates:\n\n\\(A(x)\\): \\(x\\) is awesome!\n\\(C(y)\\): \\(y\\) is cool.\n\\(P(z, t)\\): person \\(z\\) is part of team \\(t\\).\n\nHint: In English, the construction “\\(q\\) when \\(p\\)” can be rephrased as “if \\(p\\) then \\(q\\).” Your solution should therefore include \\(\\rightarrow\\)."
  },
  {
    "objectID": "content/problems/quantified-logic/awesome.html#part-b",
    "href": "content/problems/quantified-logic/awesome.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nThe contrapositive of the implication \\(p\\rightarrow q\\) is the statement \\(\\lnot q \\rightarrow \\lnot p\\). Compute the contrapositive of your answer for the second statement in Part A. Please simplify your results so that negation symbols \\(\\lnot\\) appear directly in front of predicates, and not quantifiers or parenthetical expressions. So, an expression like \\(\\lnot \\forall x : P(x)\\) needs further simplification, as does \\(\\exists y: \\lnot (P(y) \\lor Q(y))\\). Please show your steps."
  },
  {
    "objectID": "content/problems/quantified-logic/quantified-contrapositive.html",
    "href": "content/problems/quantified-logic/quantified-contrapositive.html",
    "title": "",
    "section": "",
    "text": "In his letter to a leading Roman agriculturist, the statesman and writer Marcus Tullius Cicero (106 BCE–43BCE) wrote:\n\nIf you have a garden and a library, then you have everything you need.\n\nLet \\(G\\) be the set of all gardens, \\(L\\) be the set of all libraries, and \\(N\\) be the set of things that you need. Finally, let \\(H(x)\\) be the statement that you have \\(x\\).\n\nPart A\nUse quantifiers and logical operators to translate Cicero’s statement into symbols.\n\n\n\nPart B\nThe contrapositive of the statement \\(p \\rightarrow q\\) is the statement \\(\\lnot q \\rightarrow \\lnot p\\). As you may remember, the contrapositive is logically equivalent to the original implication. Write the contrapositive of your translation from Part A. Simplify your answer so that negation symbols \\(\\lnot\\) appear only directly in front of predicates.\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/quantified-logic/dmoi-3-16.html",
    "href": "content/problems/quantified-logic/dmoi-3-16.html",
    "title": "",
    "section": "",
    "text": "Simplify the statements below (so negation appears only directly next to predicates). In these statements without domains of quantification, you may assume that the domain is the set \\(\\mathbb{Z}\\) of integers. This implies that \\(\\lnot(x &lt; y)\\equiv (y \\leq x)\\).\n\n\\(\\lnot \\exists x \\forall y(\\lnot O(x) \\lor E(x))\\)\n\\(\\lnot \\forall x \\lnot \\forall y \\lnot ((x &lt; y) \\land \\exists z((x &lt; z)\\lor (y &lt; z)))\\)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/more-strings.html",
    "href": "content/problems/probability/more-strings.html",
    "title": "",
    "section": "",
    "text": "Imagine that we form a string of \\(5\\) characters, with each character chosen randomly from the set \\(\\{a, b, c, d, e, f\\}\\). We might get a random string like \\(adcca\\) or \\(fbfcd\\).\nPlease answer the following questions:\n\nPart A\nConsider the strings \\(aaaaa\\) and \\(cddeb\\). Which of these two strings is more likely to occur from this process, and why?\n\n\nPart B\nWhat is the probability of obtaining a string which contains no repeated characters?\n\n\nPart C\nWhat is the probability of obtaining a string which does not contain the substring \\(bad\\)?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/coin-flip-expectation.html",
    "href": "content/problems/probability/coin-flip-expectation.html",
    "title": "",
    "section": "",
    "text": "Your friend offers to play a “game” with you. They have two coins. Coin \\(A\\) has probability of heads equal to \\(\\frac{1}{2}\\) and coin \\(B\\) has probability of heads equal to \\(q\\). In this game,\n\nFirst, your friend picks one of the two coins. Each coin has probability \\(\\frac{1}{2}\\) of being chosen.\nThen, your friend flips the coin. If heads, your friend owes you a coffee. If tails, you owe your friend a coffee.\n\n\nPart A\nYou and your friend play this game 10 times. What is the expected number of coffees that your friend owes you after 10 plays? If you owe your friend some number of coffees, then your answer should be a negative number. In expectation, one of you might owe the other a fractional number of coffees.\nHints:\n\nUse linearity of expectation.\n\\(p(H) = p(H|A)p(A) + p(H|B)p(B)\\). This formula is sometimes called “the law of total probability,” but it is just an instance of the definition of conditional probability and the addition principle for disjoint events.\n\n\n\nPart B\nWhat is the smallest value of \\(q\\) for which you would be willing to play this game?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/bayes-1.html",
    "href": "content/problems/probability/bayes-1.html",
    "title": "",
    "section": "",
    "text": "Preventing, experiencing, and managing COVID-19 is, regrettably, now a part of our everyday lives. One of the most important ways we can manage COVID-19 is by testing on a regular basis.\nPlease be aware that all numbers in this problem are made up unless I specifically cite them. This problem does not constitute medical or preventative care advice.\n\nPart A\nSuppose that 5% of the population has the common cold, 3% have COVID-19. You can interpret this as the probability that a randomly selected person has a 5% chance of having the common cold and a 3% chance of having COVID-19.\nAssume that the short-term symptoms of these two illnesses are identical, that they have equal rates of transmission, that everyone who has either illness always has the sniffles, that it is impossible to have COVID and the common cold at the same time, and that there are no other illnesses that give you the sniffles.\nYou wake up one morning and you have the sniffles. What is the probability that you have COVID-19, given that you have the sniffles?\n\n\nPart B\nMany of us use rapid antigen tests to assess whether or not we have COVID-19. The false positive rate of a rapid antigen test is the probability that the antigen test returns a positive result given that you do NOT have COVID-19. So, if \\(+\\) is the event that the test returns a positive result and \\(C\\) is the event that you have COVID-19, the false positive rate is \\(p(+|\\bar{C})\\). The false negative rate of a rapid antigen test is \\(p(-|C)\\), the event that the test incorrectly returns a negative result when you do in fact have COVID-19. The true positive rate is \\(p(+|C)\\) and the true negative rate is \\(p(-|\\bar{C})\\).\nPopular rapid antigen tests have a true positive rate for symptomatic individuals of approximately 73% and a true negative rate of approximately 99.6%.1 The false positive rate is approximately 0.4% and the false negative rate is approximately 27%.\n1 https://www.cochrane.org/CD013705/INFECTN_how-accurate-are-rapid-antigen-tests-diagnosing-covid-19Suppose that you wake up one morning with the sniffles. Because you are very responsible, you take a rapid antigen test.\n\nThe test comes up negative. What is the probability that you have COVID-19, given that you have a negative test and the sniffles? This is \\(p(C|-\\cap S)\\). Hints:\n\nThe way to approach this is to use Bayes’ rule to write \\(p(C|-\\cap S) = \\frac{p(-\\cap S | C)p(C)}{p(-\\cap S|C)p(C) + p(-\\cap S| \\bar{C})p(\\bar{C})}.\\) Then, compute each of the terms appearing in this fraction. Because you always have the sniffles when you have COVID-19, \\(p(-\\cap S|C) = p(-|C)\\).\nYou also need to calculate \\(p(-\\cap S|\\bar{C})p(\\bar{C})\\). You may assume that \\(p(-\\cap S|\\bar{C}) = p(-|\\bar{C})p(S|\\bar{C})\\). This is called conditional independence, an important topic which we sadly won’t hvae time to discuss.\n\nThe test comes up positive. What is the probability that you have COVID-19, given that you have a positive test and the sniffles?\n\nThis problem is very similar to the previous one. You may assume that \\(p(+\\cap S|\\bar{C}) = p(+|\\bar{C})p(S|\\bar{C})\\).\n\n\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/probability/binomial-expectation.html",
    "href": "content/problems/probability/binomial-expectation.html",
    "title": "",
    "section": "",
    "text": "Suppose that I have a biased coin which comes up heads with probability \\(p\\). I flip it \\(n\\) times. Let the random variable \\(X\\) describe the number of heads I observe.\n\nPart A\nLet \\(n = 3\\) and \\(p = 0.7\\).\n\nEnumerate the entire sample space of possible outcomes. You should have 8 total.\nCompute the probability of each of the 8 outcomes, as well as the number of heads.\nCompute the expected value of \\(X\\) in this case.\n\n\n\nPart B\nSuppose now that we flip \\(n\\) coins with probability \\(p\\). Use the linearity property of expectation to prove that \\(E(X) = np\\).\nNote: You may have seen a formula for how to solve this problem in a previous class. You shouldn’t cite this formula to solve this problem – I am asking you to prove the formula.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/function-recursive-def-2.html",
    "href": "content/problems/relations/function-recursive-def-2.html",
    "title": "",
    "section": "",
    "text": "For each of the following situations:\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/function-recursive-def-2.html#part-a",
    "href": "content/problems/relations/function-recursive-def-2.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nYou place \\(C\\) dollars into a bank with an interest rate of \\(k\\%\\). This means that your money grows by a factor of \\(1 + \\frac{k}{100}\\) each year. The function \\(f(n)\\) describes the amount of money in your account after \\(n\\) years."
  },
  {
    "objectID": "content/problems/relations/function-recursive-def-2.html#part-b",
    "href": "content/problems/relations/function-recursive-def-2.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nYou are running 4 times a week to improve your endurance. You start being able to run 1 mile without stopping. Each week, you are able to run \\(\\frac{1}{10}\\) of a mile longer without stopping. The function \\(f(n)\\) describes the distance you can run without stopping after week \\(n\\)."
  },
  {
    "objectID": "content/problems/relations/function-recursive-def-2.html#part-c",
    "href": "content/problems/relations/function-recursive-def-2.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nThe factorial function \\(f(n) = n!\\) computes the product of all integers from \\(1\\) to \\(n\\). For example, \\(5! = 1 \\times 2 \\times 3 \\times 4 \\times 5 = 120\\)."
  },
  {
    "objectID": "content/problems/relations/function-asymptotics-1.html",
    "href": "content/problems/relations/function-asymptotics-1.html",
    "title": "",
    "section": "",
    "text": "Consider the following two functions, which are defined recursively. Assume that \\(f(1) = g(1) = 1\\).\n\\[\n\\begin{aligned}\n    f(n) &= f(n-1) + 5 \\\\\n    g(n) &= 2g(n-1)\n\\end{aligned}\n\\]\nHere’s an incomplete proposition:\nProposition: for all \\(n \\geq N\\), \\(g(n) \\geq f(n)\\).\n\nDetermine the smallest integer \\(N\\) that makes this proposition true. You may want to do a few experiments.\nUse induction to write a proof of the proposition.\n\nHint: first, find closed-form expressions for \\(f\\) and \\(g\\).\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/bop-11-3-8.html",
    "href": "content/problems/relations/bop-11-3-8.html",
    "title": "",
    "section": "",
    "text": "Define a relation \\(R\\) on \\(\\mathbb{Z}\\) as \\(xRy\\) if and only if \\(x^2 + y^2\\) is even.\n\nWrite a formal proof that \\(R\\) is an equivalence relation.\nDescribe the equivalence classes of \\(R\\). How many are there?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/function-grades.html",
    "href": "content/problems/relations/function-grades.html",
    "title": "",
    "section": "",
    "text": "At the end of this course, every student will receive a letter grade. Consider the relation of the form \\((\\mathrm{Student}, \\mathrm{Grade})\\). Here are some example entries of this relation:\n\\[\n\\begin{aligned}\n&(\\mathrm{Xenith} ,&\\quad B+&) \\\\\n&(\\mathrm{Grace} ,&\\quad A\\phantom{+}&) \\\\\n&(\\mathrm{Eun} ,& \\quad B-&) \\\\\n&(\\mathrm{Natasha} ,&\\quad A-&) \\\\\n\\vdots\n\\end{aligned}\n\\]\n\nPart A\nExplain why this relation is a function. Then, describe the sets that are its domain and codomain.\n\n\nPart B\nIs this function injective, surjective, or bijective? For each, state either “definitely,” “definitely not,” or “it depends.” Explain your answer in each case.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/equivalence-relations-proof-2.html",
    "href": "content/problems/relations/equivalence-relations-proof-2.html",
    "title": "",
    "section": "",
    "text": "For each of the three relations below:\nFor each of the relations below, the domain is the integers \\(\\mathbb{Z}\\).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/relations/equivalence-relations-proof-2.html#part-b",
    "href": "content/problems/relations/equivalence-relations-proof-2.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nThe relation \\(aRb\\) means that \\(a - b\\) is a multiple of 12."
  },
  {
    "objectID": "content/problems/relations/equivalence-relations-proof-2.html#part-c",
    "href": "content/problems/relations/equivalence-relations-proof-2.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nThe relation \\(aRb\\) means that \\(a - b\\) divides 24."
  },
  {
    "objectID": "content/problems/asymptotics/trisection-search.html",
    "href": "content/problems/asymptotics/trisection-search.html",
    "title": "",
    "section": "",
    "text": "Consider the following algorithm called trisection search. Trisection search is an algorithm that, given a sorted list \\(L\\) of integers, determines whether or not a given integer \\(x\\) is an element of \\(L\\). For convenience, let’s assume that the length of \\(L\\) is \\(3^p\\) for some integer \\(p\\).For example, our algorithm should return \\(\\mathrm{True}\\) for \\(x = 5\\) and \\(L = [0, 2, 3, 5, 7, 8]\\) but \\(\\mathrm{False}\\) if instead \\(x = 4\\). You may know of bisection or binary search, which solves the same problem.\nHere’s the algorithm:\nAlgorithm \\(\\mathrm{TrisectionSearch}(x, L)\\):\n\nIf \\(L\\) has length 1, then return \\(\\mathrm{True}\\) if the single element of \\(L\\) is equal to \\(x\\), and return \\(\\mathrm{False}\\) otherwise.\nDivide \\(L\\) into 3 equal pieces, called \\(L_1\\), \\(L_2\\), and \\(L_3\\). Let the final elements of each of these lists be \\(\\ell_1\\), \\(\\ell_2\\), and \\(\\ell_3\\) respectively.\n\nIf \\(x \\leq \\ell_1\\), return \\(\\mathrm{TrisectionSearch}(x, L_1)\\).\nElse, if \\(\\ell_1 &lt; x \\leq \\ell_2\\), then return \\(\\mathrm{TrisectionSearch}(x, L_2)\\).\nElse, if \\(\\ell_2 &lt; x\\), then return \\(\\mathrm{TrisectionSearch}(x, L_3)\\).\n\n\n\nPart A\nGive a big-\\(O\\) estimate for the number of comparisons between integers used by trisection search on a list of length \\(n = 3^p\\). To do so, use the following steps:\n\nWrite down and justify a recurrence relation describing the number of comparisons required (Example 1 from the reading will be helpful).\nApply a theorem from the reading to obtain a big-\\(O\\) estimate.\n\n\n\nPart B\nFor each\nRespond with a “true” or a “false” and a quick explanation to each of the following two statements:\n\nTrisection search requires exactly as many comparisons between integers as binary search.\nTrisection search requires no more than 10% more comparisons than binary search.\nIf \\(n\\) increased by a factor of 10, then the number of comparisons required by binary and trisection search would both increase by a similar (but not exactly the same) factor.\n\n\n\n(Optional): Part C\nDefine a modified version of the algorithm above that splits a sorted list into \\(k\\) equal-sized pieces in each recursive step. Give a big-\\(O\\) estimate for the runtime on a list of length \\(n = k^p\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/rosen-8-3-8.html",
    "href": "content/problems/asymptotics/rosen-8-3-8.html",
    "title": "",
    "section": "",
    "text": "Suppose that \\(f(n) = 2f(n/2) + 3\\) whenever \\(n\\) is an even positive integer, and that \\(f(1) = 5\\).\nFind \\(f(2)\\), \\(f(8)\\), \\(f(64)\\), and \\(f(1,024)\\). Please do at least \\(f(2)\\) and \\(f(8)\\) by hand. You can either code a function to compute \\(f(64)\\) and \\(f(1,024)\\) or do those by hand as well.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/asymptotics/concepts-1.html",
    "href": "content/problems/asymptotics/concepts-1.html",
    "title": "",
    "section": "",
    "text": "Your so-called friend has a cool proof for you.\n\nSince \\(2n = O(n)\\) and \\(\\log n = O(n)\\), we know that \\(2n = O(n) = \\log n\\). So, \\(2n = \\log n\\) for all \\(n\\).\n\nIn a brief paragraph, patiently explain to your friend why this proof is incorrect. In part of your paragraph, you may wish to comment on the superiority of the notation \\(f(n) \\in O(g(n))\\) (rather than \\(f(n) = O(g(n))\\)).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/direct-practice-1.html",
    "href": "content/problems/proofs/direct-practice-1.html",
    "title": "",
    "section": "",
    "text": "Prove using any correct method that, for any integer \\(n\\in \\mathbb{Z}\\), the integer \\(n^2 - n\\) is even.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/irrational-general.html",
    "href": "content/problems/proofs/irrational-general.html",
    "title": "",
    "section": "",
    "text": "Suppose that we want to prove that \\(\\sqrt{x}\\) is not a rational number; i.e. there are no rational numbers \\(a, b \\in \\mathbb{Z}\\) such that \\(\\sqrt{x} = \\frac{a}{b}\\).\nWrite a proof that follows the same strategy as we used for \\(\\sqrt{2}\\). Then describe: for which values of \\(x\\) does your proof work? Finally, state the result you have proven as a careful theorem.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/pigeonhole.html",
    "href": "content/problems/proofs/pigeonhole.html",
    "title": "",
    "section": "",
    "text": "Use proof-by-contradiction to prove the following statement:\nProposition: If \\(m\\) items are placed into \\(n\\) boxes and \\(n &lt; m\\), then at least one box contains multiple items.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/dmoi-3.5.html",
    "href": "content/problems/proofs/dmoi-3.5.html",
    "title": "",
    "section": "",
    "text": "Prove that for all integers \\(n\\), it is the case that \\(n\\) is even if and only if \\(3n\\) is even. This proof has two parts: you must show that \\(n\\) being even implies that \\(3n\\) is even; then you must show that \\(3n\\) being even implies that \\(n\\) is even.\nIn your proof, please one of the two directions using direct proof. Then, prove the other direction using proof by contrapositive.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/proofs/dobson-slomson.html",
    "href": "content/problems/proofs/dobson-slomson.html",
    "title": "",
    "section": "",
    "text": "For each of the following four statements:\n\nFirst, represent the statement using logical symbols, including quantifiers. Define any predicates you need.\n\nFor example, a symbolic representation of the first statement would be \\(\\forall m \\in \\mathbb{Z}: E(m) \\rightarrow E(7m+4)\\), where \\(E(x)\\) is the predicate “\\(x\\) is even.”\n\nThen, write a careful proof of the statement, justifying each of your steps. You do not need to use logical symbols in your proofs.\n\n\nIf \\(m\\) is an even integer then \\(7m+4\\) is an even integer.\nIf \\(m\\) is an even integer and \\(n\\) is an odd integer then \\(m+n\\) is an odd integer.\nIf \\(m\\) is an even integer and \\(n\\) is an odd integer then \\(mn\\) is an even integer.\nIf \\(a\\), \\(b\\), and \\(c\\) are integers such that \\(a\\) divides \\(b\\) and \\(b\\) divides \\(c\\), then \\(a\\) divides \\(c\\).\n\nNotation note: For some of these statements, you may find yourself needing to write things like \\(\\forall x \\in \\mathbb{Z}, \\forall y \\in \\mathbb{Z}\\). A common notational shortcut is to write \\(\\forall x, y \\in \\mathbb{Z}\\) to mean the same thing while saving some space.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/logic/python-to-logic-1.html",
    "href": "content/problems/logic/python-to-logic-1.html",
    "title": "",
    "section": "",
    "text": "Your friend tells you about a cool function they wrote in Python. Their function accepts 3 boolean arguments and returns a boolean return value.\n\ndef f(p, q, r):\n    \"\"\"\n    p, q, and r are assumed to be booleans. \n    returns: boolean\n    \"\"\"\n    \n    a = p and q\n    b = not (q or r)\n    c = a and b\n    \n    return c\n\nPart A\nWrite a logical expression in terms of \\(p\\), \\(q\\), and \\(r\\) (using symbols like \\(\\lnot, \\lor, \\land\\)) which has the same value as the return value of your friend’s function f.\n\n\nPart B\nMake a truth table for your expression. Please show the values of a, b, and c in each line of your truth table.\nDo you notice anything strange about your truth table?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/logic/implications-1.html",
    "href": "content/problems/logic/implications-1.html",
    "title": "",
    "section": "",
    "text": "Consider the expression \\(\\lnot P \\land (Q \\rightarrow P)\\).\nUse logical equivalences to simplify this expression as far as you can. If you knew this expression was true, what could you conclude about \\(Q\\)?\nHint: Get everything in terms of \\(\\land\\), \\(\\lor\\), and \\(\\lnot\\) and then use the following two rules of logical equivalence:\n\nDistributive Law: \\(A \\land (B \\lor C) \\equiv (A \\land B) \\lor (A \\land C)\\).\nLaw of Excluded Middle: \\(A \\land \\lnot A \\equiv \\mathrm{F}\\), i.e. \\(A \\land \\lnot A\\) is a logical contradiction.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/logic/implications-3.html",
    "href": "content/problems/logic/implications-3.html",
    "title": "",
    "section": "",
    "text": "We often write the biconditional “if and only if” as \\(p \\leftrightarrow q\\). Make a truth table for \\(p \\leftrightarrow q\\) by making a detailed truth table for its expanded form, \\((p \\rightarrow q) \\land (q \\rightarrow p)\\).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/asymptotics-1.html",
    "href": "content/problems/recursion-recurrence/asymptotics-1.html",
    "title": "Part A",
    "section": "",
    "text": "Consider a recursion relation of the form \\[\n\\begin{aligned}\n    a_n = p a_{n-1} + 1\n\\end{aligned}\n\\]\nwith initial condition \\(a_0\\).\nWrite a function in Python or Java that computes \\(a_n\\). Your function should accept 3 arguments: \\(p\\), \\(a_0\\), and \\(n\\). Use your function to compute \\(a_{10}\\) when \\(p = 2\\) and \\(a_0 = -1\\).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/asymptotics-1.html#part-b",
    "href": "content/problems/recursion-recurrence/asymptotics-1.html#part-b",
    "title": "Part A",
    "section": "Part B",
    "text": "Part B\nUse your function to experiment. Find values of \\(p\\) and \\(a_0\\) such that:\n\n\\(a_n\\) becomes closer and closer to some fixed, finite number as \\(n\\) grows large.\n\\(a_n\\) “blows up” (gets very big) as \\(n\\) grows large.\n\\(a_n\\) flips between positive and negative values as \\(n\\) grows large."
  },
  {
    "objectID": "content/problems/recursion-recurrence/newton-square-root.html",
    "href": "content/problems/recursion-recurrence/newton-square-root.html",
    "title": "Introduction",
    "section": "",
    "text": "Consider the following algorithm. This algorithm is used to compute a familiar mathematical quantity. It does so by repeatedly computing the sequence defined by the recurrence relation\n\\[\n\\begin{aligned}\n    x_{n+1} = \\frac{1}{2}\\left(x_n + \\frac{a}{x_n}\\right)\n\\end{aligned}\n\\]\nfor some input number \\(a\\). We do this until the difference \\(|x_{n+1} - x_n|\\) is smaller than some \\(\\epsilon\\). The algorithm outputs the final value of \\(x\\) after this threshold is reached. Here’s a more formal description of this algorithm in pseudocode:\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/newton-square-root.html#part-a",
    "href": "content/problems/recursion-recurrence/newton-square-root.html#part-a",
    "title": "Introduction",
    "section": "Part A",
    "text": "Part A\nWrite a function in Python or Java that implements Algorithm 1. The user should be able to specify the values of \\(a\\) and \\(\\epsilon\\).\nNotes:\n\nIt is possible but not required (or easier) to do this with a recursive function.\nSet the default value of \\(\\epsilon\\) at \\(10^{-16}\\). In Python this can be done by writing epsilon = 1e-16 in the appropriate location.\nIt’s fun, though not required, to print the value of \\(x\\) at each iteration.\n\n\nPart B\nWhat familiar mathematical quantity does this function approximately compute? You don’t have to reason about this function mathematically – just try a few values of a and make an informed guess.\nNote: proving the answer to this question, and describing how well the function approximates its target, is a classical question in numerical analysis."
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html",
    "title": "",
    "section": "",
    "text": "Suppose that we have a row of \\(n\\) parking spaces. An urban planner with a mathematical hobby has asked the following question:\n\nIf all cars take up one parking space, and all trucks take up two parkings paces, how many ways are there to fill a row of \\(n\\) parking spaces with cars and trucks?\n\nFor example, here are the 5 ways to fill a row of 4 parking spaces with cars and trucks.\nImage credit: John Hammond\n\nIf we let \\(P_n\\) describe the number of ways to fill \\(n\\) parking spaces with cars and trucks, this illustration shows that \\(P_4 = 5\\).\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#introduction",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#introduction",
    "title": "",
    "section": "",
    "text": "Suppose that we have a row of \\(n\\) parking spaces. An urban planner with a mathematical hobby has asked the following question:\n\nIf all cars take up one parking space, and all trucks take up two parkings paces, how many ways are there to fill a row of \\(n\\) parking spaces with cars and trucks?\n\nFor example, here are the 5 ways to fill a row of 4 parking spaces with cars and trucks.\nImage credit: John Hammond\n\nIf we let \\(P_n\\) describe the number of ways to fill \\(n\\) parking spaces with cars and trucks, this illustration shows that \\(P_4 = 5\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-a",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-a",
    "title": "",
    "section": "Part A",
    "text": "Part A\nDraw pictures to compute the values of \\(P_1\\), \\(P_2\\), and \\(P_3\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-b",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nMake a guess about the value of \\(P_n\\) for any \\(n\\) in terms of a sequence we’ve seen before in this class."
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-c",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-c",
    "title": "",
    "section": "Part C",
    "text": "Part C\nLet’s see if we can prove your guess. Consider a row of \\(n \\geq 3\\) parking spaces. The first space can be occupied by either a car or a truck (which then also occupies the second space). In either case, there is some number of ways to fill in the remaining spaces.\n\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a car?\nHow many ways are there to fill in the remaining spaces if the first space is occupied by a truck?\nCombine these two results in order to obtain a recurrence relation for \\(P_n\\). You should choose between the principles of multiplication and addition."
  },
  {
    "objectID": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-d",
    "href": "content/problems/recursion-recurrence/fibonacci-combinatorics.html#part-d",
    "title": "",
    "section": "Part D",
    "text": "Part D\nUse a combinatorial proof to prove the following theorem: for all \\(n \\geq 1\\),\n\\[\n\\begin{aligned}\n    P_n^2 + P_{n+1}^2 = P_{2n+2}\\;.\n\\end{aligned}\n\\]\nRemember that in a combinatorial proof, you don’t do much algebra! Instead, you just argue that both sides of the equation are different methods of counting the number of ways to do the same thing. In this case, you should count the number of ways to fill a row of \\(2n+2\\) parking spaces.\nHint: Consider whether or not there is a single truck occupying both of the spaces \\(n+1\\) and \\(n+2\\)."
  },
  {
    "objectID": "content/problems/recursion-recurrence/mini-hanoi.html",
    "href": "content/problems/recursion-recurrence/mini-hanoi.html",
    "title": "",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/cards-1.html",
    "href": "content/problems/sets/cards-1.html",
    "title": "",
    "section": "",
    "text": "In a standard deck of playing cards, there are a total of 52 cards. Each card has a number and a suit.\n\nThe card numbers can be from 1 to 13.\n\nThe 1 is usually called the ace. Cards 11-13 are usually called the jack, queen, and king, and are collectively referred to as “face cards.”\n\nThe card suits are spades, clubs, hearts and diamonds. Spades and clubs are “black” suits while hearts and diamonds are “red” suits.\n\n\nPart A\nDescribe two sets \\(A\\) and \\(B\\) such that the set \\(D = A\\times B\\) describes a deck of cards. In particular, \\(D\\) should have 52 elements and you should describe a recipe for figuring out which card corresponds to which element of \\(D\\).\n\n\nPart B\nCompute the following cardinalities:\n\nThe number of cards that have a red suit.\nThe number of face cards.\nThe number of cards that have a red suit or which are face cards.\n\nComment on your answer in item 3. How does it relate to the sum of the answers in items 1 and 2? How do you explain the difference?\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/dmoi-0-3-13-follow-up.html",
    "href": "content/problems/sets/dmoi-0-3-13-follow-up.html",
    "title": "",
    "section": "",
    "text": "Recall that \\(\\mathbb{Z} = \\{\\ldots,-2, -1, 0, 1, 2 \\ldots\\}\\) (the integers). Let \\(\\mathbb{Z}^{+} = \\{1, 2, 3 \\ldots\\}\\) be the set of positive integers. Let \\(2\\mathbb{Z}\\) be the set of even integers, \\(3\\mathbb{Z}\\) the set of integers that are multiples of 3, and so on.\n\nDescribe the set \\(\\{1, 4, 7, 10, \\ldots\\}\\) in set-builder notation. Do this two ways: once using the notation \\(k\\mathbb{Z}\\) defined above, and once by not using this notation.\nRecall that, for integers \\(x\\), \\(y\\), and $zY, \\(x \\equiv y \\pmod z\\) if \\(x\\) and \\(y\\) have the same integer remainder when divided by \\(z\\). Describe the set \\(\\{x \\in \\mathbb{Z} : x \\equiv 3 \\pmod 4\\}\\) in set-builder notation without using the \\(\\pmod{}\\) operator.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/set-operations.html",
    "href": "content/problems/sets/set-operations.html",
    "title": "",
    "section": "",
    "text": "Define the two sets: \\[\n\\begin{aligned}\nA &= \\{x \\in \\mathbb{N} : x = y^2 \\text{ for some $y \\in \\mathbb{Z}$ such that $-6\\leq y \\leq 6$} \\} \\\\\nB &= \\{x \\in \\mathbb{N} : x = 3z+1 \\text{ for some $z \\in \\mathbb{Z}$}\\} \\\\\n\\end{aligned}\n\\]\n\nPart A\nWrite the set \\(A\\) in roster notation. Then, compute \\(|A|\\).\n\n\nPart B\nWrite the set \\(A \\cap B\\) in roster notation. Then, compute \\(|A \\cap B|\\).\n\n\nPart C\nWrite down at least three elements of \\(B \\setminus A\\). You do not need to write the entire set or express it in set-builder notation.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/subset-inclusion-2.html",
    "href": "content/problems/sets/subset-inclusion-2.html",
    "title": "",
    "section": "",
    "text": "Let \\(A = \\{x \\in \\mathbb{Z} \\;:\\; x = 2y+1 \\text{ for some } y \\in \\mathbb{Z}\\}\\) and let \\(B = \\{x \\in \\mathbb{Z} \\;:\\; x = 4k-1 \\text{ for some } k \\in \\mathbb{Z}\\}\\).\n\nPart A\nWrite out at least three distinct elements of \\(A\\) and three distinct elements of \\(B\\).\n\n\nPart B\nIs \\(9 \\in A\\)? Is \\(9 \\in B\\)?\n\n\nPart C\nUse the element method to write a proof that \\(B \\subseteq A\\).\n\n\nPart D\nWould your proof from Part C still work if we instead defined \\(B = \\{x \\in \\mathbb{Z} \\;:\\; x = 2k+1 \\text{ for some } k \\in \\mathbb{N}\\}\\)? Briefly explain why or why not.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/element-method-2.html",
    "href": "content/problems/sets/element-method-2.html",
    "title": "",
    "section": "",
    "text": "Define the two sets\n\\[\n\\begin{aligned}\nA &= \\{x \\in \\mathbb{Z} \\;|\\; x &gt; 0\\;,\\; x^2 \\leq 32\\} \\\\\nB &= \\{x \\in \\mathbb{Z} \\;|\\; x &gt; 0 \\;,\\; \\log_2 x &lt; 7\\}\n\\end{aligned}\n\\]\nUse the element method to write a proof that that \\(A \\subseteq B\\).\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/set-builder-1.html",
    "href": "content/problems/sets/set-builder-1.html",
    "title": "",
    "section": "",
    "text": "Write the following sets by listing their elements between braces:\n\n\\(\\left\\{ x \\in \\mathbb{Z} \\; : x^2 \\leq 10 \\right\\}\\)\n\\(\\left\\{ x \\in \\mathbb{N} \\; : x \\leq 10 \\right\\} \\cap \\left\\{ x \\in \\mathbb{Z} \\; : x \\text{ is a prime number.} \\right\\}\\)\n\\(\\left\\{ x \\in \\mathbb{Z} \\; : x/2 \\geq 10 \\right\\} \\cap \\left\\{ x \\in \\mathbb{Z} \\; : 5x &lt; 100 \\right\\}\\)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/sets/inclusion-exclusion.html",
    "href": "content/problems/sets/inclusion-exclusion.html",
    "title": "",
    "section": "",
    "text": "Your excited friend tells you about this cool “fact” that they learned in their structural engineering course, STEN 0200: Computing Mathematics of Foundations. Their “fact” is:\nFor any two sets \\(A\\) and \\(B\\), \\[\n\\lvert A \\setminus B \\rvert = \\lvert A \\rvert - \\lvert B \\rvert\\;.\n\\tag{1}\\]\n“How cool,” you say, while politely smiling and effortlessly remembering that \\(A\\setminus B\\) is the set of elements of \\(A\\) which are not elements of \\(B\\).\n\nPart A\nGive an example of sets \\(A\\) and \\(B\\) such that Equation 1 is true.\n(Your friend grins.)\n\n\nPart B\nGive an example of sets \\(A\\) and \\(B\\) such that Equation 1 is not true, and explain why.\n(Your friend groans. Maybe they should have taken CSCI 0200 instead…)\n\n\nPart C\nDerive a correct formula for \\(\\lvert A \\setminus B \\rvert\\), justifying each step of your calculation. Please use only the set complement operator \\(\\bar{B}\\), the set union operator \\(\\cup\\), and the set cardinality operator \\(\\lvert \\cdot \\rvert\\) (you may not need all of these operators). You can also use arithmetic operations like \\(+\\), \\(-\\), etc.\n(Your friend listens eagerly to your algebraic derivation! They are especially impressed with the way you took things step by step and justified each of your operations.)\n\n\nPart D\nUsing Venn diagrams, find a simple formula for \\(\\lvert A \\setminus B \\rvert\\) which uses only the set cardinality operator \\(\\lvert \\cdot \\rvert\\) and the set intersection operator \\(\\cap\\), but not the union operator \\(\\cup\\) or the complement operator \\(\\bar{B}\\).\n(Wow! Your friend thinks your drawing looks really cool, and that you two really should hang out more.)\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/graphs/adjacency-matrix.html",
    "href": "content/problems/graphs/adjacency-matrix.html",
    "title": "",
    "section": "",
    "text": "Introduction\nIn this class, “matrix” just means “square array of numbers.”\nThe adjacency matrix of a graph \\(G\\) with \\(n\\) nodes is an \\(n\\times n\\) binary matrix that we often call \\(\\mathbf{A}\\). It’s entries are given by\n \\[\n\\begin{aligned}\n    a_{ij} = \\begin{cases}\n        1 &\\quad \\text{there is an edge between node $i$ and node $j$} \\\\\n        0 &\\quad \\text{there is no edge between node $i$ and node $j$}\n    \\end{cases}\n\\end{aligned}\n\\]\\(a_{ij}\\) is the entry of \\(\\mathbf{A}\\) that is in the \\(i\\)th row and \\(j\\)th column.\nFor example, here is a graph with \\(n = 6\\) nodes:\n\n\n\n\n\n\nG\n\n\n\n1\n\n1\n\n\n\n2\n\n2\n\n\n\n1--2\n\n\n\n\n3\n\n3\n\n\n\n1--3\n\n\n\n\n2--3\n\n\n\n\n4\n\n4\n\n\n\n3--4\n\n\n\n\n5\n\n5\n\n\n\n4--5\n\n\n\n\n6\n\n6\n\n\n\n5--6\n\n\n\n\n6--4\n\n\n\n\n\n\n\n\nHere is the adjacency matrix of this graph:\n\\[\n\\begin{aligned}\n    \\mathbf{A} = \\left[\\begin{matrix}\n    0 & 1 & 1 & 0 & 0 & 0 \\\\\n    1 & 0 & 1 & 0 & 0 & 0 \\\\\n    1 & 1 & 0 & 1 & 0 & 0 \\\\\n    0 & 0 & 1 & 0 & 1 & 1 \\\\\n    0 & 0 & 0 & 1 & 0 & 1 \\\\\n    0 & 0 & 0 & 1 & 1 & 0\n    \\end{matrix}\\right]\n\\end{aligned}\n\\]\nNote that an edge between \\(i\\) and \\(j\\) corresponds to two entries of \\(\\mathbf{A}\\): the \\(a_{ij}\\) entry and the \\(a_{ji}\\) entry.\n\n\nPart A\nA walk of length \\(k\\) is a walk that traverses exactly \\(k\\) edges. For example, a walk of length \\(1\\) traverses only a single edge. \\((1, 2)\\) is a walk of length 1 in the example graph above. \\((1, 2), (2, 3)\\) is a walk of length 2, but not a walk of length 1.\n\nHow many walks of length 1 from node \\(4\\) to node \\(5\\) are there in the example graph?\nHow many walks of length 1 are there from node \\(4\\) to node \\(2\\)?\nWhat is entry \\(a_{45}\\) in the adjacency matrix? What is entry \\(a_{42}\\)?\nMake a conjecture: what information does entry \\(a_{ij}\\) contain about the the number of walks of length \\(1\\) from node \\(i\\) to node \\(j\\)?\n\n\n\nPart B\nLet’s define a new number with the following formula:\n \\[\n\\begin{aligned}\n    b_{ij} = \\sum_{k = 1}^n a_{ik}a_{kj}\\;.\n\\end{aligned}\n\\]If you have used matrix multiplication before, \\(b_{ij}\\) is the \\(ij\\)th entry of \\(\\mathbf{A}^2\\).\n\nUsing the example graph, compute the number of walks of length 2 from node 1 to node 2, node 1 to node 4, node 3 to node 4, and node 1 to node 5.\nUsing the definition, compute \\(b_{12}\\), \\(b_{14}\\), \\(b_{34}\\), and \\(b_{15}\\).\nState a conjecture describing the relationship between \\(b_{ij}\\) and the number of walks of length 2.\n\n\n\nPart C\nThe counting principles of addition and multiplication both appear in the formula for the number of walks of length 2 between nodes \\(i\\) and \\(j\\) as given above. Explain the role of each of these principles in this formula. Why do we multiply \\(a_{ik}\\) by \\(a_{kj}\\)? Why do we add across all possibilities \\(k\\)? In your response, please include the words “sequential” and “disjoint” or similar.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/graphs/euler-paths.html",
    "href": "content/problems/graphs/euler-paths.html",
    "title": "",
    "section": "",
    "text": "For each of the items 1. through 4. below, draw a \\(G\\) with at least \\(5\\) nodes that matches the given specifications. If it is not possible to match a specification, then explain why.\nFor each part, please do not include any nodes of degree 0 or 1 in your solution.\n\n\\(G\\) has an Euler path and an Euler circuit.\n\\(G\\) has an Euler path but not an Euler circuit.\n\\(G\\) has an Euler circuit but not an Euler path.\n\\(G\\) has neither an Euler path nor an Euler circuit.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/proving-a-function-2.html",
    "href": "content/problems/induction/proving-a-function-2.html",
    "title": "",
    "section": "",
    "text": "Consider the following Python function, which uses recursion to compute the largest integer in a list of unique integers (no duplicates):\n\ndef recursive_max(L):\n    \"\"\"\n    return the largest integer in a list of unique integers. \n\n    args: \n      L, a list containing integers\n\n    returns: int, the largest integer contained in L\n    \"\"\"\n\n    # base case\n    if len(L) == 1:\n        return L[0]\n    \n    # recursive step\n    else: \n        prev_max = recursive_max(L[:-1]) \n        if prev_max &gt;= L[-1]:            \n            return prev_max \n        else:\n            return L[-1]\n\nUse induction to prove that this function works! More specifically, prove the following claim:\nClaim: For any integer \\(n \\geq 1\\) and for any list L containing \\(n\\) unique integers, the function recursive_max correctly returns the largest element of L.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/strong-induction.html",
    "href": "content/problems/induction/strong-induction.html",
    "title": "",
    "section": "",
    "text": "Use strong induction to prove the following statement:\nProposition: Suppose that \\(x\\in \\mathbb{R}\\) is some real number with the property that \\(x + \\frac{1}{x}\\) is an integer. Then, for any \\(n \\geq 1\\), the number\n\\[\n\\begin{aligned}\n    x^n + \\frac{1}{x^n}\n\\end{aligned}\n\\]\nis also an integer.\n\nOptional Challenge\n(not required)\nIn the problem, we assumed that \\(x + \\frac{1}{x}\\) was an integer. Call this integer \\(h\\). So, we have assumed that \\(x + \\frac{1}{x} = h\\).\n\nWhat is required of \\(h\\) in order to guarantee that this equation indeed has a real solution in \\(x\\)?\nSuppose that this equation has at least one real solution in \\(x\\). How many possible solutions in \\(x\\) are there?\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/handshakes.html",
    "href": "content/problems/induction/handshakes.html",
    "title": "",
    "section": "",
    "text": "Part A\nProve the following theorem using either regular or strong induction.\nTheorem: Suppose that \\(n\\geq 2\\) people are at a gathering. Every person shakes hands with every other person, but not themselves. Then, the number of total handshakes which occur is \\(\\frac{n(n-1)}{2}\\).\n\n\nPart B\nIn Part A, did you use regular or strong induction? Describe the specific feature(s) of your proof that distinguish which one you used.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/stamps.html",
    "href": "content/problems/induction/stamps.html",
    "title": "",
    "section": "",
    "text": "Suppose that we have two kinds of stamps: one kind that is worth 4 cents and one kind that is worth 5 cents.\nProve the following claim using strong induction.\nClaim Every integer number of cents larger than 12 can be made from 4-cent and 5-cent stamps.\nNote: A more formal mathematical statement of this claim is:\n\\[\n\\forall n \\geq 12, \\exists x, y \\in \\mathbb{N}: n = 4x + 5y\n\\]\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/dmoi-2-5-2.html",
    "href": "content/problems/induction/dmoi-2-5-2.html",
    "title": "",
    "section": "",
    "text": "Prove that for all \\(n \\in \\mathbb{N}\\), \\(6^n-1\\) is a multiple of 5.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/powers-of-2.html",
    "href": "content/problems/induction/powers-of-2.html",
    "title": "",
    "section": "",
    "text": "Prove the following theorem:\nTheorem: For any natural number \\(n\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 1}^n 2^i = 2\\left(2^n - 1\\right)\\;.\n\\end{aligned}\n\\]\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/problems/induction/powers-of-2.html#part-a",
    "href": "content/problems/induction/powers-of-2.html#part-a",
    "title": "",
    "section": "",
    "text": "Prove the following theorem:\nTheorem: For any natural number \\(n\\),\n\\[\n\\begin{aligned}\n    \\sum_{i = 1}^n 2^i = 2\\left(2^n - 1\\right)\\;.\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "content/problems/induction/powers-of-2.html#part-b",
    "href": "content/problems/induction/powers-of-2.html#part-b",
    "title": "",
    "section": "Part B",
    "text": "Part B\nDid your proof use regular induction, strong induction, or neither? How do you know?"
  },
  {
    "objectID": "content/modules/11-logic-2/prep.html",
    "href": "content/modules/11-logic-2/prep.html",
    "title": "Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "As we enter the second week, we are going to pick up the pace on introducing videos, readings, and warmup problems.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/11-logic-2/prep.html#optional-reading",
    "href": "content/modules/11-logic-2/prep.html#optional-reading",
    "title": "Implication, Inverse, Converse, and Contrapositive",
    "section": "Optional Reading",
    "text": "Optional Reading\n\nBOP 2.3-2.6"
  },
  {
    "objectID": "content/modules/11-logic-2/prep.html#problem-1",
    "href": "content/modules/11-logic-2/prep.html#problem-1",
    "title": "Implication, Inverse, Converse, and Contrapositive",
    "section": "Problem 1",
    "text": "Problem 1\nConsider the following propositions:\n\n\\(P\\): I achieved a Satisfactory (S) assessment on at least 11 Learning Targets.\n\\(Q\\): I received an E on at least 4 Lab assignments.\n\\(R\\): I had an N or an R on at least one Lab assignment by the end of the semester.\n\\(S\\): I missed 4 or more warmups.\n\\(T\\): I earned an A in CSCI 0200.\n\nConstruct a correct logical statement using \\(\\lnot\\), \\(\\lor\\), \\(\\land\\), \\(\\rightarrow\\), and/or \\(\\leftrightarrow\\) to describe the relationship between these five propositions."
  },
  {
    "objectID": "content/modules/11-logic-2/prep.html#problem-2",
    "href": "content/modules/11-logic-2/prep.html#problem-2",
    "title": "Implication, Inverse, Converse, and Contrapositive",
    "section": "Problem 2",
    "text": "Problem 2\nConsider the expression \\(\\lnot P \\land (Q \\rightarrow P)\\).\nUse logical equivalences to simplify this expression as far as you can. If you knew this expression was true, what could you conclude about \\(Q\\)?\nHint: Get everything in terms of \\(\\land\\), \\(\\lor\\), and \\(\\lnot\\) and then use the following two rules of logical equivalence:\n\nDistributive Law: \\(A \\land (B \\lor C) \\equiv (A \\land B) \\lor (A \\land C)\\).\nLaw of Excluded Middle: \\(A \\land \\lnot A \\equiv \\mathrm{F}\\), i.e. \\(A \\land \\lnot A\\) is a logical contradiction."
  },
  {
    "objectID": "content/modules/11-logic-2/prep.html#problem-3",
    "href": "content/modules/11-logic-2/prep.html#problem-3",
    "title": "Implication, Inverse, Converse, and Contrapositive",
    "section": "Problem 3",
    "text": "Problem 3\nWe often write the biconditional “if and only if” as \\(p \\leftrightarrow q\\). Make a truth table for \\(p \\leftrightarrow q\\) by making a detailed truth table for its expanded form, \\((p \\rightarrow q) \\land (q \\rightarrow p)\\)."
  },
  {
    "objectID": "content/modules/11-logic-2/in-class.html#section",
    "href": "content/modules/11-logic-2/in-class.html#section",
    "title": "In Class:  Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "Inverse, Converse, Contrapositive\n \nIf I hydrate then I’ll learn better\n\nTranslate to a logical expression (define any propositions you need).\nUsing logical symbols, form the:\n\nInverse\nConverse\nContrapositive\n\nTranslate each of these three back into English."
  },
  {
    "objectID": "content/modules/11-logic-2/in-class.html#section-1",
    "href": "content/modules/11-logic-2/in-class.html#section-1",
    "title": "In Class:  Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "Logical Equivalence\nConsider the following two statements:\n\n\\(\\lnot (P \\rightarrow Q)\\)\n\\(P \\land \\lnot Q\\).\n\nAre these two statements logically equivalent? What are two strategies we could use to find out?\nDMOI 3.1.6"
  },
  {
    "objectID": "content/modules/11-logic-2/in-class.html#section-2",
    "href": "content/modules/11-logic-2/in-class.html#section-2",
    "title": "In Class:  Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "Boolean Circuits\nA Boolean circuit is an abstract description of the fundamental operation building block of computation: performing an operation on one or more bits.\n\n\n\n\nflowchart LR\n  \n  M(0) --&gt; N[NOT]\n  N --&gt; Q{1}\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n  \n\n  A(1) --&gt; C[OR]\n  B(0) --&gt; C\n  C --&gt; F{1}\n\n  E(1) --&gt; G[AND]\n  H(0) --&gt; G\n  G --&gt; I{0}\n\n\n\n\n\n\n            \nWe can string Boolean circuits together to make more complicated ones:\n\n\n\n\nflowchart LR\n  A(0) --&gt; C[NOT]\n  B(1) --&gt; D[OR]\n  C --&gt; D\n  D --&gt; E[NOT]\n  E --&gt; F{?}"
  },
  {
    "objectID": "content/modules/11-logic-2/in-class.html#section-3",
    "href": "content/modules/11-logic-2/in-class.html#section-3",
    "title": "In Class:  Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "Boolean Circuits\nCan you draw a simpler Boolean circuit that has the same output in all cases?\n \n\n\n\n\nflowchart LR\n  A(p) --&gt; C[NOT]\n  B(q) --&gt; D[OR]\n  C --&gt; D\n  D --&gt; E[NOT]\n  E --&gt; F{OUTPUT}"
  },
  {
    "objectID": "content/modules/11-logic-2/in-class.html#section-4",
    "href": "content/modules/11-logic-2/in-class.html#section-4",
    "title": "In Class:  Implication, Inverse, Converse, and Contrapositive",
    "section": "",
    "text": "Fancy Vocab Time: Isomorphism\nInformally, two sets of things are isomorphic if you can translate back and forth between them without losing “structure.”\nIn our case:\n\nFor every logical expression there is a unique corresponding Boolean circuit.\nFor every Boolean circuit there is a unique logical expression.\nI can simplify Boolean circuits using a three-step process:\n\nTranslate to logical expression.\nSimplify logical expression using logical equivalences.\nTranslate back to Boolean expression.\n\n\nWe’ll formally define isomorphisms once we’ve studied sets a bit more."
  },
  {
    "objectID": "content/modules/01-math-and-me/prep.html",
    "href": "content/modules/01-math-and-me/prep.html",
    "title": "Math Autobiography",
    "section": "",
    "text": "This assignment is adapted from Dr. Spencer Bagley at Westminster University.\nYour first assignment for CSCI 0200 is to write a short mathematical autobiography.\nThe purpose of this assignment is for you to reflect on your experiences with mathematics. We’ll be encountering a lot of different kinds of mathematics in this course, and relating that mathematics to our lives and our interests in computation. We’ll both get more out of this encounter if we understand what mathematical experiences you’re bringing with you.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/01-math-and-me/prep.html#prompt",
    "href": "content/modules/01-math-and-me/prep.html#prompt",
    "title": "Math Autobiography",
    "section": "Prompt",
    "text": "Prompt\nDescribe your history as a learner and user of mathematics. You might include things like: experiences with teachers (at any level, in any course), good or bad teachers (and what made them good or bad), how your attitude towards mathematics has changed over the years, whether you like mathematics or not, what feels good about doing math, what feels bad about doing math.\nPlease conclude your autobiography with a brief paragraph describing how you’re feeling about starting CSCI 0200. Are you nervous? Excited? What have you heard from your friends? What are you expecting?\nIn the spirit of sharing, here’s my math autobiography."
  },
  {
    "objectID": "content/modules/01-math-and-me/prep.html#specifications",
    "href": "content/modules/01-math-and-me/prep.html#specifications",
    "title": "Math Autobiography",
    "section": "Specifications",
    "text": "Specifications\nFormat: You can prepare your math autobiography using any software you wish, but you must submit it as a PDF file on Canvas. If you like using word processors, the simplest way to achieve this is to Print as PDF.\nLength: Your math autobiography should show reflection on your experiences. If you’re only writing few paragraphs, there’s more for you to think about. More than a (single-spaced) page probably isn’t necessary. If you find yourself spending more than 90 minutes on this assignment, wrap up your current sentence and submit your autobiography.\nGrading: This is our first warmup assignment. Per the syllabus, warmup assignments are graded Complete or Incomplete/Missing. For Complete, you just need to spend some careful time thinking and writing. Typos, grammar mistakes, etc. are not an issue on this assignment.\nSubmission: Please submit your math autobiography on Canvas."
  },
  {
    "objectID": "content/modules/31-functions/prep.html",
    "href": "content/modules/31-functions/prep.html",
    "title": "Videos (~20 minutes)",
    "section": "",
    "text": "The Intuitive Idea of a Function (5:51)\nFormal Definition of a Function using the Cartesian Product (5:47)\nExample: Is this Relation a Function? (5:09)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/31-functions/prep.html#problem-1",
    "href": "content/modules/31-functions/prep.html#problem-1",
    "title": "Videos (~20 minutes)",
    "section": "Problem 1",
    "text": "Problem 1\n\nAt the end of this course, every student will receive a letter grade. Consider the relation of the form \\((\\mathrm{Student}, \\mathrm{Grade})\\). Here are some example entries of this relation:\n\\[\n\\begin{aligned}\n&(\\mathrm{Xenith} ,&\\quad B+&) \\\\\n&(\\mathrm{Grace} ,&\\quad A\\phantom{+}&) \\\\\n&(\\mathrm{Eun} ,& \\quad B-&) \\\\\n&(\\mathrm{Natasha} ,&\\quad A-&) \\\\\n\\vdots\n\\end{aligned}\n\\]\n\nPart A\nExplain why this relation is a function. Then, describe the sets that are its domain and codomain.\n\n\nPart B\nIs this function injective, surjective, or bijective? For each, state either “definitely,” “definitely not,” or “it depends.” Explain your answer in each case."
  },
  {
    "objectID": "content/modules/31-functions/prep.html#problem-2",
    "href": "content/modules/31-functions/prep.html#problem-2",
    "title": "Videos (~20 minutes)",
    "section": "Problem 2",
    "text": "Problem 2\nFor each of the following situations:\n\nWrite a recursive definition for a function \\(f\\) that describes the specified quantity. Please include the initial condition!!\nCarefully describe the domain and codomain of \\(f\\)."
  },
  {
    "objectID": "content/modules/31-functions/prep.html#part-a-1",
    "href": "content/modules/31-functions/prep.html#part-a-1",
    "title": "Videos (~20 minutes)",
    "section": "Part A",
    "text": "Part A\nYou place \\(C\\) dollars into a bank with an interest rate of \\(k\\%\\). This means that your money grows by a factor of \\(1 + \\frac{k}{100}\\) each year. The function \\(f(n)\\) describes the amount of money in your account after \\(n\\) years."
  },
  {
    "objectID": "content/modules/31-functions/prep.html#part-b-1",
    "href": "content/modules/31-functions/prep.html#part-b-1",
    "title": "Videos (~20 minutes)",
    "section": "Part B",
    "text": "Part B\nYou are running 4 times a week to improve your endurance. You start being able to run 1 mile without stopping. Each week, you are able to run \\(\\frac{1}{10}\\) of a mile longer without stopping. The function \\(f(n)\\) describes the distance you can run without stopping after week \\(n\\)."
  },
  {
    "objectID": "content/modules/31-functions/prep.html#part-c",
    "href": "content/modules/31-functions/prep.html#part-c",
    "title": "Videos (~20 minutes)",
    "section": "Part C",
    "text": "Part C\nThe factorial function \\(f(n) = n!\\) computes the product of all integers from \\(1\\) to \\(n\\). For example, \\(5! = 1 \\times 2 \\times 3 \\times 4 \\times 5 = 120\\)."
  },
  {
    "objectID": "content/modules/31-functions/prep.html#problem-3",
    "href": "content/modules/31-functions/prep.html#problem-3",
    "title": "Videos (~20 minutes)",
    "section": "Problem 3",
    "text": "Problem 3\nConsider the function \\(f:\\mathbb{N} \\rightarrow \\mathbb{N}\\) given by \\(f(1) = 1\\) and \\(f(n) = f(n-1) + n - 1\\).\n\nCompute \\(f(4)\\) by hand.\nWrite a recursive function in either Python or Java that implements this function. Use it to compute \\(f(4)\\) and check that you got the same result."
  },
  {
    "objectID": "content/modules/15-sets-2/prep.html",
    "href": "content/modules/15-sets-2/prep.html",
    "title": "More On Sets",
    "section": "",
    "text": "No videos today!\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/15-sets-2/prep.html#problem-1",
    "href": "content/modules/15-sets-2/prep.html#problem-1",
    "title": "More On Sets",
    "section": "Problem 1",
    "text": "Problem 1\nDefine the two sets\n\\[\n\\begin{aligned}\nA &= \\{x \\in \\mathbb{Z} \\;|\\; x &gt; 0\\;,\\; x^2 \\leq 32\\} \\\\\nB &= \\{x \\in \\mathbb{Z} \\;|\\; x &gt; 0 \\;,\\; \\log_2 x &lt; 7\\}\n\\end{aligned}\n\\]\nUse the element method to write a proof that that \\(A \\subseteq B\\).\nHint: Recall that your proof should begin with the phrase “Let \\(x\\in A\\)” and end with a phrase similar to “Therefore, \\(x \\in B\\).”\nHint: You may find it helpful to recall the following property of logarithms. For any \\(a &gt; 0\\) and \\(b \\in \\mathbb{R}\\), \\(\\log_2a^b = b\\log_2a\\)."
  },
  {
    "objectID": "content/modules/15-sets-2/prep.html#problem-2",
    "href": "content/modules/15-sets-2/prep.html#problem-2",
    "title": "More On Sets",
    "section": "Problem 2",
    "text": "Problem 2\n(DMOI 0.3.24)\nLet \\(X = \\{n \\in \\mathbb{N}: 10 \\leq n &lt; 20\\}\\). Find examples of sets with the following properties and briefly explain why your examples are correct.\n\nA set \\(A \\subseteq \\mathbb{N}\\) with \\(\\lvert A \\rvert = 10\\) such that \\(X \\setminus A = \\{10, 12, 14\\}\\).\nA set \\(B \\in \\mathcal{P}(X)\\) with \\(\\lvert B \\rvert = 5\\).\nA set \\(C \\subseteq \\mathcal{P}(X)\\) with \\(\\lvert C \\rvert = 5\\).\nA set \\(D \\subseteq X\\times X\\) with \\(\\lvert D \\rvert = 5\\).\nA set \\(E \\subseteq X\\) such that \\(\\lvert E \\rvert \\in E\\)."
  },
  {
    "objectID": "content/modules/15-sets-2/prep.html#problem-3",
    "href": "content/modules/15-sets-2/prep.html#problem-3",
    "title": "More On Sets",
    "section": "Problem 3",
    "text": "Problem 3\nIn a standard deck of playing cards, there are a total of 52 cards. Each card has a number and a suit.\n\nThe card numbers can be from 1 to 13.\n\nThe 1 is usually called the ace. Cards 11-13 are usually called the jack, queen, and king, and are collectively referred to as “face cards.”\n\nThe card suits are spades, clubs, hearts and diamonds. Spades and clubs are “black” suits while hearts and diamonds are “red” suits.\n\n\nPart A\nDescribe two sets \\(A\\) and \\(B\\) such that the set \\(D = A\\times B\\) describes a deck of cards. In particular, \\(D\\) should have 52 elements and you should describe a recipe for figuring out which card corresponds to which element of \\(D\\).\n\n\nPart B\nCompute the following cardinalities:\n\nThe number of cards that have a red suit.\nThe number of face cards.\nThe number of cards that have a red suit or which are face cards.\n\nComment on your answer in item 3. How does it relate to the sum of the answers in items 1 and 2? How do you explain the difference?"
  },
  {
    "objectID": "content/modules/70-graphs-1/prep.html",
    "href": "content/modules/70-graphs-1/prep.html",
    "title": "Graphs and Graph Theory",
    "section": "",
    "text": "Videos (~30 mins)\n\nIntro to Graph Theory (5:52)\nProperties in Graph Theory (4:02)\nDegree of Vertices (4:56)\nEuler Paths and the 7 Bridges of Konigsberg (6:23)\n\n\n\nReading (~50 mins)\n\nDMOI 4.1\nDMOI 4.5\n\n\n\nWarmup\nThere is no submitted warmup for today.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/22-proof-practice/prep.html",
    "href": "content/modules/22-proof-practice/prep.html",
    "title": "Practice with Proofs",
    "section": "",
    "text": "No videos for today.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/22-proof-practice/prep.html#videos-0-minutes",
    "href": "content/modules/22-proof-practice/prep.html#videos-0-minutes",
    "title": "Practice with Proofs",
    "section": "",
    "text": "No videos for today."
  },
  {
    "objectID": "content/modules/22-proof-practice/prep.html#reading-45-minutes",
    "href": "content/modules/22-proof-practice/prep.html#reading-45-minutes",
    "title": "Practice with Proofs",
    "section": "Reading (~45 minutes)",
    "text": "Reading (~45 minutes)\n\nBook of Proof, Chapter 5.\n\nFocus on:\n\nReviewing the idea of contrapositive proof.\nCongruence of integers (\\(a \\equiv b \\mod{n}\\)).\nProof style."
  },
  {
    "objectID": "content/modules/22-proof-practice/prep.html#warmup-40-minutes",
    "href": "content/modules/22-proof-practice/prep.html#warmup-40-minutes",
    "title": "Practice with Proofs",
    "section": "Warmup (~40 minutes)",
    "text": "Warmup (~40 minutes)\n\nProblem 1\nHere are three facts about modular congruence which will become important for us later in the course.\n\nSymmetry: For any \\(a, b, n \\in \\mathbb{Z}\\), if \\(a \\equiv b \\pmod{n}\\), then \\(b \\equiv a \\pmod{n}\\).\n\nReflexivity: For any \\(a, n \\in \\mathbb{Z}\\), it is the case that \\(a \\equiv a \\pmod{n}\\).\n\nTransitivity: For any \\(a, b, c, n \\in \\mathbb{Z}\\), if \\(a \\equiv b \\pmod{n}\\) and \\(b\\equiv c \\pmod{n}\\), then \\(a \\equiv c \\pmod{n}\\).\n\n\n\nPart A\nHere are “proofs” of Symmetry and Reflexivity. These proofs contain the right general idea, but they are written very poorly.\nSymmetry: \\(a, b, n \\in \\mathbb{Z}\\). \\(a - b = cn\\), \\(b - a = -cn\\). \\(b = a \\pmod{n}\\).\nReflexivity: \\(a-a=0\\), since this is true for any integer. It is \\(=\\) to \\(0n\\).\nFix these proofs. For each of the two, go down the checklist in Chapter 5.3 of Book of Proof. Using this checklist, write correct, beautiful proofs that does not violate any of the rules in the list.\n\n\nPart B\nWrite a correct, beautiful proof of Transitivity which does not violate any of the rules in the list."
  },
  {
    "objectID": "content/modules/45-lattice-paths/prep.html",
    "href": "content/modules/45-lattice-paths/prep.html",
    "title": "",
    "section": "",
    "text": "No videos for today!\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/45-lattice-paths/prep.html#videos-0-minutes",
    "href": "content/modules/45-lattice-paths/prep.html#videos-0-minutes",
    "title": "",
    "section": "",
    "text": "No videos for today!"
  },
  {
    "objectID": "content/modules/45-lattice-paths/prep.html#reading-30-minutes",
    "href": "content/modules/45-lattice-paths/prep.html#reading-30-minutes",
    "title": "",
    "section": "Reading (30 minutes)",
    "text": "Reading (30 minutes)\nPlease review, with a special focus on the interpretation of binomial coefficients as counting lattice paths.\n\nDMOI 1.2: Binomial Coefficients"
  },
  {
    "objectID": "content/modules/45-lattice-paths/prep.html#warmup-50-minutes",
    "href": "content/modules/45-lattice-paths/prep.html#warmup-50-minutes",
    "title": "",
    "section": "Warmup (50 minutes)",
    "text": "Warmup (50 minutes)\n\nProblem 1\nImagine that we are working on a grid with \\(n\\) rows and \\(m\\) columns, trying to count the number of paths from the blue dot in the bottom left corner to the orange dot in the top right corner.\n\nThe correct formula for the number of paths in this grid is \\[\n\\binom{m + n - k}{m - j}\n\\]\nfor some mysterious integers \\(k\\) and \\(j\\) that do not depend on \\(n\\) and \\(m\\). Determine the values of \\(k\\) and \\(j\\) and justify your choices.\n\n\nProblem 2\nThis time, we still want to get from the blue dot at \\((1,1)\\) to the orange dot at \\((m, n)\\). Now, however, there are some walls getting in the way! We are not allowed to cross through any of the grey grid cells.\n\nWe still want to count the number of ways to get from the blue dot to the orange dot. Consider the following annotated version of the grid in which there is a green dot at the point where the two large rectangular regions intersect:\n\nSuppose that this dot is at point \\((k, j)\\), where \\(1 \\leq k \\leq m\\) and \\(1 \\leq j \\leq n\\). Give a formula in terms of \\(m\\), \\(n\\), \\(k\\), and \\(j\\) for the number of paths lattice paths from \\((1, 1)\\) to \\((m, n)\\).\nHint: how many paths are there from the blue dot to the green dot? How many paths are there from the green dot to the orange dot? How would we combine these two results to get the solution? Check against the picture to make sure your binomial coefficients line up.\nHint: If you’re struggling to give a general answer, do the problem for the grid shown instead. The orange dot is at \\((8, 5)\\) and the green dot is at \\((5, 3)\\)."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#whos-in-the-room",
    "href": "content/modules/00-intro/in-class.html#whos-in-the-room",
    "title": "Welcome  to CSCI 0200!",
    "section": "Who’s In the Room?",
    "text": "Who’s In the Room?\n  \nGo to menti.com\nEnter code 39 98 51 6\nRespond to the first prompt.\nKeep the tab open – we’ll come back to it"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section",
    "href": "content/modules/00-intro/in-class.html#section",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Soooooo\n…a math class\n…in the CS department\n…?"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-2",
    "href": "content/modules/00-intro/in-class.html#section-2",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "CS and Math Go Way Back\n\nAda Lovelace was an English mathematician and author of the first published computer program (1840).\nHer program was designed to compute an important sequence of mathematical constants on the “Difference Engine” designed by Charles Babbage.\nBabbage never completed his Difference Engine, so Lovelace’s program was never run.\nLovelace described her approach to math as “poetical science.”\n\n\n\nAda King, Countess of Lovelace. Portrait possibly by Alfred Edward Chalon, image from Wikipedia."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-3",
    "href": "content/modules/00-intro/in-class.html#section-3",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "CS and Math Go Way Back\n\nAlan Turing was an English mathematician who played a major role in developing the theory of computer science and AI.\nTuring proved that some tasks are impossible for algorithms to perform, no matter how powerful or clever they are.\nThe “Nobel Prize in Computer Science” is named the Turing Award.\nTuring was chemically castrated as a punishment for homosexuality in 1953. The UK managed to apologize for this in…2009."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-4",
    "href": "content/modules/00-intro/in-class.html#section-4",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "CS and Math Go Way Back\n\nJohn von Neumann was a Hungarian mathematician who guided the development of the first digital computers.\nThe “von Neumann architecture” remains the high-level architectural basis of the design of modern computers.\nIf you’re wondering what the first digital computers were used for, watch Oppenheimer. 😬😬😬"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-5",
    "href": "content/modules/00-intro/in-class.html#section-5",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Ok, but…\n…what is mathematics?"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-6",
    "href": "content/modules/00-intro/in-class.html#section-6",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Mathematics is the heart of AI and data science\n\n\nBrin, Sergey. “The PageRank citation ranking: bringing order to the web.” Proceedings of ASIS, 1998 98 (1998): 161-172."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-7",
    "href": "content/modules/00-intro/in-class.html#section-7",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Mathematics is the heart of machine learning\n\n\nSupport Vector Machine (SVM) is an algorithm for classifying data into groups based on past observations.\nDeisenroth, Faisal, and Ong (2020). Mathematics for Machine Learning"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-8",
    "href": "content/modules/00-intro/in-class.html#section-8",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Mathematics is the heart of algorithmic problem-solving\n\n    \nDijkstra’s algorithm finds shortest paths between points in a graph.\n(Used for e.g. vehicle routing)"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-9",
    "href": "content/modules/00-intro/in-class.html#section-9",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Math Foundations: What You Need Now To Do All That Stuff Later"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#math-and-us",
    "href": "content/modules/00-intro/in-class.html#math-and-us",
    "title": "Welcome  to CSCI 0200!",
    "section": "Math and Us",
    "text": "Math and Us\n   \nRespond to the second prompt on the Menti poll.\nIf you closed the tab, go to menti.com and enter code 39 98 51 6."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#in-this-class-you-will",
    "href": "content/modules/00-intro/in-class.html#in-this-class-you-will",
    "title": "Welcome  to CSCI 0200!",
    "section": "In This Class, You Will…",
    "text": "In This Class, You Will…\n  \n\n\n…build a mathematical toolbox for reasoning theoretically about data structures, algorithms, and the world around you.\n…test mathematical theory against computational experiments.\n…cultivate a joyful relationship with the practice of mathematics."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#the-big-picture",
    "href": "content/modules/00-intro/in-class.html#the-big-picture",
    "title": "Welcome  to CSCI 0200!",
    "section": "The Big Picture",
    "text": "The Big Picture\n\n\n\n\nmindmap\n  root((CSCI 0200))\n    )**Module 1**(\n        (Logic)\n          (Propositional logic)\n            (Boolean algebra)\n            (Circuit design)\n        (Sets)\n            (Set Operations)\n            (Logical quantifiers)\n    )**Module 2**(\n        (Relations)\n            (Functions)\n            (Equivalence Relations)\n        (Proof Techniques)\n            (Direct)\n            (Indirect)\n            (Contradiction)\n            (Induction)\n                (Weak)\n                (Strong)\n    )**Module 3**(\n        (Counting)\n            (Sum and product principles)\n            (Permutations and combinations)\n            (Combinatorial proofs)\n        (Recurrence Relations)\n            (Asymptotics)\n            (Divide and combine)\n    )**Module 4**(\n        (Probability)\n            (Distributions)\n                (Conditioning)\n            (Random variables)\n                (Expectation)\n        (Graphs)\n            (Special graphs)\n                (Trees )\n                (Cycles)\n            (Algorithms)"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-10",
    "href": "content/modules/00-intro/in-class.html#section-10",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Your Affinity Vegetable\n \n1. Split into teams\n2. Go around and share your name and:\nIf you were a vegetable, which vegetable would you be and why?"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-11",
    "href": "content/modules/00-intro/in-class.html#section-11",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Your Affinity Vegetable\n \n3. Team leader: lead your team in finding a delicious dish that incorporates all of your vegetables.\nBe ready to share!"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-12",
    "href": "content/modules/00-intro/in-class.html#section-12",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "In a flipped classroom, you complete readings and watch lectures before our scheduled class time."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-13",
    "href": "content/modules/00-intro/in-class.html#section-13",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Mondays and Wednesdays\nBefore Each Class (1.5-2 hrs)\n\nPrep: Videos and readings\nWarmups: practice problems, graded on completion\n\nIn Class (1 hr)\n\nQuestions\nGroup work\nActivities\nAdditional topics, demonstrations, etc."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-14",
    "href": "content/modules/00-intro/in-class.html#section-14",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Friday Labs\n\n7 total throughout the semester\nStart in class with assigned groups\nFinish as homework and submit a week later\n\nAssessment\nAssessed as Excellent (E), Meets Expectations (M), Needs Revision (R), or Not Complete (N). You want Es and Ms.\nRevision\nYou can revise and resubmit your labs after your first assessment in order to achieve a higher assessment."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-15",
    "href": "content/modules/00-intro/in-class.html#section-15",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Quizzes\n\n4 total, on Fridays\nTimed for 45 minutes (contact me with DRC letters!!)\n\nLearning Targets\n\nWe have 12 Learning Targets related to core course competencies.\nYou’ll have multiple opportunities to complete each Learning Target, but you only need to do it once.\n3 targets are added on each quiz, but you only need to attempt ones you haven’t already gotten.\n\nFinal Exam\nIncludes opportunities to complete all 12 learning targets, with 3 hours."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-16",
    "href": "content/modules/00-intro/in-class.html#section-16",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "A Typical 3-Week Module\n\n\n\n\ngantt\n    title A CSCI 0200 Module\n    axisFormat %A\n    tickInterval 1day\n    section Week A\n    Prep, warmup            :active, a1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, a2, 2014-01-08, 1d\n    Class         :2014-01-08, 1d\n    Prep, warmup    :active, a1, 2014-01-10, 1d\n    Lab A           :a3, 2014-01-10, 1d\n    section Week B\n    Prep, warmup            :active, a1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, a2, 2014-01-08, 1d\n    Class         :2014-01-08, 1d\n    Prep, warmup    :active, a1, 2014-01-10, 1d\n    Lab B           :a3, 2014-01-10, 1d\n    Lab A due         :done, b3, 2014-01-10, 1d\n    section Week C\n    Prep, warmup            :active, b1, 2014-01-06, 1d\n    Class            :2014-01-06, 1d\n    Prep, warmup         :active, b2, 2014-01-08, 1d\n    Class            :2014-01-08, 1d\n    Lab B due         :done, b3, 2014-01-10, 1d\n    Quiz              :crit, done, c3,  2014-01-10, 1d"
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#section-17",
    "href": "content/modules/00-intro/in-class.html#section-17",
    "title": "Welcome  to CSCI 0200!",
    "section": "",
    "text": "Final Grade\n\n\n\n\n\n\n\n\nTier\nLearning Targets\nLabs\n\n\n\n\nA\n▢ ▢ ▢\nE: ▢ ▢ ▢ ▢ M or E: ▢ ▢ ▢\n\n\nB\n▢ ▢\nE: ▢ ▢ M or E: ▢ ▢ ▢ ▢ ▢\n\n\nC\n▢ ▢ ▢ ▢ ▢ ▢\nM or E: ▢ ▢ ▢ ▢ ▢  R, M, or E: ▢ ▢\n\n\n\nMissing many warmups results in a penalty to your final grade."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#support-resources",
    "href": "content/modules/00-intro/in-class.html#support-resources",
    "title": "Welcome  to CSCI 0200!",
    "section": "Support Resources",
    "text": "Support Resources\nAcademic support\n\nStudent Hours are your time: come talk to me about anything! Mondays 2pm-4pm, Thursdays 3pm-4pm.\nEvening Peer Help, hours TBD.\nOur Assistant in Instruction Smith Gakuya holds Student Hours for CSCI 0200.\nOnline Q&A forum.\n\nClearing barriers to learning\n\nThe DRC can help you obtain a letter of accommodation for timed assessments.\nLegally, I need your letter in order to offer you accommodations."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#classroom-environment",
    "href": "content/modules/00-intro/in-class.html#classroom-environment",
    "title": "Welcome  to CSCI 0200!",
    "section": "Classroom Environment",
    "text": "Classroom Environment\n \nInclusion, access, and participation are collective projects.\n\nDiscrimination is unjust and it sucks. Don’t do it.\nAddress people respectfully — chosen names and pronouns.\nDon’t leave each other behind in group work.\nBragging about something being easy just makes the people around you feel bad.\n\nAre you fast at the material? Cool. Use your ability to support the learning of the people around you.\n\nI am a mandatory reporter of potential incidents of sexual violence or harassment. There is a link to some confidential resources on the syllabus."
  },
  {
    "objectID": "content/modules/00-intro/in-class.html#for-wednesday",
    "href": "content/modules/00-intro/in-class.html#for-wednesday",
    "title": "Welcome  to CSCI 0200!",
    "section": "For Wednesday",
    "text": "For Wednesday\n \nEntrance Survey: tell me about yourself and help me find your teammates for lab.\nMath autobiography: your history as a learner and user of mathematics.\nThese assignments are on Canvas."
  },
  {
    "objectID": "content/modules/41-counting-2/prep.html",
    "href": "content/modules/41-counting-2/prep.html",
    "title": "More Counting: Permutations and Combinations",
    "section": "",
    "text": "Permutations: How many ways to rearrange the letters in a word? (6:52)\nCombinations Formula: Counting the number of ways to choose \\(r\\) items from \\(n\\) items (6:33)\nHow many ways are there to reorder the word MISSISSIPPI? (7:03)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/41-counting-2/prep.html#problem-1",
    "href": "content/modules/41-counting-2/prep.html#problem-1",
    "title": "More Counting: Permutations and Combinations",
    "section": "Problem 1",
    "text": "Problem 1\nConsider the four letters \\(a,b,c,d\\).\n\nPart A\nWrite down 6 permutations of these letters. How many total permutations are there?\n\n\nPart B\nWrite down 4 \\(3\\)-permutations of these letters. How many total \\(3\\)-permutations are there?\n\n\nPart C\nPick one combination of 3 letters from \\(abcd\\), and write down all permutations of this combination.\nHow many combinations of 3 letters are there from \\(abcd\\)?"
  },
  {
    "objectID": "content/modules/41-counting-2/prep.html#problem-2",
    "href": "content/modules/41-counting-2/prep.html#problem-2",
    "title": "More Counting: Permutations and Combinations",
    "section": "Problem 2",
    "text": "Problem 2\nIn the video “How many ways are there to reorder the word MISSISSIPPI?” by Dr. Trefor Bazett, Dr. Bazett computes the number of reorderings as follows. First he considers the number of places to put all the “S”s, then all the “I”s, then the two “Ps”, and finally the “M”. The resulting expression is\n\\[\n\\begin{aligned}\n    \\binom{11}{4} \\binom{7}{4} \\binom{4}{2} \\binom{1}{1}\\;.\n\\end{aligned}\n\\tag{1}\\]\n\nPart A\nFind the mistake in Dr. Bazett’s solution. Describe what the error is and write down the correct solution!\nYes, math profs make mistakes too…\n\n\nPart B\nPerform the same analysis as Dr. Bazett, but start by placing the “M”, then the two “P”s, then the four “I”s, and then the four “S”s. You should get an expression that is similar to your corrected answer in Part A, including some of the same numbers, but in different places.\n\n\nPart C\nUsing the formula for \\(\\binom{n}{k}\\), write a calculation to show that your answer in Part B agrees with (is the same number as) Dr. Bazett’s solution in Equation 1 (after your correction from Part A).\n\n\nPart D\nThe method of combinatorial proof is used to show that two expressions are equal by demonstrating that they are different ways of counting the same thing. Use a combinatorial proof to show that, for any integers \\(n\\), \\(k\\), and \\(j\\) such that \\(k + j \\leq n\\),\n\\[\n\\begin{aligned}\n    \\binom{n}{k}\\binom{n-k}{j} = \\binom{n}{j}\\binom{n-j}{k}\\;.\n\\end{aligned}\n\\]\nNote: it is possible to do this with algebra, but please don’t! The combinatorial proof is simpler and nicer.\nHint: consider the number of ways to reorder a word of length \\(n\\) containing only three kinds of distinct letters."
  },
  {
    "objectID": "content/modules/60-asymptotics/prep.html",
    "href": "content/modules/60-asymptotics/prep.html",
    "title": "Asymptotics and Big-Oh",
    "section": "",
    "text": "No videos for today!\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/60-asymptotics/prep.html#problem-1",
    "href": "content/modules/60-asymptotics/prep.html#problem-1",
    "title": "Asymptotics and Big-Oh",
    "section": "Problem 1",
    "text": "Problem 1\nWrite a careful proof that \\(\\frac{n^2 - 1}{2n+2} \\in O(n)\\). You may assume that \\(n \\in \\mathbb{N}\\). Your proof should include a choice of the witnesses \\(C\\) and \\(k\\) and an argument for why those witnesses work."
  },
  {
    "objectID": "content/modules/60-asymptotics/prep.html#problem-2",
    "href": "content/modules/60-asymptotics/prep.html#problem-2",
    "title": "Asymptotics and Big-Oh",
    "section": "Problem 2",
    "text": "Problem 2\nFind the smallest integer \\(p\\) such that \\(f(n) \\in O(n^p)\\) for each of the following choices of the function \\(f\\). You may assume that \\(n \\in \\mathbb{N}\\). You should explain your answers but do not need to write formal proofs. You may find it useful to remember that \\(\\log n \\notin O(1)\\) and \\(\\log n \\leq n\\) for all \\(n\\).\n\n\\(f(n) = 3n^2\\)\n\\(f(n) = \\log n\\)\n\\(f(n) = n^2 \\log n\\)\n\\(f(n) = \\frac{\\log n}{n}\\)\n\\(f(n) = \\frac{n^3+2}{n^2 - n - 1}\\)"
  },
  {
    "objectID": "content/modules/60-asymptotics/prep.html#problem-3",
    "href": "content/modules/60-asymptotics/prep.html#problem-3",
    "title": "Asymptotics and Big-Oh",
    "section": "Problem 3",
    "text": "Problem 3\nYour so-called friend has a cool proof for you.\n\nSince \\(2n = O(n)\\) and \\(\\log n = O(n)\\), we know that \\(2n = O(n) = \\log n\\). So, \\(2n = \\log n\\) for all \\(n\\).\n\nIn a brief paragraph, patiently explain to your friend why this proof is incorrect. In part of your paragraph, you may wish to comment on the superiority of the notation \\(f(n) \\in O(g(n))\\) (rather than \\(f(n) = O(g(n))\\))."
  },
  {
    "objectID": "content/modules/60-asymptotics/prep.html#optional-challenge-problem-4",
    "href": "content/modules/60-asymptotics/prep.html#optional-challenge-problem-4",
    "title": "Asymptotics and Big-Oh",
    "section": "(Optional Challenge) Problem 4",
    "text": "(Optional Challenge) Problem 4\nYou don’t need to complete this problem in order to earn credit for completing the warmup.\nWe can think of the statement \\(f(n) \\in O(g(n))\\) as a relation between functions, which we could write \\(fRg\\). Using the definition of \\(f(n) \\in O(g(n))\\) (Definition 1 in Rosen), write a careful proof that this relation is transitive. In your proof, you should construct witnesses demonstrating that \\(f(n) \\in O(h(n))\\) in terms of other witnesses that follow from the assumption that \\(f(n) \\in O(g(n))\\) and \\(g(n) \\in O(h(n))\\)."
  },
  {
    "objectID": "content/modules/60-asymptotics/in-class.html",
    "href": "content/modules/60-asymptotics/in-class.html",
    "title": "In-Class: Asymptotics",
    "section": "",
    "text": "Which of the following functions is \\(O(\\log n)\\)? For each one that is \\(O(\\log n)\\), find witnesses, making an effor to choose \\(C\\) as small as you can. For any that are not \\(O(\\log n)\\), write a proof or calculation explaining why.\n\n\\(f(n) = \\log(n + 1)\\).\n\\(g(n) = \\log(n^2 + 1)\\).\n\\(h(n) = \\log (n^{100} + 1)\\).\n\\(\\ell(n) = \\left(\\log n\\right)^2\\).\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/24-more-induction/prep.html",
    "href": "content/modules/24-more-induction/prep.html",
    "title": "More Induction",
    "section": "",
    "text": "Induction Proofs Involving Inequalities (6:34)\nStrong Induction (10:08)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/24-more-induction/prep.html#videos-20-minutes",
    "href": "content/modules/24-more-induction/prep.html#videos-20-minutes",
    "title": "More Induction",
    "section": "",
    "text": "Induction Proofs Involving Inequalities (6:34)\nStrong Induction (10:08)"
  },
  {
    "objectID": "content/modules/24-more-induction/prep.html#reading-30-minutes",
    "href": "content/modules/24-more-induction/prep.html#reading-30-minutes",
    "title": "More Induction",
    "section": "Reading (~30 minutes)",
    "text": "Reading (~30 minutes)\n\nDMOI Chapter 2. The new stuff is in “Strong Induction” until end, but you will benefit from reviewing the entire chapter."
  },
  {
    "objectID": "content/modules/24-more-induction/prep.html#warmup-50-minutes",
    "href": "content/modules/24-more-induction/prep.html#warmup-50-minutes",
    "title": "More Induction",
    "section": "Warmup (~50 minutes)",
    "text": "Warmup (~50 minutes)\n\nProblem 1\nYou and your friend are playing the following (fun!) game. There are two piles of apples. The first player removes some positive integer number of apples from one of the piles. Then, the second player also removes some number of apples from one of the piles. Each player can remove any number of apples from one of the two piles, but cannot take apples from both piles simultaneously.\nThe players alternate until one of them removes the very last apple (from either pile). That player, who removes the very last apple, wins.\nYou deviously encourage your friend to go first. Then, you use a simple copycat strategy: whenever your friend removes \\(j\\) apples from one pile, you always remove the same number \\(j\\) apples from the second pile.\nProve the following statement using strong induction:\nProposition: If at the beginning of the game the two piles contain the same number of apples, then you (the second player) always win using your copycat strategy.\n\n\nProblem 2\n\nMotivation\nIn computer science, we often use induction to prove the correctness of a function – that is, we prove formally that the function does what it is supposed to do. This is sometimes called “proving a function.” For example, consider the Python function below, which reverses an input string using recursion.\n\ndef reverse_string(s):\n    \"\"\"\n    reverse the string s. The first letter becomes the last letter, the second letter becomes the second-to-last letter, etc. \n\n    args: \n      s, the string to be reversed\n\n    returns: the reversed string\n    \"\"\"\n\n    if s == \"\":\n        return \"\"\n    else:\n        return reverse_string(s[1:]) + s[0]\n\nHere it is in action.\n\nreverse_string(\"CSCI 0200\")\n\n'0020 ICSC'\n\n\nWe got the right answer for this input! But…would we get the right answer on every possible input? Let’s write a proof which will guarantee that we will.\n\n\nProblem Statement\nWe’ll write a string with \\(n\\) characters as \\(s_1s_2s_3\\cdots s_{n-2}s_{n-1}s_n\\).\nNow we can state the thing we want to prove:\nProposition: For any \\(n \\in \\mathbb{N}\\), the result of calling the function reverse_string on the string \\(s_1s_2s_3\\cdots s_{n-2}s_{n-1}s_n\\) is the reversal of \\(s\\), that is, the string \\(s_ns_{n-1}s_{n-2}\\cdots s_3s_2s_1\\).\nProve this claim using induction.\nNote: The empty string \\(\\epsilon\\) is the string with no elements at all; this string is its own reversal."
  },
  {
    "objectID": "content/modules/55-numerical-algorithms/prep.html",
    "href": "content/modules/55-numerical-algorithms/prep.html",
    "title": "Numerical Algorithms",
    "section": "",
    "text": "In today’s lab, we are going to use recurrence relations to analyze a numerical algorithm. Numerical algorithms are used for solving problems in computational mathematics. For example, your computer doesn’t naturally “just know” how to compute things like \\(\\sin{x}\\), \\(\\sqrt{x}\\), or \\(\\log x\\) – people need to write algorithms for computing these quantities. Making these algorithms reliable and fast is one of the priorities of the field called numerical analysis, which sits at the intersection of mathematics and computer science.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/55-numerical-algorithms/prep.html#problem-1",
    "href": "content/modules/55-numerical-algorithms/prep.html#problem-1",
    "title": "Numerical Algorithms",
    "section": "Problem 1",
    "text": "Problem 1\n\nIntroduction\nConsider the following algorithm. This algorithm is used to compute a familiar mathematical quantity. It does so by repeatedly computing the sequence defined by the recurrence relation\n\\[\n\\begin{aligned}\n    x_{n+1} = \\frac{1}{2}\\left(x_n + \\frac{a}{x_n}\\right)\n\\end{aligned}\n\\]\nfor some input number \\(a\\). We do this until the difference \\(|x_{n+1} - x_n|\\) is smaller than some \\(\\epsilon\\). The algorithm outputs the final value of \\(x\\) after this threshold is reached. Here’s a more formal description of this algorithm in pseudocode:\n\nAlgorithm 1\nInputs: nonnegative real number \\(a\\), small positive real number \\(\\epsilon &gt; 0\\).\n\nInitialize \\(x = a + 1\\), \\(\\Delta = 2\\epsilon\\).\nWhile \\(\\Delta &gt; \\epsilon\\):\n\n\\(x_\\mathrm{new} \\gets \\frac{1}{2} \\left(x + \\frac{a}{x}\\right)\\).\n\\(\\Delta \\gets |x_\\mathrm{new} - x|\\).\n\\(x \\gets x_\\mathrm{new}\\).\n\nReturn \\(x\\)."
  },
  {
    "objectID": "content/modules/55-numerical-algorithms/prep.html#part-a",
    "href": "content/modules/55-numerical-algorithms/prep.html#part-a",
    "title": "Numerical Algorithms",
    "section": "Part A",
    "text": "Part A\nWrite a function in Python or Java that implements Algorithm 1. The user should be able to specify the values of \\(a\\) and \\(\\epsilon\\).\nNotes:\n\nIt is possible but not required (or easier) to do this with a recursive function.\nSet the default value of \\(\\epsilon\\) at \\(10^{-16}\\). In Python this can be done by writing epsilon = 1e-16 in the appropriate location.\nIt’s fun, though not required, to print the value of \\(x\\) at each iteration.\n\n\nPart B\nWhat familiar mathematical quantity does this function approximately compute? You don’t have to reason about this function mathematically – just try a few values of a and make an informed guess.\nNote: proving the answer to this question, and describing how well the function approximates its target, is a classical question in numerical analysis."
  },
  {
    "objectID": "content/modules/80-probability-1/prep.html",
    "href": "content/modules/80-probability-1/prep.html",
    "title": "Introduction to Discrete Probability",
    "section": "",
    "text": "Videos (~0 mins)\n\n\nReading (~0 mins)\n\n\nWarmup\nThere are no warmup problems for today.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/71-graphs-2/prep.html",
    "href": "content/modules/71-graphs-2/prep.html",
    "title": "More Graph Theory",
    "section": "",
    "text": "Please review:\n\nEuler Paths and the 7 Bridges of Konigsberg (6:23)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/71-graphs-2/prep.html#problem-1",
    "href": "content/modules/71-graphs-2/prep.html#problem-1",
    "title": "More Graph Theory",
    "section": "Problem 1",
    "text": "Problem 1\nA walk between vertex \\(u\\) and vertex \\(v\\) in a graph \\(G\\) is a sequence of vertices such that every subsequent pair of vertices in the sequence has an edge between them in \\(G\\). A path is a walk in which no vertices are repeated. A tree is a graph with the property that there is exactly one path between any pair of nodes in the graph.\nVertices of degree 1 are sometimes called leaves.\nHere is a fact about trees, which you may use without proof:\n\nTheorem 1 (Trees Have Leaves) Every tree has at least one vertex of degree 1.\n\nUsing Theorem 1, prove the following theorem:\n\nTheorem 2 Any tree with \\(n\\geq 1\\) vertices has exactly \\(n-1\\) edges.\n\n\nHints\n\nInduction on \\(n\\), the number of nodes.\nFor the inductive step, it is necessary to start with a larger tree and “prune” it (rather than starting with a smaller tree and adding a node and an edge).\nIf you remove a leaf of a tree, is the result a tree? How do you know?"
  },
  {
    "objectID": "content/modules/71-graphs-2/prep.html#problem-2",
    "href": "content/modules/71-graphs-2/prep.html#problem-2",
    "title": "More Graph Theory",
    "section": "Problem 2",
    "text": "Problem 2\nFor each of the items 1. through 4. below, draw a \\(G\\) with at least \\(5\\) nodes that matches the given specifications. If it is not possible to match a specification, then explain why.\nFor each part, please do not include any nodes of degree 0 or 1 in your solution.\n\n\\(G\\) has an Euler path and an Euler circuit.\n\\(G\\) has an Euler path but not an Euler circuit.\n\\(G\\) has an Euler circuit but not an Euler path.\n\\(G\\) has neither an Euler path nor an Euler circuit."
  },
  {
    "objectID": "content/modules/10-logic-1/prep.html",
    "href": "content/modules/10-logic-1/prep.html",
    "title": "Preparation: Logical Statements and Truth Tables",
    "section": "",
    "text": "Starting today, we are going to start introducing new course content through videos, readings, and warmup problems. Today’s prep is shorter than usual and should take a little more than an hour.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/10-logic-1/prep.html#optional-reading",
    "href": "content/modules/10-logic-1/prep.html#optional-reading",
    "title": "Preparation: Logical Statements and Truth Tables",
    "section": "Optional Reading:",
    "text": "Optional Reading:\nThis reading covers the same material but has more examples from theoretical mathematics.\n\nBOP 2.1-2.2"
  },
  {
    "objectID": "content/modules/10-logic-1/in-class.html",
    "href": "content/modules/10-logic-1/in-class.html",
    "title": "In Class: Logical Statements and Truth Tables",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/30-relations/prep.html",
    "href": "content/modules/30-relations/prep.html",
    "title": "Relations",
    "section": "",
    "text": "Relations Between Two Sets: Definition + First Examples (6:39)\nRelations and their Inverses (2:49)\nReflexive, Symmetric, and Transitive Relations on a Set (6:54)\nEquivalence Relations: Reflexive, Symmetric, and Transitive (4:36)\nYou need to check EVERY spot for reflexivity, symmetry, and transitivity (3:40)\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/30-relations/prep.html#problem-1",
    "href": "content/modules/30-relations/prep.html#problem-1",
    "title": "Relations",
    "section": "Problem 1",
    "text": "Problem 1\n\nPart A\nRecall that we write \\(x \\equiv y \\pmod{p}\\) for integers \\(x\\), \\(y\\), and \\(p\\) if there exists an integer \\(c\\) such that \\((x-y) = cp\\). For example, \\(16 \\equiv 2 \\pmod{7}\\) because \\((16 - 2) = 2\\times 7\\).\nWrite a complete, careful proof that, for any \\(p\\), the relation \\(\\;\\equiv \\pmod {p}\\) is an equivalence relation.\n\n\nPart B\nList all the equivalence classes of the relation \\(\\equiv \\pmod{3}\\). You can use either set-builder or roster notation."
  },
  {
    "objectID": "content/modules/30-relations/prep.html#problem-2",
    "href": "content/modules/30-relations/prep.html#problem-2",
    "title": "Relations",
    "section": "Problem 2",
    "text": "Problem 2\n\nLet \\(A = \\{a, b, c, d, e\\}\\). Suppose that \\(R\\) is an equivalence relation on \\(A\\). Suppose further that \\(R\\) has two equivalence classes, and that \\(aRd\\), \\(bRc\\), and \\(eRd\\). Fully describe \\(R\\) by either writing it as a set or drawing it."
  },
  {
    "objectID": "content/modules/81-probability-2/prep.html",
    "href": "content/modules/81-probability-2/prep.html",
    "title": "Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Introduction to probability: Events, Sample Space, Formula, Independence (8:51)\nExample: Computing Probabilities using P(E)=N(E)/N(S) (2:02)\nWhat is the probability of guessing a 4 digit pin code? (6:21)\nIntro to Conditional Probability (6:14)\nTwo Conditional Probability Examples (what’s the difference???) (6:15)\n\nContent warning: regrettable binary representation of gender.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/81-probability-2/prep.html#problem-1",
    "href": "content/modules/81-probability-2/prep.html#problem-1",
    "title": "Sample Spaces and Conditional Probability",
    "section": "Problem 1",
    "text": "Problem 1\nImagine that we form a string of \\(5\\) characters, with each character chosen randomly from the set \\(\\{a, b, c, d, e, f\\}\\). We might get a random string like \\(adcca\\) or \\(fbfcd\\).\nPlease answer the following questions:\n\nPart A\nConsider the strings \\(aaaaa\\) and \\(cddeb\\). Which of these two strings is more likely to occur from this process, and why?\n\n\n\n\n\n\nThe two strings are equally likely.\n\n\n\n\n\nPart B\nWhat is the probability of obtaining a string which contains no repeated characters?\n\n\n\n\n\n\nThere are \\(6^5\\) possible strings in all, and of these there are \\(6!/1! = 6!\\) which have no repeated characters. So, the probability is \\(6!/6^5\\).\n\n\n\n\n\nPart C\nWhat is the probability of obtaining a string which does not contain the substring \\(bad\\)?\n\n\n\n\n\n\nThere are \\(6^5\\) possible strings. Of these, there are \\(3\\times 6^2\\) substrings which contain \\(bad\\): there are 3 places we can place the initial \\(b\\), and then 2 more blanks to fill in, which each have 6 possibilities. So, the probability that the string contains \\(bad\\) is \\(\\frac{3}{6^3}\\), and the probability that the string does not contain \\(bad\\) is \\(1 - \\frac{3}{6^3}\\)."
  },
  {
    "objectID": "content/modules/81-probability-2/prep.html#problem-2",
    "href": "content/modules/81-probability-2/prep.html#problem-2",
    "title": "Sample Spaces and Conditional Probability",
    "section": "Problem 2",
    "text": "Problem 2\nHere is a list of probabilities describing the likelihood that a person in the UK was born in each of the 12 months of the year:\nprobs = [0.083, 0.078, 0.081, 0.081, 0.085, 0.083, 0.087, 0.086, 0.086, 0.084, 0.082, 0.083]\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\nFor example, there is an 8.3% chance that a UK individual was born in January, a 7.8% chance that they were born in February, etc. I compiled this data from a chart produced by Niall McCarthy on the website Statista. Technically, the data describes UK residents born during the 20-year period 1995-2014.\nYou may answer the following two questions using any tools you wish, although my advice is to write short Python programs.\n\nPart A\nSuppose that two random citizens of the UK (born between 1995-2014) meet each other on the street. What is the probability that they were born in the same month?\n\n\n\n\n\n\nThe probability that both individuals are born in January is \\(p_{\\text{January}}^2\\); the probability that both individuals are born in February is \\(p_{\\text{February}}^2\\), etc. We need to sum across all twelve months because the choice of which month both people are born in is disjoint. So, we need to calculate\n\\[\n\\begin{aligned}\n    p_{\\text{January}}^2 + p_{\\text{February}}^2 + \\cdots + p_{\\text{December}}^2\n\\end{aligned}\n\\]\nHere’s some code that lets us do this:\n\nprobs = [0.083, 0.078, 0.081, 0.081, 0.085, 0.083, 0.087, 0.086, 0.086, 0.084, 0.082, 0.083]\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n\nprob_same_month = 0\nfor i in range(len(months)):\n    # add the probability that they were both born in the same *specific* month\n    # months[i] \n    prob_same_month += probs[i]**2\nprint(prob_same_month)\n\n0.08323900000000001\n\n\nThis is also a nice opportunity to use list comprehensions if you know that syntax:\n\nprint(sum([probs[i]**2 for i in range(len(months))]))\n\n0.08323900000000001\n\n\n\n\n\n\n\nPart B\nSuppose that two people meet and tell you that they have the same birthmonth. What is the probability that their birthmonth is April, given this information?\n\n\n\n\n\n\nLet \\(E\\) be the event that both people are born in April, and let \\(F\\) be the event that they both share a birthmonth. We want to compute\n\\[\n\\begin{aligned}\n    p(E|F) = \\frac{p(E \\cap F)}{p(F)}\\;.\n\\end{aligned}\n\\]\nLet’s compute each of these two terms. First, \\(p(F)\\) is just what we computed in Part A. \\(p(E\\cap F)\\) is the probability that these people were born in the same month and that their birthmonths are both April. This is just the same as the probability that they were both born in April. So, \\(p(E\\cap F) = p_{\\text{April}}^2\\).\nHere’s some Python code to calculate this:\n\nprint(probs[3]**2 / sum([probs[i]**2 for i in range(len(months))]))\n\n0.07882122562741022\n\n\n\n\n\n\n\nPart C\nSuppose that someone tells you that they share a birthmonth with the first random person they met on the street today. Does that make it more, less, or equally likely that they were born in April?\n\n\n\n\n\n\nLess likely, by comparing our answer from Part B to the overall rate of births in April.\n\n\n\n\n\nPart D\nAre the events “being born in April” and “sharing a birthmonth with the first person you meet on the street” independent?\n\n\n\n\n\n\nNo, because conditioning on the second event changes the probability of the first."
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html",
    "href": "content/modules/81-probability-2/in-class.html",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Practice solving probability problems by enumerating sample spaces.\nDescribe probabilities of events using variables.\nCompute conditional probabilities arithmetically and symbolically.\nAssess whether two events are independent.\n\n\n\n\n\nCorinne and Diana have decided that they are going to become owners of exactly \\(n \\in \\mathbb{N}\\) pets. Corinne loves cats, but Diana is devoted to dogs. They decide that, in order to adopt each of their \\(n\\) new pets, they are going to flip a coin that has probability of heads equal to \\(p\\). If the coin comes up heads, then they will adopt a cat; if the coin comes up tails, they will adopt a dog. The coin flips are independent – the outcome of one flip never impacts the outcome of the next.\n\n\n\nSuppose that \\(n = 3\\) and \\(p = \\frac{1}{2}\\). Let \\(A\\) be the event that Corinne and Diana adopt at most one cat. Let \\(B\\) be the event that Corinne and Diana have both kinds of pet (i.e. at least one cat and at least one dog).\n\nFind \\(p(A)\\), \\(p(B)\\), and \\(p(A|B)\\).\nAre the events \\(A\\) and \\(B\\) independent?\n\n\n\n\nOh no! Corinne and Dianna have been given a rigged coin, which comes up heads with some unknown probability \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A.\n\nFind \\(p(A)\\) in terms of \\(p\\).\nFind \\(p(B)\\) in terms of \\(p\\).\n\nHint: The easiest way to do this is to compute the probability of the event of having no cats, and the probability of the event of having no dogs. Then, combine these using a probability rule to get \\(p(B)\\).\n\nFind \\(p(A \\cap B)\\) in terms of \\(p\\). Note that this is the event that Corinne and Diana adopt exactly one cat.\nFind \\(p(A|B)\\) in terms of \\(p\\).\nWrite down an equation in terms of \\(p\\) that must be true for the events \\(A\\) and \\(B\\) to be independent. You do not need to solve the equation.\n\n\n\n\nSuppose now that Corinne and Diana are going to adopt \\(n\\) pets, where \\(n\\) is some natural number. They are still using a weighted coin with probability of heads equal to \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A:\n\nEvent \\(A\\) is that Corinne and Diana adopt at most one cat.\nEvent \\(B\\) is the event that Corinne and Diana adopt at least one cat and at least one dog.\n\nCompute \\(p(A)\\), \\(p(B)\\), and \\(p(A\\cap B)\\), and \\(p(A|B)\\).\nHints:\n\nFor \\(A\\), compute the probability of the event that Corinne and Diana adopt zero cats, then the probability that they adopt exactly one cat.\nFor \\(B\\), first compute the probability that Corinne and Diana adopt zero cats (all dogs), and then the probability that they adopt zero dogs (all cats).\nFor \\(A \\cap B\\), note that this event requires exactly one cat. Imagine that we pick this cat first. Then, from the remaining \\(n-1\\) pets, all of them must be dogs.\n\n\n\n\nUnder the same conditions as in Part C, compute a formula for the probability that Corinne and Diana adopt exactly \\(k\\) cats.\nHint: Your final formula should involve our friend the binomial coefficient!\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#in-this-activity-you-will",
    "href": "content/modules/81-probability-2/in-class.html#in-this-activity-you-will",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Practice solving probability problems by enumerating sample spaces.\nDescribe probabilities of events using variables.\nCompute conditional probabilities arithmetically and symbolically.\nAssess whether two events are independent."
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#introduction",
    "href": "content/modules/81-probability-2/in-class.html#introduction",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Corinne and Diana have decided that they are going to become owners of exactly \\(n \\in \\mathbb{N}\\) pets. Corinne loves cats, but Diana is devoted to dogs. They decide that, in order to adopt each of their \\(n\\) new pets, they are going to flip a coin that has probability of heads equal to \\(p\\). If the coin comes up heads, then they will adopt a cat; if the coin comes up tails, they will adopt a dog. The coin flips are independent – the outcome of one flip never impacts the outcome of the next."
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#part-a",
    "href": "content/modules/81-probability-2/in-class.html#part-a",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Suppose that \\(n = 3\\) and \\(p = \\frac{1}{2}\\). Let \\(A\\) be the event that Corinne and Diana adopt at most one cat. Let \\(B\\) be the event that Corinne and Diana have both kinds of pet (i.e. at least one cat and at least one dog).\n\nFind \\(p(A)\\), \\(p(B)\\), and \\(p(A|B)\\).\nAre the events \\(A\\) and \\(B\\) independent?"
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#part-b",
    "href": "content/modules/81-probability-2/in-class.html#part-b",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Oh no! Corinne and Dianna have been given a rigged coin, which comes up heads with some unknown probability \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A.\n\nFind \\(p(A)\\) in terms of \\(p\\).\nFind \\(p(B)\\) in terms of \\(p\\).\n\nHint: The easiest way to do this is to compute the probability of the event of having no cats, and the probability of the event of having no dogs. Then, combine these using a probability rule to get \\(p(B)\\).\n\nFind \\(p(A \\cap B)\\) in terms of \\(p\\). Note that this is the event that Corinne and Diana adopt exactly one cat.\nFind \\(p(A|B)\\) in terms of \\(p\\).\nWrite down an equation in terms of \\(p\\) that must be true for the events \\(A\\) and \\(B\\) to be independent. You do not need to solve the equation."
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#part-c",
    "href": "content/modules/81-probability-2/in-class.html#part-c",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Suppose now that Corinne and Diana are going to adopt \\(n\\) pets, where \\(n\\) is some natural number. They are still using a weighted coin with probability of heads equal to \\(p\\). Define the events \\(A\\) and \\(B\\) as in Part A:\n\nEvent \\(A\\) is that Corinne and Diana adopt at most one cat.\nEvent \\(B\\) is the event that Corinne and Diana adopt at least one cat and at least one dog.\n\nCompute \\(p(A)\\), \\(p(B)\\), and \\(p(A\\cap B)\\), and \\(p(A|B)\\).\nHints:\n\nFor \\(A\\), compute the probability of the event that Corinne and Diana adopt zero cats, then the probability that they adopt exactly one cat.\nFor \\(B\\), first compute the probability that Corinne and Diana adopt zero cats (all dogs), and then the probability that they adopt zero dogs (all cats).\nFor \\(A \\cap B\\), note that this event requires exactly one cat. Imagine that we pick this cat first. Then, from the remaining \\(n-1\\) pets, all of them must be dogs."
  },
  {
    "objectID": "content/modules/81-probability-2/in-class.html#part-d",
    "href": "content/modules/81-probability-2/in-class.html#part-d",
    "title": "In Class: Sample Spaces and Conditional Probability",
    "section": "",
    "text": "Under the same conditions as in Part C, compute a formula for the probability that Corinne and Diana adopt exactly \\(k\\) cats.\nHint: Your final formula should involve our friend the binomial coefficient!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to CSCI 0200: Math Foundations of Computer Science! In this course, we’ll learn to the fundamentals of mathematical reasoning about data structures and algorithms. We’ll learn how to address questions like:\n\nHow many possibilities does a search algorithm need to weed through in order to find the best solution to a problem?\nHow do we know that a certain algorithm works? How do we know how fast it is?\nWhat role do uncertainty and randomness play in computation?\n\n\n\n\n\nmindmap\n  root((CSCI 0200))\n    )**Module 1**(\n        (Logic)\n          (Propositional logic)\n            (Boolean algebra)\n            (Circuit design)\n        (Sets)\n            (Set Operations)\n            (Logical quantifiers)\n    )**Module 2**(\n        (Relations)\n            (Functions)\n            (Equivalence Relations)\n        (Proof Techniques)\n            (Direct)\n            (Indirect)\n            (Contradiction)\n            (Induction)\n                (Weak)\n                (Strong)\n    )**Module 3**(\n        (Counting)\n            (Sum and product principles)\n            (Permutations and combinations)\n            (Combinatorial proofs)\n        (Recurrence Relations)\n            (Asymptotics)\n            (Divide and combine)\n    )**Module 4**(\n        (Probability)\n            (Distributions)\n                (Conditioning)\n            (Random variables)\n                (Expectation)\n        (Graphs)\n            (Special graphs)\n                (Trees )\n                (Cycles)\n            (Algorithms)\n\n\n\n\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/minor-errors.html",
    "href": "pages/minor-errors.html",
    "title": "What Makes an Error “Minor”?",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/checkbox-table.html",
    "href": "pages/checkbox-table.html",
    "title": "Calculating Your Grade",
    "section": "",
    "text": "Calculating Your Grade\nYou can use the table below to visualize your progress based on your quiz problems and the assignment feedback you’ve received. This table doesn’t take into account penalties for missing warmups.\nInstructions:\n\nCheck off Learning Targets as you go, starting from the bottom. For example, once you’ve checked off 6 learning targets you have filled the “C” row, and once you’ve checked off 8 learning targets you have filled the “B” row.\nCheck off Labs as you get receive feedback. When you receive an assessmment on a lab, you can check off that lab up to once in each grade tier. For example, if you receive an M, you can check off one box for “M or E” in each of Tiers A, B, and C. If you receive an E, you can check off one box for E in Tiers A and B, and one box for M or E in Tier C. R’s can only be used to check off boxes in the second row of Tier C.\n\nOnce all boxes in a row are checked, you have earned that grade in the course, provided that you have missed no more than 3 warmup activities.\n\n\n\n\n\n\n\n\nTier\nLearning Targets\nLabs\n\n\n\n\nA\n▢ ▢ ▢\nE: ▢ ▢ ▢ ▢ M or E: ▢ ▢ ▢\n\n\nB\n▢ ▢\nE: ▢ ▢ M or E: ▢ ▢ ▢ ▢ ▢\n\n\nC\n▢ ▢ ▢ ▢ ▢ ▢\nM or E: ▢ ▢ ▢ ▢ ▢  R, M, or E: ▢ ▢\n\n\n\n\n\n\n\nHere’s an example for a student who completed 9 learning targets, earned “Exemplary” on five labs, and earned “Meets Expectations” on three labs.\n\n\n\n\n\n\n\n\nTier\nLearning Targets\nLabs\n\n\n\n\nA\n▢ ▢ ☑\nE: ☑ ☑ ☑ ☑ M or E: ☑ ☑ ☑\n\n\nB\n☑ ☑\nE: ☑ ☑ M or E: ☑ ☑ ☑ ☑ ☑\n\n\nC\n☑ ☑ ☑ ☑ ☑ ☑\nM or E: ☑ ☑ ☑ ☑ ☑  R, M, or E: ☑ ☑\n\n\n\nThis student fully meets the requirements of a B and partially meets the requirements of an A, and therefore earns an A- (provided they have missed no more than 3 warmups).\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/acknowledgements.html",
    "href": "pages/acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "The assessment system for this course is closely modeled on Peter-Michael Osera’s offering of CSC 208-01: Discrete Mathematics at Grinnell College.\nMany of the videos used in this course were created by Dr. Trefor Bazett at the University of Victoria. Dr. Bazett kindly posted these videos on YouTube for public use.\nI learned of many of the videos and readings used in this course from Chad Topaz’s offering of MATH-200: Discrete Mathematics at Williams College.\nMy approach to Bloom’s taxonomy and assignments/class time is inspired by this blog post by Robert Talbert.\nMany learning targets are adapted from Robert Talbert’s targets from an offering of MTH 225: Discrete Mathematics at Grand Valley State University.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/collaboration.html",
    "href": "pages/collaboration.html",
    "title": "Collaboration And Academic Honesty",
    "section": "",
    "text": "This is a page of general principles and guidelines that apply in courses I (Phil Chodrow) teach at Middlebury College. It is lightly adapted from the handout “Collaborating on Mathematics” by the Harvey Mudd Department of Mathematics, which I discovered in a Tweet by Francis Su.\nIn any case in which the guidelines and principles on this page conflict with the policies of a specific course, the policies of the specific course should be followed. For example, if the course syllabus says that collaboration is not permitted on homeworks, then collaboration is not permitted on homeworks, regardless of anything written here.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "pages/collaboration.html#why-collaborate",
    "href": "pages/collaboration.html#why-collaborate",
    "title": "Collaboration And Academic Honesty",
    "section": "Why Collaborate?",
    "text": "Why Collaborate?\nMost scientists and engineers don’t work on their own; they work with colleagues and students while doing and publishing research. Increasingly, open problems in science and engineering require multiple skill sets and areas of expertise. Because of this, the need to collaborate will only increase in the future. This is why several of CS@Midd’s learning goals are explicitly focused on communication and collaboration. We want our students to have strong professional and communication skills, to be able to function well as part of a team, and to be able to work and communicate with diverse groups of people."
  },
  {
    "objectID": "pages/collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "href": "pages/collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Homework and Other Individually-Assessed Assignments",
    "text": "Collaborating on Homework and Other Individually-Assessed Assignments\n\n(COLLABORATION IS A LIFE SKILL) Understand that working with others and asking for assistance are not signs of weakness or deficiency; rather, they are essential life skills important for making progress in any discipline, including computer science. Our department wants you to develop these skills. If you’re too shy to come to my office hours or to join a group of people working on their homework, ask a friend to come with you.\n(COLLABORATIONS BENEFIT FROM DIVERSITY) Open yourself up to working with people whom you don’t know (yet). You might find someone you work really well with and who doesn’t think exactly like you do. A wide range of experiecnes and backgrounds is beneficial in problem solving, although it may be helpful to find folks who can work on assignments during the same time of day and at roughly the same pace. If you’re having trouble finding people to work with, I can help!\n(COLLABORATIONS ARE INCLUSIVE) Believe that everyone has something meaningful to contribute (you included), and that you have something to learn from each person. This can be a difficult state of mind to achieve, but critical for healthy, effective collaboration. Here are some practical consequences:\n\nIn any group setting, listen carefully for everyone’s contributions. Don’t dismiss or ignore what someone says, and don’t move on until you’ve considered it carefully. If what is said doesn’t make sense to you, that doesn’t necessarily mean it’s incorrect–the person might just have a way of approaching the problem that is different and not yet clear to you. Furthermore, even ideas that ultimately turn out to be incomplete or incorrect are often still useful building blocks towards a successful approach.\nFind ways to verbally validate the ideas of others. For example: “One really neat feature of Zenith’s approach to part (b) is that it also works with a small modification for part (c).”\nIf someone in the group hasn’t spoken for a while, ask for their ideas or opinions. Conversely, if you find yourself talking a lot, take a step back and allow someone else to contribute to the discussion.\n\n(COLLABORATIONS REQUIRE PREPARATION) Don’t seek help from others on a probem before you’ve had time to think about it yourself, try at least one approach, and formulate the obstacle as clearly as you can. But at the same time, if you find yourself frustrated with a problem and you’re not making progress, don’t wait too long before you look for help from your classmates, your tutors, or me.\n(COLLABORATIONS GENERATE DEEPER UNDERSTANDING) Don’t be satisfied with only producing the correct final result; use your collaboration to push each other to understand:\n\nWhy does this approach work?\nWhat alternative approaches would also have worked?\nWhat are some of the merits and drawbacks of these different approaches?\n\n(COLLABORATIONS ARE EMPOWERING) Good collaborations empower people towards further growth.\n\nWhen you’re working on a problem with others and you find a path before everyone else, avoid ruining the experience of discovery for others. Conversely, if you haven’t figured out something yet and want to enjoy the discovery for yourself, don’t let someone else ruin your joy.\nIf someone asks you for help, don’t just tell them the answer or start showing them a solution method. Listen carefully to their question. Ask for more information if they aren’t being specific enough. If they say “I don’t know where to start,” ask them to tell you about their understanding of what the question is asking and which parts of it seem most puzzling. Ask guiding questions to help them discover ideas for themselves. In these situations, you have the opportunity to learn how to help others learn – this is an invaluable life skill.\n\n(COLLABORATIONS ACKNOWLEDGE CONTRIBUTORS) Whenever you’ve received help on a homework assignment from a classmate, a friend, a tutor, or me, acknowledge the support and briefly describe how it helped you in your assignment.\n\nThe reason I ask you to acknowledge tutors and myself is actually different from the reason I ask you to acknowledge classmates and friends. For classmates and friends, it’s about cultivating transparency and integrity. The primary reason I want you to acknowledge tutors and myself is that the exercise of explicitly remembering and reflecting on your learning journey is part of metacognition, a valuable set of practices that will help you succeed in this class, in college, and in your long-term career."
  },
  {
    "objectID": "pages/collaboration.html#collaborating-on-group-projects",
    "href": "pages/collaboration.html#collaborating-on-group-projects",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Group Projects",
    "text": "Collaborating on Group Projects\n\n(COLLABORATIONS SET GOOD EXPECTATIONS) Establish clear expectations and ways of communicating with each other to avoid misunderstandings. When, where, and how often will you meet? How can you reach each other in case of an emergency?\n(COLLABORATION IS NOT DIVISION OF LABOR) Collaboration is not the same as splitting up a problem into pieces and then slapping the completed pieces together.\n\nIdentify the parts of the problem that need to be completed together and the parts that can be completed individually.\nWork toward a final product that everyone is happy with and that represents the contributions of everyone on the group.\nDon’t just divide up the work based on who might have the most experience or skill with each part of the problem. Let those who want to develop their skills also have a chance to work on pieces that are unfamiliar to them\n\n(COLLABORATIONS ARE EQUITABLE) Aim for each person to contribute a fair and equitable amount of effort and/or time to the group’s deliverables.\n(COLLABORATIONS RESOLVE CONFLICT QUICKLY) Resolve any misunderstands between the team members quickly. Don’t let those misunderstandings fester into distrust, resentment, or anger. Don’t be afraid to ask your professor for help in resolving interpersonal conflict in your team. While this can feel uncomfortable, often these kinds of situations are important opportunities for everyone to learn more about how to coexist as collaborative, whole humans."
  },
  {
    "objectID": "pages/collaboration.html#collaboration-is-a-skill",
    "href": "pages/collaboration.html#collaboration-is-a-skill",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration is a Skill",
    "text": "Collaboration is a Skill\nYou might imagine that you already know whether you need to collaborate and how to do it. And indeed, there’s a lot you know already! But collaboration is a skill, and like other skills it rewards practice and growth. Effective collaboration involves perspective-taking, empathy, respect, and clear communication. We hope that you will find that the benefits of collaboration far outweigh its challenges."
  },
  {
    "objectID": "pages/collaboration.html#collaboration-and-the-middlebury-honor-code",
    "href": "pages/collaboration.html#collaboration-and-the-middlebury-honor-code",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration and the Middlebury Honor Code",
    "text": "Collaboration and the Middlebury Honor Code\nThe Middlebury Honor Code’s preamble states that:\n\nThe students of Middlebury College believe that individual undergraduates must assume responsibility for their own integrity on all assigned academic work…The Middlebury student body, then, declares its commitment to an honor system that fosters moral growth and to a code that will not tolerate academic dishonesty in the College community.\n\nIn any assignment in which you receive a grade individually (homeworks, exams), the purpose of the grade is to measure your learning and achievement. When you turn in such an assignment, you implicitly represent that work as work that you are able to complete yourself under the stated conditions (which may include getting help or working with others). If you cannot complete some work under the stated collaboration conditions, it is dishonest to turn in that work.\nWhen working individually, it is your responsibility to uphold the Code’s standards of integrity and academic honesty. When working in a group, it is additionally your responsibility to ensure that your group as a whole upholds these standards.\nIf you have a question about whether some form of collaboration is permitted, just ask!\n\nWhat Happens if I Observe an Honor Violation?\n\nWe all fail to uphold our highest moral aspirations at times. If you show lack of integrity or academic honesty, that doesn’t mean you’re a bad person. It means that you’re under pressure and chose the course of action that looked like the most workable one to you at the time.\nThat said, if you show lack of integrity or academic honesty, that’s an indicator that you have an opportunity for some very important growth.\nIt is part of my job to help you achieve that growth. I take this part of my job very seriously. In order to help you on your journey, I will connect both of us with the Middlebury Community Standards Office. Office leadership will help us all find a path that helps you grow toward integrity and honesty.\nThis is an awkward and uncomfortable process for everyone involved. You don’t want this."
  },
  {
    "objectID": "private-notes.html",
    "href": "private-notes.html",
    "title": "Learning Objectives",
    "section": "",
    "text": "What are the mathematical foundations of computing? What role does mathematics play in computing?\n\nMathematical reasoning about models of computation. What kinds of computations are possible? (301)\nMathematical reasoning about algorithms. How do we know that an algorithm does what it’s supposed to do? In what cases does a given algorithm work? How do we know how fast it is? (302, 451, 461, other)\n\nStandard discrete math\nLinear algebra\nMultivariable calculus\nProbability\n\nThinking about the world mathematically\n\nThis is not about computer science exactly but it can help for things like social impacts, plus it’s fun!\nMaybe can connect to responsible computing\n\n\nFor models of computation, the core skills are:\n\nProof\nRecursion\n\nFor algorithms, the additional core skills are:\n\nCounting\nElementary probability\nGraphs/networks\n\nReasoning about the world mathematically:\n\nApplications of networks and probability\n\n\nLearning Objectives\n\n\n\n\n  © Phil Chodrow, 2023"
  }
]